{"version":3,"file":"api-requests-c6fca00d.js","sources":["../src/api-requests.js"],"sourcesContent":["/** @format */\n\nimport { fetcher, fetchProxy } from '@core';\nconst BASE_URL = `${import.meta.env.VITE_HOST}`;\nconst PATH = '/text';\nconst ADMIN_PATH = PATH + '/admin';\n\nexport const API = {\n\tfragments: async () =>\n\t\t(await fetchProxy(`${BASE_URL + PATH}/fragments`, { method: 'GET' }))\n\t\t\t.json()\n\t\t\t.catch(console.error),\n\tsources: async () =>\n\t\t(await fetchProxy(`${BASE_URL + PATH}/sources`, { method: 'GET' }))\n\t\t\t.json()\n\t\t\t.catch(console.error),\n\tadminFragments: async () =>\n\t\t(await fetchProxy(`${BASE_URL + ADMIN_PATH}/fragments`, { method: 'GET' }))\n\t\t\t.json()\n\t\t\t.catch(console.error),\n};\nconst data = {};\n\nconst handler = {\n\tasync get(target, prop) {\n\t\tif (!target[prop]) target[prop] = await API[prop]();\n\t\treturn target[prop];\n\t},\n\tset(target, prop, value) {\n\t\tif (prop === 'reset' && value) Reflect.ownKeys(target).forEach(key => delete target[key]);\n\t\telse target[prop] = value;\n\t\treturn true;\n\t},\n};\nexport const dataProxy = new Proxy(data, handler);\n\nexport const removeFragmentById = async id => {\n\tdataProxy.reset = true;\n\treturn await fetcher.post(`${ADMIN_PATH}/fragment-delete/${id}`, null);\n};\n\nexport const removeAllFragments = async () => {\n\tdataProxy.reset = true;\n\treturn await fetcher.post(`${ADMIN_PATH}/fragments-delete-all`, null);\n};\nexport const getExpertEditionByAcrn = async acrn =>\n\tawait fetcher.get(`${PATH}/acronym/${acrn}`, null);\n\nexport const getFragment = async xmlId => await fetcher.get(`${PATH}/fragment/${xmlId}`, null);\n\nexport const getFragmentInter = async (xmlId, urlId, body) =>\n\tawait fetcher.post(`${PATH}/fragment/${xmlId}/inter/${urlId}`, body);\n\nexport const getFragmentInters = async (xmlId, body) =>\n\tawait fetcher.post(`${PATH}/fragment/${xmlId}/inters`, body);\n\nexport const updateFragmentInter = async (xmlId, urlId, body) => {\n\treturn body.inters.length > 1 || !urlId\n\t\t? await getFragmentInters(xmlId, body)\n\t\t: await getFragmentInter(xmlId, urlId, body);\n};\n"],"names":["BASE_URL","PATH","ADMIN_PATH","API","fragments","async","fetchProxy","method","json","catch","console","error","sources","adminFragments","dataProxy","Proxy","target","prop","set","value","Reflect","ownKeys","forEach","key","removeFragmentById","id","reset","fetcher","post","removeAllFragments","getExpertEditionByAcrn","acrn","get","getFragment","xmlId","getFragmentInter","urlId","body","getFragmentInters","updateFragmentInter","inters","length"],"mappings":"gDAGA,MAAMA,EAAW,4BACXC,EAAO,QACPC,EAAaD,EAAO,SAEbE,EAAM,CAClBC,UAAWC,gBACHC,EAAW,GAAGN,EAAWC,cAAkB,CAAEM,OAAQ,SAC1DC,OACAC,MAAMC,QAAQC,OACjBC,QAASP,gBACDC,EAAW,GAAGN,EAAWC,YAAgB,CAAEM,OAAQ,SACxDC,OACAC,MAAMC,QAAQC,OACjBE,eAAgBR,gBACRC,EAAW,GAAGN,EAAWE,cAAwB,CAAEK,OAAQ,SAChEC,OACAC,MAAMC,QAAQC,QAeLG,EAAY,IAAIC,MAbhB,CAAA,EAEG,CACfV,IAAUW,MAAAA,EAAQC,KACZD,EAAOC,KAAOD,EAAOC,SAAcd,EAAIc,MACrCD,EAAOC,IAEfC,IAAA,CAAIF,EAAQC,EAAME,KACJ,UAATF,GAAoBE,EAAOC,QAAQC,QAAQL,GAAQM,SAAQC,UAAcP,EAAOO,KAC/EP,EAAOC,GAAQE,GACb,KAKIK,EAAqBnB,MAAMoB,IACvCX,EAAUY,OAAQ,QACLC,EAAQC,KAAK,GAAG1B,qBAA8BuB,IAAM,OAGrDI,EAAqBxB,UACjCS,EAAUY,OAAQ,QACLC,EAAQC,KAAK,GAAG1B,yBAAmC,OAEpD4B,EAAyBzB,MAAM0B,SACrCJ,EAAQK,IAAI,GAAG/B,aAAgB8B,IAAQ,MAEjCE,EAAc5B,MAAM6B,SAAeP,EAAQK,IAAI,GAAG/B,cAAiBiC,IAAS,MAE5EC,EAAmB9B,MAAO6B,EAAOE,EAAOC,UAC9CV,EAAQC,KAAK,GAAG3B,cAAiBiC,WAAeE,IAASC,GAEnDC,EAAoBjC,MAAO6B,EAAOG,UACxCV,EAAQC,KAAK,GAAG3B,cAAiBiC,WAAgBG,GAE3CE,EAAsBlC,MAAO6B,EAAOE,EAAOC,IAChDA,EAAKG,OAAOC,OAAS,IAAML,QACzBE,EAAkBJ,EAAOG,SACzBF,EAAiBD,EAAOE,EAAOC"}