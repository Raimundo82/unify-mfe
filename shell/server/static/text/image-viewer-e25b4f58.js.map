{"version":3,"file":"image-viewer-e25b4f58.js","sources":["../node_modules/photoswipe/dist/photoswipe-lightbox.esm.js","../node_modules/photoswipe/dist/photoswipe.esm.js","../src/common/image-viewer.jsx"],"sourcesContent":["/*!\n  * PhotoSwipe Lightbox 5.3.4 - https://photoswipe.com\n  * (c) 2022 Dmytro Semenov\n  */\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/** @typedef {undefined | null | false | '' | 0} Falsy */\r\n/** @typedef {keyof HTMLElementTagNameMap} HTMLElementTagName */\r\n\r\n/**\r\n * @template {HTMLElementTagName | Falsy} [T=\"div\"]\r\n * @template {Node | undefined} [NodeToAppendElementTo=undefined]\r\n * @param {string=} className\r\n * @param {T=} [tagName]\r\n * @param {NodeToAppendElementTo=} appendToEl\r\n * @returns {T extends HTMLElementTagName ? HTMLElementTagNameMap[T] : HTMLElementTagNameMap['div']}\r\n */\r\nfunction createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName || 'div');\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  // @ts-expect-error\r\n  return el;\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nfunction toTransformString(x, y, scale) {\r\n  let propValue = 'translate3d('\r\n    + x + 'px,' + (y || 0) + 'px'\r\n    + ',0)';\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ' scale3d('\r\n      + scale + ',' + scale\r\n      + ',1)';\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nfunction setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? (w + 'px') : w;\r\n  el.style.height = (typeof h === 'number') ? (h + 'px') : h;\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nconst LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n */\r\nfunction specialKeyUsed(e) {\r\n  if (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey) {\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} option\r\n * @param {string=} legacySelector\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nfunction getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {any} fn\r\n */\r\nfunction isPswpClass(fn) {\r\n  return typeof fn === 'function'\r\n    && fn.prototype\r\n    && fn.prototype.goTo;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nfunction isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\n\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point, transitionDuration: number | false }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thubmnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thubmnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter<T>\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback<T>\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe=} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name].push({ fn, priority });\r\n    this._filters[name].sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    if (this.pswp) {\r\n      this.pswp.addFilter(name, fn, priority);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    if (this._filters[name]) {\r\n      this._filters[name].forEach((filter) => {\r\n        // @ts-expect-error\r\n        args[0] = filter.fn.apply(this, args);\r\n      });\r\n    }\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name].push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    if (this.pswp) {\r\n      this.pswp.on(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.off(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    if (!this._listeners) {\r\n      return event;\r\n    }\r\n\r\n    if (this._listeners[name]) {\r\n      this._listeners[name].forEach((listener) => {\r\n        listener.call(this, event);\r\n      });\r\n    }\r\n\r\n    return event;\r\n  }\r\n}\n\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : '',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).decoding = 'async';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).alt = '';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).src = imageSrc;\r\n      this.element.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hidden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\n\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipe} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement} */\r\n    this.element = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = null;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean=} isLazy\r\n   * @param {boolean=} reload\r\n   */\r\n  load(isLazy, reload) {\r\n    if (this.slide && this.usePlaceholder()) {\r\n      if (!this.placeholder) {\r\n        const placeholderSrc = this.instance.applyFilters(\r\n          'placeholderSrc',\r\n          // use  image-based placeholder only for the first slide,\r\n          // as rendering (even small stretched thumbnail) is an expensive operation\r\n          (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n          this\r\n        );\r\n        this.placeholder = new Placeholder(\r\n          placeholderSrc,\r\n          this.slide.container\r\n        );\r\n      } else {\r\n        const placeholderEl = this.placeholder.element;\r\n        // Add placeholder to DOM if it was already created\r\n        if (placeholderEl && !placeholderEl.parentElement) {\r\n          this.slide.container.prepend(placeholderEl);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    if (this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src;\r\n\r\n    imageElement.alt = this.data.alt || '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    // eslint-disable-next-line max-len\r\n    if (this.instance.dispatch('contentResize', { content: this, width, height }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        // eslint-disable-next-line max-len\r\n        this.instance.dispatch('imageSizeChange', { slide: this.slide, width, height, content: this });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (this.data.srcset) {\r\n      const image = /** @type HTMLImageElement */ (this.element);\r\n      const sizesWidth = this.instance.applyFilters(\r\n        'srcsetSizesWidth',\r\n        this.displayedImageWidth,\r\n        this\r\n      );\r\n\r\n      if (!image.dataset.largestUsedSize\r\n          || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)) {\r\n        image.sizes = sizesWidth + 'px';\r\n        image.dataset.largestUsedSize = String(sizesWidth);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = null;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.destroy();\r\n      this.placeholder = null;\r\n    }\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      /** @type {HTMLElement} */\r\n      let errorMsgEl = createElement('pswp__error-msg');\r\n      errorMsgEl.innerText = this.instance.options.errorMsg;\r\n      errorMsgEl = this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      );\r\n      this.element = createElement('pswp__content pswp__error-msg-container');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().catch(() => {}).finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.slide) {\r\n      if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n        // add image to slide when it becomes active,\r\n        // even if it's not finished decoding\r\n        this.appendImage();\r\n      } else if (this.isError()) {\r\n        this.load(false, true); // try to reload\r\n      }\r\n\r\n      if (this.slide.holderElement) {\r\n        this.slide.holderElement.setAttribute('aria-hidden', 'false');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n    if (this.slide && this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n\r\n    if (this.placeholder && this.placeholder.element) {\r\n      this.placeholder.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipe} pswp\r\n */\r\nfunction getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {{ x?: number; y?: number }} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nfunction parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  /** @type {number} */\r\n  let paddingValue;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return paddingValue || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {{ x?: number; y?: number }} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n */\r\nfunction getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\n\nconst MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe=} pswp PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {{ x?: number; y?: number }} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    this.elementSize = {\r\n      x: maxWidth,\r\n      y: maxHeight\r\n    };\r\n\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = this.panAreaSize.x / this.elementSize.x;\r\n    const vRatio = this.panAreaSize.y / this.elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    // eslint-disable-next-line max-len\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (optionPrefix + 'ZoomLevel');\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    const currZoomLevel = this._parseZoomLevelOption('max');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return Math.max(1, this.fit * 4);\r\n  }\r\n}\n\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipe | PhotoSwipeLightbox | PhotoSwipeBase} instance PhotoSwipe instance\r\n * @param {number} index\r\n * @returns Image that is being decoded or false.\r\n */\r\nfunction lazyLoadData(itemData, instance, index) {\r\n  // src/slide/content/content.js\r\n  const content = instance.createContentFromData(itemData, index);\r\n\r\n  if (!content || !content.lazyLoad) {\r\n    return;\r\n  }\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset and we need to define sizes\r\n  // @ts-expect-error should provide pswp instance?\r\n  const viewportSize = instance.viewportSize || getViewportSize(options, instance);\r\n  const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n\r\n  const zoomLevel = new ZoomLevel(options, itemData, -1);\r\n  zoomLevel.update(content.width, content.height, panAreaSize);\r\n\r\n  content.lazyLoad();\r\n  content.setDisplayedSize(\r\n    Math.ceil(content.width * zoomLevel.initial),\r\n    Math.ceil(content.height * zoomLevel.initial)\r\n  );\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipe | PhotoSwipeLightbox} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n */\r\nfunction lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\n\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../photoswipe.js\").PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems;\r\n    const { dataSource } = this.options;\r\n    if (!dataSource) {\r\n      numItems = 0;\r\n    } else if ('length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if ('gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    // @ts-expect-error\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getItemData(index) {\r\n    const { dataSource } = this.options;\r\n    let dataSourceItem;\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && dataSource.gallery) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options.children || this.options.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   */\r\n  // eslint-disable-next-line class-methods-use-this\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    // eslint-disable-next-line max-len\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (element.tagName === 'A' ? element : element.querySelector('a'));\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = parseInt(linkEl.dataset.pswpWidth, 10);\r\n      itemData.height = parseInt(linkEl.dataset.pswpHeight, 10);\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt');\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n\r\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns Image that is being decoded or false.\r\n   */\r\n  lazyLoadData(itemData, index) {\r\n    return lazyLoadData(itemData, this, index);\r\n  }\r\n}\n\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../slide/content.js').default} Content */\r\n/** @typedef {import('../core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('../core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n\r\n/**\r\n * PhotoSwipe Lightbox\r\n *\r\n * - If user has unsupported browser it falls back to default browser action (just opens URL)\r\n * - Binds click event to links that should open PhotoSwipe\r\n * - parses DOM strcture for PhotoSwipe (retrieves large image URLs and sizes)\r\n * - Initializes PhotoSwipe\r\n *\r\n *\r\n * Loader options use the same object as PhotoSwipe, and supports such options:\r\n *\r\n * gallery - Element | Element[] | NodeList | string selector for the gallery element\r\n * children - Element | Element[] | NodeList | string selector for the gallery children\r\n *\r\n */\r\nclass PhotoSwipeLightbox extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   */\r\n  constructor(options) {\r\n    super();\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = options || {};\r\n    this._uid = 0;\r\n  }\r\n\r\n  /**\r\n   * Initialize lightbox, should be called only once.\r\n   * It's not included in the main constructor, so you may bind events before it.\r\n   */\r\n  init() {\r\n    this.onThumbnailsClick = this.onThumbnailsClick.bind(this);\r\n\r\n    // Bind click events to each gallery\r\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\r\n      .forEach((galleryElement) => {\r\n        galleryElement.addEventListener('click', this.onThumbnailsClick, false);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @param {MouseEvent} e\r\n   */\r\n  onThumbnailsClick(e) {\r\n    // Exit and allow default browser action if:\r\n    if (specialKeyUsed(e) // ... if clicked with a special key (ctrl/cmd...)\r\n        || window.pswp // ... if PhotoSwipe is already open\r\n        || window.navigator.onLine === false) { // ... if offline\r\n      return;\r\n    }\r\n\r\n    // If both clientX and clientY are 0 or not defined,\r\n    // the event is likely triggered by keyboard,\r\n    // so we do not pass the initialPoint\r\n    //\r\n    // Note that some screen readers emulate the mouse position,\r\n    // so it's not ideal way to detect them.\r\n    //\r\n    let initialPoint = { x: e.clientX, y: e.clientY };\r\n\r\n    if (!initialPoint.x && !initialPoint.y) {\r\n      initialPoint = null;\r\n    }\r\n\r\n    let clickedIndex = this.getClickedIndex(e);\r\n    clickedIndex = this.applyFilters('clickedIndex', clickedIndex, e, this);\r\n    const dataSource = {\r\n      gallery: /** @type {HTMLElement} */ (e.currentTarget)\r\n    };\r\n\r\n    if (clickedIndex >= 0) {\r\n      e.preventDefault();\r\n      this.loadAndOpen(clickedIndex, dataSource, initialPoint);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get index of gallery item that was clicked.\r\n   *\r\n   * @param {MouseEvent} e click event\r\n   */\r\n  getClickedIndex(e) {\r\n    // legacy option\r\n    if (this.options.getClickedIndexFn) {\r\n      return this.options.getClickedIndexFn.call(this, e);\r\n    }\r\n\r\n    const clickedTarget = /** @type {HTMLElement} */ (e.target);\r\n    const childElements = getElementsFromOption(\r\n      this.options.children,\r\n      this.options.childSelector,\r\n      /** @type {HTMLElement} */ (e.currentTarget)\r\n    );\r\n    const clickedChildIndex = childElements.findIndex(\r\n      child => child === clickedTarget || child.contains(clickedTarget)\r\n    );\r\n\r\n    if (clickedChildIndex !== -1) {\r\n      return clickedChildIndex;\r\n    } else if (this.options.children || this.options.childSelector) {\r\n      // click wasn't on a child element\r\n      return -1;\r\n    }\r\n\r\n    // There is only one item (which is the gallery)\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Load and open PhotoSwipe\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource=} dataSource\r\n   * @param {{ x?: number; y?: number }} [initialPoint]\r\n   */\r\n  loadAndOpen(index, dataSource, initialPoint) {\r\n    // Check if the gallery is already open\r\n    if (window.pswp) {\r\n      return false;\r\n    }\r\n\r\n    // set initial index\r\n    this.options.index = index;\r\n\r\n    // define options for PhotoSwipe constructor\r\n    this.options.initialPointerPos = initialPoint;\r\n\r\n    this.shouldOpen = true;\r\n    this.preload(index, dataSource);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Load the main module and the slide content by index\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource=} dataSource\r\n   */\r\n  preload(index, dataSource) {\r\n    const { options } = this;\r\n\r\n    if (dataSource) {\r\n      options.dataSource = dataSource;\r\n    }\r\n\r\n    // Add the main module\r\n    /** @type {Promise<Type<PhotoSwipe>>[]} */\r\n    const promiseArray = [];\r\n\r\n    const pswpModuleType = typeof options.pswpModule;\r\n    if (isPswpClass(options.pswpModule)) {\r\n      promiseArray.push(Promise.resolve(/** @type {Type<PhotoSwipe>} */ (options.pswpModule)));\r\n    } else if (pswpModuleType === 'string') {\r\n      throw new Error('pswpModule as string is no longer supported');\r\n    } else if (pswpModuleType === 'function') {\r\n      promiseArray.push(/** @type {() => Promise<Type<PhotoSwipe>>} */ (options.pswpModule)());\r\n    } else {\r\n      throw new Error('pswpModule is not valid');\r\n    }\r\n\r\n    // Add custom-defined promise, if any\r\n    if (typeof options.openPromise === 'function') {\r\n      // allow developers to perform some task before opening\r\n      promiseArray.push(options.openPromise());\r\n    }\r\n\r\n    if (options.preloadFirstSlide !== false && index >= 0) {\r\n      this._preloadedContent = lazyLoadSlide(index, this);\r\n    }\r\n\r\n    // Wait till all promises resolve and open PhotoSwipe\r\n    const uid = ++this._uid;\r\n    Promise.all(promiseArray).then((iterableModules) => {\r\n      if (this.shouldOpen) {\r\n        const mainModule = iterableModules[0];\r\n        this._openPhotoswipe(mainModule, uid);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} module\r\n   * @param {number} uid\r\n   */\r\n  _openPhotoswipe(module, uid) {\r\n    // Cancel opening if UID doesn't match the current one\r\n    // (if user clicked on another gallery item before current was loaded).\r\n    //\r\n    // Or if shouldOpen flag is set to false\r\n    // (developer may modify it via public API)\r\n    if (uid !== this._uid && this.shouldOpen) {\r\n      return;\r\n    }\r\n\r\n    this.shouldOpen = false;\r\n\r\n    // PhotoSwipe is already open\r\n    if (window.pswp) {\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Pass data to PhotoSwipe and open init\r\n     *\r\n     * @type {PhotoSwipe}\r\n     */\r\n    const pswp = typeof module === 'object'\r\n        ? new module.default(this.options) // eslint-disable-line\r\n        : new module(this.options); // eslint-disable-line\r\n\r\n    this.pswp = pswp;\r\n    window.pswp = pswp;\r\n\r\n    // map listeners from Lightbox to PhotoSwipe Core\r\n    /** @type {(keyof PhotoSwipeEventsMap)[]} */\r\n    (Object.keys(this._listeners)).forEach((name) => {\r\n      this._listeners[name].forEach((fn) => {\r\n        pswp.on(name, /** @type {EventCallback<typeof name>} */(fn));\r\n      });\r\n    });\r\n\r\n    // same with filters\r\n    /** @type {(keyof PhotoSwipeFiltersMap)[]} */\r\n    (Object.keys(this._filters)).forEach((name) => {\r\n      this._filters[name].forEach((filter) => {\r\n        pswp.addFilter(name, filter.fn, filter.priority);\r\n      });\r\n    });\r\n\r\n    if (this._preloadedContent) {\r\n      pswp.contentLoader.addToCache(this._preloadedContent);\r\n      this._preloadedContent = null;\r\n    }\r\n\r\n    pswp.on('destroy', () => {\r\n      // clean up public variables\r\n      this.pswp = null;\r\n      window.pswp = null;\r\n    });\r\n\r\n    pswp.init();\r\n  }\r\n\r\n  /**\r\n   * Unbinds all events, closes PhotoSwipe if it's open.\r\n   */\r\n  destroy() {\r\n    if (this.pswp) {\r\n      this.pswp.destroy();\r\n    }\r\n\r\n    this.shouldOpen = false;\r\n    this._listeners = null;\r\n\r\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\r\n      .forEach((galleryElement) => {\r\n        galleryElement.removeEventListener('click', this.onThumbnailsClick, false);\r\n      });\r\n  }\r\n}\n\nexport { PhotoSwipeLightbox as default };\n//# sourceMappingURL=photoswipe-lightbox.esm.js.map\n","/*!\n  * PhotoSwipe 5.3.4 - https://photoswipe.com\n  * (c) 2022 Dmytro Semenov\n  */\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/** @typedef {undefined | null | false | '' | 0} Falsy */\r\n/** @typedef {keyof HTMLElementTagNameMap} HTMLElementTagName */\r\n\r\n/**\r\n * @template {HTMLElementTagName | Falsy} [T=\"div\"]\r\n * @template {Node | undefined} [NodeToAppendElementTo=undefined]\r\n * @param {string=} className\r\n * @param {T=} [tagName]\r\n * @param {NodeToAppendElementTo=} appendToEl\r\n * @returns {T extends HTMLElementTagName ? HTMLElementTagNameMap[T] : HTMLElementTagNameMap['div']}\r\n */\r\nfunction createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName || 'div');\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  // @ts-expect-error\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nfunction roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are qual\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n */\r\nfunction clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nfunction toTransformString(x, y, scale) {\r\n  let propValue = 'translate3d('\r\n    + x + 'px,' + (y || 0) + 'px'\r\n    + ',0)';\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ' scale3d('\r\n      + scale + ',' + scale\r\n      + ',1)';\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number=} y\r\n * @param {number=} scale\r\n */\r\nfunction setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string=} prop CSS property to animate\r\n * @param {number=} duration in ms\r\n * @param {string=} ease CSS easing function\r\n */\r\nfunction setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? (prop + ' ' + duration + 'ms ' + (ease || defaultCSSEasing))\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nfunction setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? (w + 'px') : w;\r\n  el.style.height = (typeof h === 'number') ? (h + 'px') : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nfunction removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nfunction decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode().catch(() => {});\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nconst LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n */\r\nfunction specialKeyUsed(e) {\r\n  if (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey) {\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} option\r\n * @param {string=} legacySelector\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nfunction getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nfunction isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\n\n// Detect passive event listener support\r\nlet supportsPassive = false;\r\n/* eslint-disable */\r\ntry {\r\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n    get: () => {\r\n      supportsPassive = true;\r\n    }\r\n  }));\r\n} catch (e) {}\r\n/* eslint-enable */\r\n\r\n\r\n/**\r\n * @typedef {Object} PoolItem\r\n * @prop {HTMLElement | Window | Document} target\r\n * @prop {string} type\r\n * @prop {(e: any) => void} listener\r\n * @prop {boolean} passive\r\n */\r\n\r\nclass DOMEvents {\r\n  constructor() {\r\n    /**\r\n     * @type {PoolItem[]}\r\n     * @private\r\n     */\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type Can be multiple, separated by space.\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean=} passive\r\n   */\r\n  add(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive);\r\n  }\r\n\r\n  /**\r\n   * Removes event listeners\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean=} passive\r\n   */\r\n  remove(target, type, listener, passive) {\r\n    this._toggleListener(target, type, listener, passive, true);\r\n  }\r\n\r\n  /**\r\n   * Removes all bound events\r\n   */\r\n  removeAll() {\r\n    this._pool.forEach((poolItem) => {\r\n      this._toggleListener(\r\n        poolItem.target,\r\n        poolItem.type,\r\n        poolItem.listener,\r\n        poolItem.passive,\r\n        true,\r\n        true\r\n      );\r\n    });\r\n    this._pool = [];\r\n  }\r\n\r\n  /**\r\n   * Adds or removes event\r\n   *\r\n   * @param {HTMLElement | Window | Document} target\r\n   * @param {string} type\r\n   * @param {(e: any) => void} listener\r\n   * @param {boolean} passive\r\n   * @param {boolean=} unbind Whether the event should be added or removed\r\n   * @param {boolean=} skipPool Whether events pool should be skipped\r\n   */\r\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\r\n    if (!target) {\r\n      return;\r\n    }\r\n\r\n    const methodName = unbind ? 'removeEventListener' : 'addEventListener';\r\n    const types = type.split(' ');\r\n    types.forEach((eType) => {\r\n      if (eType) {\r\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\r\n        // so developer doesn't need to do this manually\r\n        if (!skipPool) {\r\n          if (unbind) {\r\n            // Remove from the events pool\r\n            this._pool = this._pool.filter((poolItem) => {\r\n              return poolItem.type !== eType\r\n                || poolItem.listener !== listener\r\n                || poolItem.target !== target;\r\n            });\r\n          } else {\r\n            // Add to the events pool\r\n            this._pool.push({\r\n              target,\r\n              type: eType,\r\n              listener,\r\n              passive\r\n            });\r\n          }\r\n        }\r\n\r\n\r\n        // most PhotoSwipe events call preventDefault,\r\n        // and we do not need browser to scroll the page\r\n        const eventOptions = supportsPassive ? { passive: (passive || false) } : false;\r\n\r\n        target[methodName](\r\n          eType,\r\n          listener,\r\n          eventOptions\r\n        );\r\n      }\r\n    });\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipe} pswp\r\n */\r\nfunction getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {{ x?: number; y?: number }} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nfunction parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  /** @type {number} */\r\n  let paddingValue;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return paddingValue || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {{ x?: number; y?: number }} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n */\r\nfunction getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\n\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n/** @typedef {'x' | 'y'} Axis */\r\n\r\n/**\r\n * Calculates minimum, maximum and initial (center) bounds of a slide\r\n */\r\nclass PanBounds {\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  constructor(slide) {\r\n    this.slide = slide;\r\n\r\n    this.currZoomLevel = 1;\r\n\r\n    /** @type {Point} */\r\n    this.center = {};\r\n    /** @type {Point} */\r\n    this.max = {};\r\n    /** @type {Point} */\r\n    this.min = {};\r\n\r\n    this.reset();\r\n  }\r\n\r\n  /**\r\n   * _getItemBounds\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  update(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n\r\n    if (!this.slide.width) {\r\n      this.reset();\r\n    } else {\r\n      this._updateAxis('x');\r\n      this._updateAxis('y');\r\n      this.slide.pswp.dispatch('calcBounds', { slide: this.slide });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * _calculateItemBoundsForAxis\r\n   *\r\n   * @param {Axis} axis\r\n   */\r\n  _updateAxis(axis) {\r\n    const { pswp } = this.slide;\r\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\r\n    const paddingProp = axis === 'x' ? 'left' : 'top';\r\n    const padding = parsePaddingOption(\r\n      paddingProp,\r\n      pswp.options,\r\n      pswp.viewportSize,\r\n      this.slide.data,\r\n      this.slide.index\r\n    );\r\n\r\n    const panAreaSize = this.slide.panAreaSize[axis];\r\n\r\n    // Default position of element.\r\n    // By defaul it is center of viewport:\r\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\r\n\r\n    // maximum pan position\r\n    this.max[axis] = (elSize > panAreaSize)\r\n      ? Math.round(panAreaSize - elSize) + padding\r\n      : this.center[axis];\r\n\r\n    // minimum pan position\r\n    this.min[axis] = (elSize > panAreaSize)\r\n      ? padding\r\n      : this.center[axis];\r\n  }\r\n\r\n  // _getZeroBounds\r\n  reset() {\r\n    this.center.x = 0;\r\n    this.center.y = 0;\r\n    this.max.x = 0;\r\n    this.max.y = 0;\r\n    this.min.x = 0;\r\n    this.min.y = 0;\r\n  }\r\n\r\n  /**\r\n   * Correct pan position if it's beyond the bounds\r\n   *\r\n   * @param {Axis} axis x or y\r\n   * @param {number} panOffset\r\n   */\r\n  correctPan(axis, panOffset) { // checkPanBounds\r\n    return clamp(panOffset, this.max[axis], this.min[axis]);\r\n  }\r\n}\n\nconst MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe=} pswp PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {{ x?: number; y?: number }} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    this.elementSize = {\r\n      x: maxWidth,\r\n      y: maxHeight\r\n    };\r\n\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = this.panAreaSize.x / this.elementSize.x;\r\n    const vRatio = this.panAreaSize.y / this.elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    // eslint-disable-next-line max-len\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (optionPrefix + 'ZoomLevel');\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    const currZoomLevel = this._parseZoomLevelOption('max');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return Math.max(1, this.fit * 4);\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Renders and allows to control a single slide\r\n */\r\nclass Slide {\r\n  /**\r\n   * @param {SlideData} data\r\n   * @param {number} index\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(data, index, pswp) {\r\n    this.data = data;\r\n    this.index = index;\r\n    this.pswp = pswp;\r\n    this.isActive = (index === pswp.currIndex);\r\n    this.currentResolution = 0;\r\n    /** @type {Point} */\r\n    this.panAreaSize = {};\r\n\r\n    this.isFirstSlide = (this.isActive && !pswp.opener.isOpen);\r\n\r\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\r\n\r\n    this.pswp.dispatch('gettingData', {\r\n      slide: this,\r\n      data: this.data,\r\n      index\r\n    });\r\n\r\n    this.pan = {\r\n      x: 0,\r\n      y: 0\r\n    };\r\n\r\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\r\n    this.container = createElement('pswp__zoom-wrap');\r\n\r\n    this.currZoomLevel = 1;\r\n    /** @type {number} */\r\n    this.width = this.content.width;\r\n    /** @type {number} */\r\n    this.height = this.content.height;\r\n\r\n    this.bounds = new PanBounds(this);\r\n\r\n    this.prevDisplayedWidth = -1;\r\n    this.prevDisplayedHeight = -1;\r\n\r\n    this.pswp.dispatch('slideInit', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * If this slide is active/current/visible\r\n   *\r\n   * @param {boolean} isActive\r\n   */\r\n  setIsActive(isActive) {\r\n    if (isActive && !this.isActive) {\r\n      // slide just became active\r\n      this.activate();\r\n    } else if (!isActive && this.isActive) {\r\n      // slide just became non-active\r\n      this.deactivate();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Appends slide content to DOM\r\n   *\r\n   * @param {HTMLElement} holderElement\r\n   */\r\n  append(holderElement) {\r\n    this.holderElement = holderElement;\r\n\r\n    this.container.style.transformOrigin = '0 0';\r\n\r\n    // Slide appended to DOM\r\n    if (!this.data) {\r\n      return;\r\n    }\r\n\r\n    this.calculateSize();\r\n\r\n    this.load();\r\n    this.updateContentSize();\r\n    this.appendHeavy();\r\n\r\n    this.holderElement.appendChild(this.container);\r\n\r\n    this.zoomAndPanToInitial();\r\n\r\n    this.pswp.dispatch('firstZoomPan', { slide: this });\r\n\r\n    this.applyCurrentZoomPan();\r\n\r\n    this.pswp.dispatch('afterSetContent', { slide: this });\r\n\r\n    if (this.isActive) {\r\n      this.activate();\r\n    }\r\n  }\r\n\r\n  load() {\r\n    this.content.load();\r\n    this.pswp.dispatch('slideLoad', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Append \"heavy\" DOM elements\r\n   *\r\n   * This may depend on a type of slide,\r\n   * but generally these are large images.\r\n   */\r\n  appendHeavy() {\r\n    const { pswp } = this;\r\n    const appendHeavyNearby = true; // todo\r\n\r\n    // Avoid appending heavy elements during animations\r\n    if (this.heavyAppended\r\n        || !pswp.opener.isOpen\r\n        || pswp.mainScroll.isShifted()\r\n        || (!this.isActive && !appendHeavyNearby)) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('appendHeavy', { slide: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.heavyAppended = true;\r\n\r\n    this.content.append();\r\n\r\n    this.pswp.dispatch('appendHeavyContent', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide is active (selected).\r\n   *\r\n   * If it's part of opening/closing transition -\r\n   * activate() will trigger after the transition is ended.\r\n   */\r\n  activate() {\r\n    this.isActive = true;\r\n    this.appendHeavy();\r\n    this.content.activate();\r\n    this.pswp.dispatch('slideActivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Triggered when this slide becomes inactive.\r\n   *\r\n   * Slide can become inactive only after it was active.\r\n   */\r\n  deactivate() {\r\n    this.isActive = false;\r\n    this.content.deactivate();\r\n\r\n    if (this.currZoomLevel !== this.zoomLevels.initial) {\r\n      // allow filtering\r\n      this.calculateSize();\r\n    }\r\n\r\n    // reset zoom level\r\n    this.currentResolution = 0;\r\n    this.zoomAndPanToInitial();\r\n    this.applyCurrentZoomPan();\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('slideDeactivate', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * The slide should destroy itself, it will never be used again.\r\n   * (unbind all events and destroy internal components)\r\n   */\r\n  destroy() {\r\n    this.content.hasSlide = false;\r\n    this.content.remove();\r\n    this.container.remove();\r\n    this.pswp.dispatch('slideDestroy', { slide: this });\r\n  }\r\n\r\n  resize() {\r\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\r\n      // Keep initial zoom level if it was before the resize,\r\n      // as well as when this slide is not active\r\n\r\n      // Reset position and scale to original state\r\n      this.calculateSize();\r\n      this.currentResolution = 0;\r\n      this.zoomAndPanToInitial();\r\n      this.applyCurrentZoomPan();\r\n      this.updateContentSize();\r\n    } else {\r\n      // readjust pan position if it's beyond the bounds\r\n      this.calculateSize();\r\n      this.bounds.update(this.currZoomLevel);\r\n      this.panTo(this.pan.x, this.pan.y);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Apply size to current slide content,\r\n   * based on the current resolution and scale.\r\n   *\r\n   * @param {boolean=} force if size should be updated even if dimensions weren't changed\r\n   */\r\n  updateContentSize(force) {\r\n    // Use initial zoom level\r\n    // if resolution is not defined (user didn't zoom yet)\r\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\r\n\r\n    if (!scaleMultiplier) {\r\n      return;\r\n    }\r\n\r\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\r\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\r\n\r\n    if (!this.sizeChanged(width, height) && !force) {\r\n      return;\r\n    }\r\n    this.content.setDisplayedSize(width, height);\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  sizeChanged(width, height) {\r\n    if (width !== this.prevDisplayedWidth\r\n        || height !== this.prevDisplayedHeight) {\r\n      this.prevDisplayedWidth = width;\r\n      this.prevDisplayedHeight = height;\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  getPlaceholderElement() {\r\n    if (this.content.placeholder) {\r\n      return this.content.placeholder.element;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Zoom current slide image to...\r\n   *\r\n   * @param {number} destZoomLevel Destination zoom level.\r\n   * @param {{ x?: number; y?: number }} centerPoint\r\n   * Transform origin center point, or false if viewport center should be used.\r\n   * @param {number | false} [transitionDuration] Transition duration, may be set to 0.\r\n   * @param {boolean=} ignoreBounds Minimum and maximum zoom levels will be ignored.\r\n   * @return {boolean=} Returns true if animated.\r\n   */\r\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\r\n    const { pswp } = this;\r\n    if (!this.isZoomable()\r\n        || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    pswp.dispatch('beforeZoomTo', {\r\n      destZoomLevel, centerPoint, transitionDuration\r\n    });\r\n\r\n    // stop all pan and zoom transitions\r\n    pswp.animations.stopAllPan();\r\n\r\n    // if (!centerPoint) {\r\n    //   centerPoint = pswp.getViewportCenterPoint();\r\n    // }\r\n\r\n    const prevZoomLevel = this.currZoomLevel;\r\n\r\n    if (!ignoreBounds) {\r\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\r\n    }\r\n\r\n    // if (transitionDuration === undefined) {\r\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\r\n    // }\r\n\r\n    this.setZoomLevel(destZoomLevel);\r\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\r\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\r\n    roundPoint(this.pan);\r\n\r\n    const finishTransition = () => {\r\n      this._setResolution(destZoomLevel);\r\n      this.applyCurrentZoomPan();\r\n    };\r\n\r\n    if (!transitionDuration) {\r\n      finishTransition();\r\n    } else {\r\n      pswp.animations.startTransition({\r\n        isPan: true,\r\n        name: 'zoomTo',\r\n        target: this.container,\r\n        transform: this.getCurrentTransform(),\r\n        onComplete: finishTransition,\r\n        duration: transitionDuration,\r\n        easing: pswp.options.easing\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {{ x?: number, y?: number }} [centerPoint]\r\n   */\r\n  toggleZoom(centerPoint) {\r\n    this.zoomTo(\r\n      this.currZoomLevel === this.zoomLevels.initial\r\n        ? this.zoomLevels.secondary : this.zoomLevels.initial,\r\n      centerPoint,\r\n      this.pswp.options.zoomAnimationDuration\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Updates zoom level property and recalculates new pan bounds,\r\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\r\n   *\r\n   * @param {number} currZoomLevel\r\n   */\r\n  setZoomLevel(currZoomLevel) {\r\n    this.currZoomLevel = currZoomLevel;\r\n    this.bounds.update(this.currZoomLevel);\r\n  }\r\n\r\n  /**\r\n   * Get pan position after zoom at a given `point`.\r\n   *\r\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\r\n   * pan bounds according to the new zoom level.\r\n   *\r\n   * @param {'x' | 'y'} axis\r\n   * @param {{ x?: number; y?: number }} [point]\r\n   * point based on which zoom is performed, usually refers to the current mouse position,\r\n   * if false - viewport center will be used.\r\n   * @param {number=} prevZoomLevel Zoom level before new zoom was applied.\r\n   */\r\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\r\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\r\n    if (totalPanDistance === 0) {\r\n      return this.bounds.center[axis];\r\n    }\r\n\r\n    if (!point) {\r\n      point = this.pswp.getViewportCenterPoint();\r\n    }\r\n\r\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\r\n    return this.bounds.correctPan(\r\n      axis,\r\n      (this.pan[axis] - point[axis]) * zoomFactor + point[axis]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Apply pan and keep it within bounds.\r\n   *\r\n   * @param {number} panX\r\n   * @param {number} panY\r\n   */\r\n  panTo(panX, panY) {\r\n    this.pan.x = this.bounds.correctPan('x', panX);\r\n    this.pan.y = this.bounds.correctPan('y', panY);\r\n    this.applyCurrentZoomPan();\r\n  }\r\n\r\n  /**\r\n   * If the slide in the current state can be panned by the user\r\n   */\r\n  isPannable() {\r\n    return this.width && (this.currZoomLevel > this.zoomLevels.fit);\r\n  }\r\n\r\n  /**\r\n   * If the slide can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.width && this.content.isZoomable();\r\n  }\r\n\r\n  /**\r\n   * Apply transform and scale based on\r\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\r\n   */\r\n  applyCurrentZoomPan() {\r\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\r\n    if (this === this.pswp.currSlide) {\r\n      this.pswp.dispatch('zoomPanUpdate', { slide: this });\r\n    }\r\n  }\r\n\r\n  zoomAndPanToInitial() {\r\n    this.currZoomLevel = this.zoomLevels.initial;\r\n\r\n    // pan according to the zoom level\r\n    this.bounds.update(this.currZoomLevel);\r\n    equalizePoints(this.pan, this.bounds.center);\r\n    this.pswp.dispatch('initialZoomPan', { slide: this });\r\n  }\r\n\r\n  /**\r\n   * Set translate and scale based on current resolution\r\n   *\r\n   * @param {number} x\r\n   * @param {number} y\r\n   * @param {number} zoom\r\n   */\r\n  _applyZoomTransform(x, y, zoom) {\r\n    zoom /= this.currentResolution || this.zoomLevels.initial;\r\n    setTransform(this.container, x, y, zoom);\r\n  }\r\n\r\n  calculateSize() {\r\n    const { pswp } = this;\r\n\r\n    equalizePoints(\r\n      this.panAreaSize,\r\n      getPanAreaSize(pswp.options, pswp.viewportSize, this.data, this.index)\r\n    );\r\n\r\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\r\n\r\n    pswp.dispatch('calcSlideSize', {\r\n      slide: this\r\n    });\r\n  }\r\n\r\n  getCurrentTransform() {\r\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\r\n    return toTransformString(this.pan.x, this.pan.y, scale);\r\n  }\r\n\r\n  /**\r\n   * Set resolution and re-render the image.\r\n   *\r\n   * For example, if the real image size is 2000x1500,\r\n   * and resolution is 0.5 - it will be rendered as 1000x750.\r\n   *\r\n   * Image with zoom level 2 and resolution 0.5 is\r\n   * the same as image with zoom level 1 and resolution 1.\r\n   *\r\n   * Used to optimize animations and make\r\n   * sure that browser renders image in highest quality.\r\n   * Also used by responsive images to load the correct one.\r\n   *\r\n   * @param {number} newResolution\r\n   */\r\n  _setResolution(newResolution) {\r\n    if (newResolution === this.currentResolution) {\r\n      return;\r\n    }\r\n\r\n    this.currentResolution = newResolution;\r\n    this.updateContentSize();\r\n\r\n    this.pswp.dispatch('resolutionChanged');\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst PAN_END_FRICTION = 0.35;\r\nconst VERTICAL_DRAG_FRICTION = 0.6;\r\n\r\n// 1 corresponds to the third of viewport height\r\nconst MIN_RATIO_TO_CLOSE = 0.4;\r\n\r\n// Minimum speed required to navigate\r\n// to next or previous slide\r\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\r\n\r\n/**\r\n * @param {number} initialVelocity\r\n * @param {number} decelerationRate\r\n */\r\nfunction project(initialVelocity, decelerationRate) {\r\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\r\n}\r\n\r\n/**\r\n * Handles single pointer dragging\r\n */\r\nclass DragHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = gestures.pswp;\r\n    /** @type {Point} */\r\n    this.startPan = {};\r\n  }\r\n\r\n  start() {\r\n    equalizePoints(this.startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAll();\r\n  }\r\n\r\n  change() {\r\n    const { p1, prevP1, dragAxis, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n\r\n    if (dragAxis === 'y'\r\n        && pswp.options.closeOnVerticalDrag\r\n        && currSlide.currZoomLevel <= currSlide.zoomLevels.fit\r\n        && !this.gestures.isMultitouch) {\r\n      // Handle vertical drag to close\r\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\r\n      if (!pswp.dispatch('verticalDrag', { panY }).defaultPrevented) {\r\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\r\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\r\n        pswp.applyBgOpacity(bgOpacity);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\r\n      if (!mainScrollChanged) {\r\n        this._panOrMoveMainScroll('y');\r\n\r\n        roundPoint(currSlide.pan);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    }\r\n  }\r\n\r\n  end() {\r\n    const { pswp, velocity } = this.gestures;\r\n    const { mainScroll } = pswp;\r\n    let indexDiff = 0;\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Handle main scroll if it's shifted\r\n    if (mainScroll.isShifted()) {\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\r\n\r\n      // Ratio between 0 and 1:\r\n      // 0 - slide is not visible at all,\r\n      // 0.5 - half of the slide is vicible\r\n      // 1 - slide is fully visible\r\n      const currentSlideVisibilityRatio = (mainScrollShiftDiff / pswp.viewportSize.x);\r\n\r\n      // Go next slide.\r\n      //\r\n      // - if velocity and its direction is matched\r\n      //   and we see at least tiny part of the next slide\r\n      //\r\n      // - or if we see less than 50% of the current slide\r\n      //   and velocity is close to 0\r\n      //\r\n      if ((velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0)\r\n          || (velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5)) {\r\n        // Go to next slide\r\n        indexDiff = 1;\r\n        velocity.x = Math.min(velocity.x, 0);\r\n      } else if ((velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0)\r\n          || (velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5)) {\r\n        // Go to prev slide\r\n        indexDiff = -1;\r\n        velocity.x = Math.max(velocity.x, 0);\r\n      }\r\n\r\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\r\n    }\r\n\r\n    // Restore zoom level\r\n    if (pswp.currSlide.currZoomLevel > pswp.currSlide.zoomLevels.max\r\n        || this.gestures.isMultitouch) {\r\n      this.gestures.zoomLevels.correctZoomPan(true);\r\n    } else {\r\n      // we run two animations instead of one,\r\n      // as each axis has own pan boundaries and thus different spring function\r\n      // (correctZoomPan does not have this functionality,\r\n      //  it animates all properties with single timing function)\r\n      this._finishPanGestureForAxis('x');\r\n      this._finishPanGestureForAxis('y');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _finishPanGestureForAxis(axis) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    const { velocity } = this.gestures;\r\n    const { pan, bounds } = currSlide;\r\n    const panPos = pan[axis];\r\n    const restoreBgOpacity = (pswp.bgOpacity < 1 && axis === 'y');\r\n\r\n    // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\r\n    // Inceasing this number will reduce travel distance\r\n    const decelerationRate = 0.995; // 0.99\r\n\r\n    // Pan position if there is no bounds\r\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\r\n\r\n    if (restoreBgOpacity) {\r\n      const vDragRatio = this._getVerticalDragRatio(panPos);\r\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\r\n\r\n      // If we are above and moving upwards,\r\n      // or if we are below and moving downwards\r\n      if ((vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE)\r\n          || (vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE)) {\r\n        pswp.close();\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Pan position with corrected bounds\r\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\r\n\r\n    // Exit if pan position should not be changed\r\n    // or if speed it too low\r\n    if (panPos === correctedPanPosition) {\r\n      return;\r\n    }\r\n\r\n    // Overshoot if the final position is out of pan bounds\r\n    const dampingRatio = (correctedPanPosition === projectedPosition) ? 1 : 0.82;\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const totalPanDist = correctedPanPosition - panPos;\r\n\r\n    pswp.animations.startSpring({\r\n      name: 'panGesture' + axis,\r\n      isPan: true,\r\n      start: panPos,\r\n      end: correctedPanPosition,\r\n      velocity: velocity[axis],\r\n      dampingRatio,\r\n      onUpdate: (pos) => {\r\n        // Animate opacity of background relative to Y pan position of an image\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // 0 - start of animation, 1 - end of animation\r\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\r\n\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio,\r\n            0,\r\n            1\r\n          ));\r\n        }\r\n\r\n        pan[axis] = Math.floor(pos);\r\n        currSlide.applyCurrentZoomPan();\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update position of the main scroll,\r\n   * or/and update pan position of the current slide.\r\n   *\r\n   * Should return true if it changes (or can change) main scroll.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   */\r\n  _panOrMoveMainScroll(axis) {\r\n    const { p1, pswp, dragAxis, prevP1, isMultitouch } = this.gestures;\r\n    const { currSlide, mainScroll } = pswp;\r\n    const delta = (p1[axis] - prevP1[axis]);\r\n    const newMainScrollX = mainScroll.x + delta;\r\n\r\n    if (!delta) {\r\n      return;\r\n    }\r\n\r\n    // Always move main scroll if image can not be panned\r\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\r\n      mainScroll.moveTo(newMainScrollX, true);\r\n      return true; // changed main scroll\r\n    }\r\n\r\n    const { bounds } = currSlide;\r\n    const newPan = currSlide.pan[axis] + delta;\r\n\r\n    if (pswp.options.allowPanToNext\r\n        && dragAxis === 'x'\r\n        && axis === 'x'\r\n        && !isMultitouch) {\r\n      const currSlideMainScrollX = mainScroll.getCurrSlideX();\r\n\r\n      // Position of the main scroll relative to the viewport\r\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\r\n\r\n      const isLeftToRight = delta > 0;\r\n      const isRightToLeft = !isLeftToRight;\r\n\r\n      if (newPan > bounds.min[axis] && isLeftToRight) {\r\n        // Panning from left to right, beyond the left edge\r\n\r\n        // Wether the image was at minimum pan position (or less)\r\n        // when this drag gesture started.\r\n        // Minimum pan position refers to the left edge of the image.\r\n        const wasAtMinPanPosition = (bounds.min[axis] <= this.startPan[axis]);\r\n\r\n        if (wasAtMinPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\r\n        // Paning from right to left, beyond the right edge\r\n\r\n        // Maximum pan position refers to the right edge of the image.\r\n        const wasAtMaxPanPosition = (this.startPan[axis] <= bounds.max[axis]);\r\n\r\n        if (wasAtMaxPanPosition) {\r\n          mainScroll.moveTo(newMainScrollX, true);\r\n          return true;\r\n        } else {\r\n          this._setPanWithFriction(axis, newPan);\r\n          //currSlide.pan[axis] = newPan;\r\n        }\r\n      } else {\r\n        // If main scroll is shifted\r\n        if (mainScrollShiftDiff !== 0) {\r\n          // If main scroll is shifted right\r\n          if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/) {\r\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/) {\r\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\r\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\r\n            return true;\r\n          }\r\n        } else {\r\n          // We are within pan bounds, so just pan\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      }\r\n    } else {\r\n      if (axis === 'y') {\r\n        // Do not pan vertically if main scroll is shifted o\r\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\r\n          this._setPanWithFriction(axis, newPan);\r\n        }\r\n      } else {\r\n        this._setPanWithFriction(axis, newPan);\r\n      }\r\n    }\r\n  }\r\n  //\r\n  // If we move above - the ratio is negative\r\n  // If we move below the ratio is positive\r\n\r\n  /**\r\n   * Relation between pan Y position and third of viewport height.\r\n   *\r\n   * When we are at initial position (center bounds) - the ratio is 0,\r\n   * if position is shifted upwards - the ratio is negative,\r\n   * if position is shifted downwards - the ratio is positive.\r\n   *\r\n   * @private\r\n   * @param {number} panY The current pan Y position.\r\n   */\r\n  _getVerticalDragRatio(panY) {\r\n    return (panY - this.pswp.currSlide.bounds.center.y)\r\n            / (this.pswp.viewportSize.y / 3);\r\n  }\r\n\r\n  /**\r\n   * Set pan position of the current slide.\r\n   * Apply friction if the position is beyond the pan bounds,\r\n   * or if custom friction is defined.\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} potentialPan\r\n   * @param {number=} customFriction (0.1 - 1)\r\n   */\r\n  _setPanWithFriction(axis, potentialPan, customFriction) {\r\n    const { pan, bounds } = this.pswp.currSlide;\r\n    const correctedPan = bounds.correctPan(axis, potentialPan);\r\n    // If we are out of pan bounds\r\n    if (correctedPan !== potentialPan || customFriction) {\r\n      const delta = Math.round(potentialPan - pan[axis]);\r\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\r\n    } else {\r\n      pan[axis] = potentialPan;\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\nconst UPPER_ZOOM_FRICTION = 0.05;\r\nconst LOWER_ZOOM_FRICTION = 0.15;\r\n\r\n\r\n/**\r\n * Get center point between two points\r\n *\r\n * @param {Point} p\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n */\r\nfunction getZoomPointsCenter(p, p1, p2) {\r\n  p.x = (p1.x + p2.x) / 2;\r\n  p.y = (p1.y + p2.y) / 2;\r\n  return p;\r\n}\r\n\r\nclass ZoomHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n    this.pswp = this.gestures.pswp;\r\n    /** @type {Point} */\r\n    this._startPan = {};\r\n\r\n    /** @type {Point} */\r\n    this._startZoomPoint = {};\r\n    /** @type {Point} */\r\n    this._zoomPoint = {};\r\n  }\r\n\r\n  start() {\r\n    this._startZoomLevel = this.pswp.currSlide.currZoomLevel;\r\n    equalizePoints(this._startPan, this.pswp.currSlide.pan);\r\n    this.pswp.animations.stopAllPan();\r\n    this._wasOverFitZoomLevel = false;\r\n  }\r\n\r\n  change() {\r\n    const { p1, startP1, p2, startP2, pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const minZoomLevel = currSlide.zoomLevels.min;\r\n    const maxZoomLevel = currSlide.zoomLevels.max;\r\n\r\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\r\n      return;\r\n    }\r\n\r\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\r\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\r\n\r\n    let currZoomLevel = (1 / getDistanceBetween(startP1, startP2))\r\n                      * getDistanceBetween(p1, p2)\r\n                      * this._startZoomLevel;\r\n\r\n    // slightly over the zoom.fit\r\n    if (currZoomLevel > currSlide.zoomLevels.initial + (currSlide.zoomLevels.initial / 15)) {\r\n      this._wasOverFitZoomLevel = true;\r\n    }\r\n\r\n    if (currZoomLevel < minZoomLevel) {\r\n      if (pswp.options.pinchToClose\r\n          && !this._wasOverFitZoomLevel\r\n          && this._startZoomLevel <= currSlide.zoomLevels.initial) {\r\n        // fade out background if zooming out\r\n        const bgOpacity = 1 - ((minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2));\r\n        if (!pswp.dispatch('pinchClose', { bgOpacity }).defaultPrevented) {\r\n          pswp.applyBgOpacity(bgOpacity);\r\n        }\r\n      } else {\r\n        // Apply the friction if zoom level is below the min\r\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\r\n      }\r\n    } else if (currZoomLevel > maxZoomLevel) {\r\n      // Apply the friction if zoom level is above the max\r\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\r\n    }\r\n\r\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\r\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\r\n\r\n    currSlide.setZoomLevel(currZoomLevel);\r\n    currSlide.applyCurrentZoomPan();\r\n  }\r\n\r\n  end() {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n    if (currSlide.currZoomLevel < currSlide.zoomLevels.initial\r\n        && !this._wasOverFitZoomLevel\r\n        && pswp.options.pinchToClose) {\r\n      pswp.close();\r\n    } else {\r\n      this.correctZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} currZoomLevel\r\n   */\r\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\r\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\r\n    return this._zoomPoint[axis]\r\n            - ((this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Correct currZoomLevel and pan if they are\r\n   * beyond minimum or maximum values.\r\n   * With animation.\r\n   *\r\n   * @param {boolean=} ignoreGesture\r\n   * Wether gesture coordinates should be ignored when calculating destination pan position.\r\n   */\r\n  correctZoomPan(ignoreGesture) {\r\n    const { pswp } = this;\r\n    const { currSlide } = pswp;\r\n\r\n    if (!currSlide.isZoomable()) {\r\n      return;\r\n    }\r\n\r\n    if (this._zoomPoint.x === undefined) {\r\n      ignoreGesture = true;\r\n    }\r\n\r\n    const prevZoomLevel = currSlide.currZoomLevel;\r\n\r\n    /** @type {number} */\r\n    let destinationZoomLevel;\r\n    let currZoomLevelNeedsChange = true;\r\n\r\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\r\n      destinationZoomLevel = currSlide.zoomLevels.initial;\r\n      // zoom to min\r\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\r\n      destinationZoomLevel = currSlide.zoomLevels.max;\r\n      // zoom to max\r\n    } else {\r\n      currZoomLevelNeedsChange = false;\r\n      destinationZoomLevel = prevZoomLevel;\r\n    }\r\n\r\n    const initialBgOpacity = pswp.bgOpacity;\r\n    const restoreBgOpacity = pswp.bgOpacity < 1;\r\n\r\n    const initialPan = equalizePoints({}, currSlide.pan);\r\n    let destinationPan = equalizePoints({}, initialPan);\r\n\r\n    if (ignoreGesture) {\r\n      this._zoomPoint.x = 0;\r\n      this._zoomPoint.y = 0;\r\n      this._startZoomPoint.x = 0;\r\n      this._startZoomPoint.y = 0;\r\n      this._startZoomLevel = prevZoomLevel;\r\n      equalizePoints(this._startPan, initialPan);\r\n    }\r\n\r\n    if (currZoomLevelNeedsChange) {\r\n      destinationPan = {\r\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\r\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\r\n      };\r\n    }\r\n\r\n    // set zoom level, so pan bounds are updated according to it\r\n    currSlide.setZoomLevel(destinationZoomLevel);\r\n\r\n    destinationPan = {\r\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\r\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\r\n    };\r\n\r\n    // return zoom level and its bounds to initial\r\n    currSlide.setZoomLevel(prevZoomLevel);\r\n\r\n    let panNeedsChange = true;\r\n    if (pointsEqual(destinationPan, initialPan)) {\r\n      panNeedsChange = false;\r\n    }\r\n\r\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\r\n      // update resolution after gesture\r\n      currSlide._setResolution(destinationZoomLevel);\r\n      currSlide.applyCurrentZoomPan();\r\n\r\n      // nothing to animate\r\n      return;\r\n    }\r\n\r\n    pswp.animations.stopAllPan();\r\n\r\n    pswp.animations.startSpring({\r\n      isPan: true,\r\n      start: 0,\r\n      end: 1000,\r\n      velocity: 0,\r\n      dampingRatio: 1,\r\n      naturalFrequency: 40,\r\n      onUpdate: (now) => {\r\n        now /= 1000; // 0 - start, 1 - end\r\n\r\n        if (panNeedsChange || currZoomLevelNeedsChange) {\r\n          if (panNeedsChange) {\r\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\r\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\r\n          }\r\n\r\n          if (currZoomLevelNeedsChange) {\r\n            const newZoomLevel = prevZoomLevel\r\n                        + (destinationZoomLevel - prevZoomLevel) * now;\r\n            currSlide.setZoomLevel(newZoomLevel);\r\n          }\r\n\r\n          currSlide.applyCurrentZoomPan();\r\n        }\r\n\r\n        // Restore background opacity\r\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\r\n          // We clamp opacity to keep it between 0 and 1.\r\n          // As progress ratio can be larger than 1 due to overshoot,\r\n          // and we do not want to bounce opacity.\r\n          pswp.applyBgOpacity(clamp(\r\n            initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1\r\n          ));\r\n        }\r\n      },\r\n      onComplete: () => {\r\n        // update resolution after transition ends\r\n        currSlide._setResolution(destinationZoomLevel);\r\n        currSlide.applyCurrentZoomPan();\r\n      }\r\n    });\r\n  }\r\n}\n\n/**\r\n * @template T\r\n * @template P\r\n * @typedef {import('../types.js').AddPostfix<T, P>} AddPostfix<T, P>\r\n */\r\n\r\n/** @typedef {import('./gestures.js').default} Gestures */\r\n\r\n/** @typedef {'imageClick' | 'bgClick' | 'tap' | 'doubleTap'} Actions */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * Whether the tap was performed on the main slide\r\n * (rather than controls or caption).\r\n *\r\n * @param {PointerEvent} event\r\n */\r\nfunction didTapOnMainContent(event) {\r\n  return !!(/** @type {HTMLElement} */ (event.target).closest('.pswp__container'));\r\n}\r\n\r\n/**\r\n * Tap, double-tap handler.\r\n */\r\nclass TapHandler {\r\n  /**\r\n   * @param {Gestures} gestures\r\n   */\r\n  constructor(gestures) {\r\n    this.gestures = gestures;\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  click(point, originalEvent) {\r\n    const targetClassList = /** @type {HTMLElement} */ (originalEvent.target).classList;\r\n    const isImageClick = targetClassList.contains('pswp__img');\r\n    const isBackgroundClick = targetClassList.contains('pswp__item')\r\n                              || targetClassList.contains('pswp__zoom-wrap');\r\n\r\n    if (isImageClick) {\r\n      this._doClickOrTapAction('imageClick', point, originalEvent);\r\n    } else if (isBackgroundClick) {\r\n      this._doClickOrTapAction('bgClick', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  tap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('tap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  doubleTap(point, originalEvent) {\r\n    if (didTapOnMainContent(originalEvent)) {\r\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Actions} actionName\r\n   * @param {Point} point\r\n   * @param {PointerEvent} originalEvent\r\n   */\r\n  _doClickOrTapAction(actionName, point, originalEvent) {\r\n    const { pswp } = this.gestures;\r\n    const { currSlide } = pswp;\r\n    const actionFullName = /** @type {AddPostfix<Actions, 'Action'>} */ (actionName + 'Action');\r\n    const optionValue = pswp.options[actionFullName];\r\n\r\n    if (pswp.dispatch(actionFullName, { point, originalEvent }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      optionValue.call(pswp, point, originalEvent);\r\n      return;\r\n    }\r\n\r\n    switch (optionValue) {\r\n      case 'close':\r\n      case 'next':\r\n        pswp[optionValue]();\r\n        break;\r\n      case 'zoom':\r\n        currSlide.toggleZoom(point);\r\n        break;\r\n      case 'zoom-or-close':\r\n        // by default click zooms current image,\r\n        // if it can not be zoomed - gallery will be closed\r\n        if (currSlide.isZoomable()\r\n            && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\r\n          currSlide.toggleZoom(point);\r\n        } else if (pswp.options.clickToCloseNonZoomable) {\r\n          pswp.close();\r\n        }\r\n        break;\r\n      case 'toggle-controls':\r\n        this.gestures.pswp.element.classList.toggle('pswp--ui-visible');\r\n        // if (_controlsVisible) {\r\n        //   _ui.hideControls();\r\n        // } else {\r\n        //   _ui.showControls();\r\n        // }\r\n        break;\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n// How far should user should drag\r\n// until we can determine that the gesture is swipe and its direction\r\nconst AXIS_SWIPE_HYSTERISIS = 10;\r\n//const PAN_END_FRICTION = 0.35;\r\n\r\nconst DOUBLE_TAP_DELAY = 300; // ms\r\nconst MIN_TAP_DISTANCE = 25; // px\r\n\r\n/**\r\n * Gestures class bind touch, pointer or mouse events\r\n * and emits drag to drag-handler and zoom events zoom-handler.\r\n *\r\n * Drag and zoom events are emited in requestAnimationFrame,\r\n * and only when one of pointers was actually changed.\r\n */\r\nclass Gestures {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {'x' | 'y'} */\r\n    this.dragAxis = undefined;\r\n\r\n    // point objects are defined once and reused\r\n    // PhotoSwipe keeps track only of two pointers, others are ignored\r\n    /** @type {Point} */\r\n    this.p1 = {}; // the first pressed pointer\r\n    /** @type {Point} */\r\n    this.p2 = {}; // the second pressed pointer\r\n    /** @type {Point} */\r\n    this.prevP1 = {};\r\n    /** @type {Point} */\r\n    this.prevP2 = {};\r\n    /** @type {Point} */\r\n    this.startP1 = {};\r\n    /** @type {Point} */\r\n    this.startP2 = {};\r\n    /** @type {Point} */\r\n    this.velocity = {};\r\n\r\n    /** @type {Point} */\r\n    this._lastStartP1 = {};\r\n    /** @type {Point} */\r\n    this._intervalP1 = {};\r\n    this._numActivePoints = 0;\r\n    /** @type {Point[]} */\r\n    this._ongoingPointers = [];\r\n\r\n    this._touchEventEnabled = 'ontouchstart' in window;\r\n    this._pointerEventEnabled = !!(window.PointerEvent);\r\n    this.supportsTouch = this._touchEventEnabled\r\n                          || (this._pointerEventEnabled && navigator.maxTouchPoints > 1);\r\n\r\n    if (!this.supportsTouch) {\r\n      // disable pan to next slide for non-touch devices\r\n      pswp.options.allowPanToNext = false;\r\n    }\r\n\r\n    this.drag = new DragHandler(this);\r\n    this.zoomLevels = new ZoomHandler(this);\r\n    this.tapHandler = new TapHandler(this);\r\n\r\n    pswp.on('bindEvents', () => {\r\n      pswp.events.add(pswp.scrollWrap, 'click', e => this._onClick(e));\r\n\r\n      if (this._pointerEventEnabled) {\r\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\r\n      } else if (this._touchEventEnabled) {\r\n        this._bindEvents('touch', 'start', 'end', 'cancel');\r\n\r\n        // In previous versions we also bound mouse event here,\r\n        // in case device supports both touch and mouse events,\r\n        // but newer versions of browsers now support PointerEvent.\r\n\r\n        // on iOS10 if you bind touchmove/end after touchstart,\r\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\r\n        // preventDefault will have no effect on touchmove and touchend.\r\n        // Unless you bind it previously.\r\n        pswp.scrollWrap.ontouchmove = () => {}; // eslint-disable-line\r\n        pswp.scrollWrap.ontouchend = () => {}; // eslint-disable-line\r\n      } else {\r\n        this._bindEvents('mouse', 'down', 'up');\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {'mouse' | 'touch' | 'pointer'} pref\r\n   * @param {'down' | 'start'} down\r\n   * @param {'up' | 'end'} up\r\n   * @param {'cancel'} [cancel]\r\n   */\r\n  _bindEvents(pref, down, up, cancel) {\r\n    const { pswp } = this;\r\n    const { events } = pswp;\r\n\r\n    const cancelEvent = cancel ? pref + cancel : '';\r\n\r\n    events.add(pswp.scrollWrap, pref + down, this.onPointerDown.bind(this));\r\n    events.add(window, pref + 'move', this.onPointerMove.bind(this));\r\n    events.add(window, pref + up, this.onPointerUp.bind(this));\r\n    if (cancelEvent) {\r\n      events.add(pswp.scrollWrap, cancelEvent, this.onPointerUp.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerDown(e) {\r\n    // We do not call preventDefault for touch events\r\n    // to allow browser to show native dialog on longpress\r\n    // (the one that allows to save image or open it in new tab).\r\n    //\r\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\r\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\r\n    let isMousePointer;\r\n    if (e.type === 'mousedown' || e.pointerType === 'mouse') {\r\n      isMousePointer = true;\r\n    }\r\n\r\n    // Allow dragging only via left mouse button.\r\n    // http://www.quirksmode.org/js/events_properties.html\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\r\n    if (isMousePointer && e.button > 0) {\r\n      return;\r\n    }\r\n\r\n    const { pswp } = this;\r\n\r\n    // if PhotoSwipe is opening or closing\r\n    if (!pswp.opener.isOpen) {\r\n      e.preventDefault();\r\n      return;\r\n    }\r\n\r\n    if (pswp.dispatch('pointerDown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (isMousePointer) {\r\n      pswp.mouseDetected();\r\n\r\n      // preventDefault mouse event to prevent\r\n      // browser image drag feature\r\n      this._preventPointerEventBehaviour(e);\r\n    }\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    this._updatePoints(e, 'down');\r\n\r\n    this.pointerDown = true;\r\n\r\n    if (this._numActivePoints === 1) {\r\n      this.dragAxis = null;\r\n      // we need to store initial point to determine the main axis,\r\n      // drag is activated only after the axis is determined\r\n      equalizePoints(this.startP1, this.p1);\r\n    }\r\n\r\n    if (this._numActivePoints > 1) {\r\n      // Tap or double tap should not trigger if more than one pointer\r\n      this._clearTapTimer();\r\n      this.isMultitouch = true;\r\n    } else {\r\n      this.isMultitouch = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerMove(e) {\r\n    e.preventDefault(); // always preventDefault move event\r\n\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'move');\r\n\r\n    if (this.pswp.dispatch('pointerMove', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 1 && !this.isDragging) {\r\n      if (!this.dragAxis) {\r\n        this._calculateDragDirection();\r\n      }\r\n\r\n      // Drag axis was detected, emit drag.start\r\n      if (this.dragAxis && !this.isDragging) {\r\n        if (this.isZooming) {\r\n          this.isZooming = false;\r\n          this.zoomLevels.end();\r\n        }\r\n\r\n        this.isDragging = true;\r\n        this._clearTapTimer(); // Tap can not trigger after drag\r\n\r\n        // Adjust starting point\r\n        this._updateStartPoints();\r\n        this._intervalTime = Date.now();\r\n        //this._startTime = this._intervalTime;\r\n        this._velocityCalculated = false;\r\n        equalizePoints(this._intervalP1, this.p1);\r\n        this.velocity.x = 0;\r\n        this.velocity.y = 0;\r\n        this.drag.start();\r\n\r\n        this._rafStopLoop();\r\n        this._rafRenderLoop();\r\n      }\r\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\r\n      this._finishDrag();\r\n\r\n      this.isZooming = true;\r\n\r\n      // Adjust starting points\r\n      this._updateStartPoints();\r\n\r\n      this.zoomLevels.start();\r\n\r\n      this._rafStopLoop();\r\n      this._rafRenderLoop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finishDrag() {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n\r\n      // Try to calculate velocity,\r\n      // if it wasn't calculated yet in drag.change\r\n      if (!this._velocityCalculated) {\r\n        this._updateVelocity(true);\r\n      }\r\n\r\n      this.drag.end();\r\n      this.dragAxis = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {PointerEvent} e\r\n   */\r\n  onPointerUp(e) {\r\n    if (!this._numActivePoints) {\r\n      return;\r\n    }\r\n\r\n    this._updatePoints(e, 'up');\r\n\r\n    if (this.pswp.dispatch('pointerUp', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this._numActivePoints === 0) {\r\n      this.pointerDown = false;\r\n      this._rafStopLoop();\r\n\r\n      if (this.isDragging) {\r\n        this._finishDrag();\r\n      } else if (!this.isZooming && !this.isMultitouch) {\r\n        //this.zoomLevels.correctZoomPan();\r\n        this._finishTap(e);\r\n      }\r\n    }\r\n\r\n    if (this._numActivePoints < 2 && this.isZooming) {\r\n      this.isZooming = false;\r\n      this.zoomLevels.end();\r\n\r\n      if (this._numActivePoints === 1) {\r\n        // Since we have 1 point left, we need to reinitiate drag\r\n        this.dragAxis = null;\r\n        this._updateStartPoints();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafRenderLoop() {\r\n    if (this.isDragging || this.isZooming) {\r\n      this._updateVelocity();\r\n\r\n      if (this.isDragging) {\r\n        // make sure that pointer moved since the last update\r\n        if (!pointsEqual(this.p1, this.prevP1)) {\r\n          this.drag.change();\r\n        }\r\n      } else /* if (this.isZooming) */ {\r\n        if (!pointsEqual(this.p1, this.prevP1)\r\n            || !pointsEqual(this.p2, this.prevP2)) {\r\n          this.zoomLevels.change();\r\n        }\r\n      }\r\n\r\n      this._updatePrevPoints();\r\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update velocity at 50ms interval\r\n   *\r\n   * @param {boolean=} force\r\n   */\r\n  _updateVelocity(force) {\r\n    const time = Date.now();\r\n    const duration = time - this._intervalTime;\r\n\r\n    if (duration < 50 && !force) {\r\n      return;\r\n    }\r\n\r\n\r\n    this.velocity.x = this._getVelocity('x', duration);\r\n    this.velocity.y = this._getVelocity('y', duration);\r\n\r\n    this._intervalTime = time;\r\n    equalizePoints(this._intervalP1, this.p1);\r\n    this._velocityCalculated = true;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _finishTap(e) {\r\n    const { mainScroll } = this.pswp;\r\n\r\n    // Do not trigger tap events if main scroll is shifted\r\n    if (mainScroll.isShifted()) {\r\n      // restore main scroll position\r\n      // (usually happens if stopped in the middle of animation)\r\n      mainScroll.moveIndexBy(0, true);\r\n      return;\r\n    }\r\n\r\n    // Do not trigger tap for touchcancel or pointercancel\r\n    if (e.type.indexOf('cancel') > 0) {\r\n      return;\r\n    }\r\n\r\n    // Trigger click instead of tap for mouse events\r\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\r\n      this.tapHandler.click(this.startP1, e);\r\n      return;\r\n    }\r\n\r\n    // Disable delay if there is no doubleTapAction\r\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;\r\n\r\n    // If tapTimer is defined - we tapped recently,\r\n    // check if the current tap is close to the previous one,\r\n    // if yes - trigger double tap\r\n    if (this._tapTimer) {\r\n      this._clearTapTimer();\r\n      // Check if two taps were more or less on the same place\r\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\r\n        this.tapHandler.doubleTap(this.startP1, e);\r\n      }\r\n    } else {\r\n      equalizePoints(this._lastStartP1, this.startP1);\r\n      this._tapTimer = setTimeout(() => {\r\n        this.tapHandler.tap(this.startP1, e);\r\n        this._clearTapTimer();\r\n      }, tapDelay);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _clearTapTimer() {\r\n    if (this._tapTimer) {\r\n      clearTimeout(this._tapTimer);\r\n      this._tapTimer = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get velocity for axis\r\n   *\r\n   * @private\r\n   * @param {'x' | 'y'} axis\r\n   * @param {number} duration\r\n   */\r\n  _getVelocity(axis, duration) {\r\n    // displacement is like distance, but can be negative.\r\n    const displacement = this.p1[axis] - this._intervalP1[axis];\r\n\r\n    if (Math.abs(displacement) > 1 && duration > 5) {\r\n      return displacement / duration;\r\n    }\r\n\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _rafStopLoop() {\r\n    if (this.raf) {\r\n      cancelAnimationFrame(this.raf);\r\n      this.raf = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _preventPointerEventBehaviour(e) {\r\n    // TODO find a way to disable e.preventDefault on some elements\r\n    //      via event or some class or something\r\n    e.preventDefault();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Parses and normalizes points from the touch, mouse or pointer event.\r\n   * Updates p1 and p2.\r\n   *\r\n   * @private\r\n   * @param {PointerEvent | TouchEvent} e\r\n   * @param {'up' | 'down' | 'move'} pointerType Normalized pointer type\r\n   */\r\n  _updatePoints(e, pointerType) {\r\n    if (this._pointerEventEnabled) {\r\n      const pointerEvent = /** @type {PointerEvent} */ (e);\r\n      // Try to find the current pointer in ongoing pointers by its ID\r\n      const pointerIndex = this._ongoingPointers.findIndex((ongoingPoiner) => {\r\n        return ongoingPoiner.id === pointerEvent.pointerId;\r\n      });\r\n\r\n      if (pointerType === 'up' && pointerIndex > -1) {\r\n        // release the pointer - remove it from ongoing\r\n        this._ongoingPointers.splice(pointerIndex, 1);\r\n      } else if (pointerType === 'down' && pointerIndex === -1) {\r\n        // add new pointer\r\n        this._ongoingPointers.push(this._convertEventPosToPoint(pointerEvent, {}));\r\n      } else if (pointerIndex > -1) {\r\n        // update existing pointer\r\n        this._convertEventPosToPoint(pointerEvent, this._ongoingPointers[pointerIndex]);\r\n      }\r\n\r\n      this._numActivePoints = this._ongoingPointers.length;\r\n\r\n      // update points that PhotoSwipe uses\r\n      // to calculate position and scale\r\n      if (this._numActivePoints > 0) {\r\n        equalizePoints(this.p1, this._ongoingPointers[0]);\r\n      }\r\n\r\n      if (this._numActivePoints > 1) {\r\n        equalizePoints(this.p2, this._ongoingPointers[1]);\r\n      }\r\n    } else {\r\n      const touchEvent = /** @type {TouchEvent} */ (e);\r\n\r\n      this._numActivePoints = 0;\r\n      if (touchEvent.type.indexOf('touch') > -1) {\r\n        // Touch Event\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\r\n        if (touchEvent.touches && touchEvent.touches.length > 0) {\r\n          this._convertEventPosToPoint(touchEvent.touches[0], this.p1);\r\n          this._numActivePoints++;\r\n          if (touchEvent.touches.length > 1) {\r\n            this._convertEventPosToPoint(touchEvent.touches[1], this.p2);\r\n            this._numActivePoints++;\r\n          }\r\n        }\r\n      } else {\r\n        // Mouse Event\r\n        this._convertEventPosToPoint(/** @type {PointerEvent} */ (e), this.p1);\r\n        if (pointerType === 'up') {\r\n          // clear all points on mouseup\r\n          this._numActivePoints = 0;\r\n        } else {\r\n          this._numActivePoints++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // update points that were used during previous rAF tick\r\n  _updatePrevPoints() {\r\n    equalizePoints(this.prevP1, this.p1);\r\n    equalizePoints(this.prevP2, this.p2);\r\n  }\r\n\r\n  // update points at the start of gesture\r\n  _updateStartPoints() {\r\n    equalizePoints(this.startP1, this.p1);\r\n    equalizePoints(this.startP2, this.p2);\r\n    this._updatePrevPoints();\r\n  }\r\n\r\n  _calculateDragDirection() {\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      // if main scroll position is shifted – direction is always horizontal\r\n      this.dragAxis = 'x';\r\n    } else {\r\n      // calculate delta of the last touchmove tick\r\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\r\n\r\n      if (diff !== 0) {\r\n        // check if pointer was shifted horizontally or vertically\r\n        const axisToCheck = diff > 0 ? 'x' : 'y';\r\n\r\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\r\n          this.dragAxis = axisToCheck;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts touch, pointer or mouse event\r\n   * to PhotoSwipe point.\r\n   *\r\n   * @private\r\n   * @param {Touch | PointerEvent} e\r\n   * @param {Point} p\r\n   */\r\n  _convertEventPosToPoint(e, p) {\r\n    p.x = e.pageX - this.pswp.offset.x;\r\n    p.y = e.pageY - this.pswp.offset.y;\r\n\r\n    if ('pointerId' in e) {\r\n      p.id = e.pointerId;\r\n    } else if (e.identifier !== undefined) {\r\n      p.id = e.identifier;\r\n    }\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {PointerEvent} e\r\n   */\r\n  _onClick(e) {\r\n    // Do not allow click event to pass through after drag\r\n    if (this.pswp.mainScroll.isShifted()) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/slide.js').default} Slide */\r\n\r\n/** @typedef {{ el: HTMLDivElement; slide?: Slide }} ItemHolder */\r\n\r\nconst MAIN_SCROLL_END_FRICTION = 0.35;\r\n\r\n\r\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\r\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\r\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\r\n\r\n/**\r\n * Handles movement of the main scrolling container\r\n * (for example, it repositions when user swipes left or right).\r\n *\r\n * Also stores its state.\r\n */\r\nclass MainScroll {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.x = 0;\r\n\r\n    /** @type {number} */\r\n    this.slideWidth = undefined;\r\n\r\n    /** @type {ItemHolder[]} */\r\n    this.itemHolders = undefined;\r\n\r\n    this.resetPosition();\r\n  }\r\n\r\n  /**\r\n   * Position the scroller and slide containers\r\n   * according to viewport size.\r\n   *\r\n   * @param {boolean=} resizeSlides Whether slides content should resized\r\n   */\r\n  resize(resizeSlides) {\r\n    const { pswp } = this;\r\n    const newSlideWidth = Math.round(\r\n      pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing\r\n    );\r\n    // Mobile browsers might trigger a resize event during a gesture.\r\n    // (due to toolbar appearing or hiding).\r\n    // Avoid re-adjusting main scroll position if width wasn't changed\r\n    const slideWidthChanged = (newSlideWidth !== this.slideWidth);\r\n\r\n    if (slideWidthChanged) {\r\n      this.slideWidth = newSlideWidth;\r\n      this.moveTo(this.getCurrSlideX());\r\n    }\r\n\r\n    this.itemHolders.forEach((itemHolder, index) => {\r\n      if (slideWidthChanged) {\r\n        setTransform(itemHolder.el, (index + this._containerShiftIndex)\r\n                                    * this.slideWidth);\r\n      }\r\n\r\n      if (resizeSlides && itemHolder.slide) {\r\n        itemHolder.slide.resize();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reset X position of the main scroller to zero\r\n   */\r\n  resetPosition() {\r\n    // Position on the main scroller (offset)\r\n    // it is independent from slide index\r\n    this._currPositionIndex = 0;\r\n    this._prevPositionIndex = 0;\r\n\r\n    // This will force recalculation of size on next resize()\r\n    this.slideWidth = 0;\r\n\r\n    // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\r\n    this._containerShiftIndex = -1;\r\n  }\r\n\r\n  /**\r\n   * Create and append array of three items\r\n   * that hold data about slides in DOM\r\n   */\r\n  appendHolders() {\r\n    this.itemHolders = [];\r\n\r\n    // append our three slide holders -\r\n    // previous, current, and next\r\n    for (let i = 0; i < 3; i++) {\r\n      const el = createElement('pswp__item', false, this.pswp.container);\r\n      el.setAttribute('role', 'group');\r\n      el.setAttribute('aria-roledescription', 'slide');\r\n      el.setAttribute('aria-hidden', 'true');\r\n\r\n      // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\r\n      el.style.display = (i === 1) ? 'block' : 'none';\r\n\r\n      this.itemHolders.push({\r\n        el,\r\n        //index: -1\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\r\n   */\r\n  canBeSwiped() {\r\n    return this.pswp.getNumItems() > 1;\r\n  }\r\n\r\n  /**\r\n   * Move main scroll by X amount of slides.\r\n   * For example:\r\n   *   `-1` will move to the previous slide,\r\n   *    `0` will reset the scroll position of the current slide,\r\n   *    `3` will move three slides forward\r\n   *\r\n   * If loop option is enabled - index will be automatically looped too,\r\n   * (for example `-1` will move to the last slide of the gallery).\r\n   *\r\n   * @param {number} diff\r\n   * @param {boolean=} animate\r\n   * @param {number=} velocityX\r\n   * @returns {boolean} whether index was changed or not\r\n   */\r\n  moveIndexBy(diff, animate, velocityX) {\r\n    const { pswp } = this;\r\n    let newIndex = pswp.potentialIndex + diff;\r\n    const numSlides = pswp.getNumItems();\r\n\r\n    if (pswp.canLoop()) {\r\n      newIndex = pswp.getLoopedIndex(newIndex);\r\n      const distance = (diff + numSlides) % numSlides;\r\n      if (distance <= numSlides / 2) {\r\n        // go forward\r\n        diff = distance;\r\n      } else {\r\n        // go backwards\r\n        diff = distance - numSlides;\r\n      }\r\n    } else {\r\n      if (newIndex < 0) {\r\n        newIndex = 0;\r\n      } else if (newIndex >= numSlides) {\r\n        newIndex = numSlides - 1;\r\n      }\r\n      diff = newIndex - pswp.potentialIndex;\r\n    }\r\n\r\n    pswp.potentialIndex = newIndex;\r\n    this._currPositionIndex -= diff;\r\n\r\n    pswp.animations.stopMainScroll();\r\n\r\n    const destinationX = this.getCurrSlideX();\r\n    if (!animate) {\r\n      this.moveTo(destinationX);\r\n      this.updateCurrItem();\r\n    } else {\r\n      pswp.animations.startSpring({\r\n        isMainScroll: true,\r\n        start: this.x,\r\n        end: destinationX,\r\n        velocity: velocityX || 0,\r\n        naturalFrequency: 30,\r\n        dampingRatio: 1, //0.7,\r\n        onUpdate: (x) => {\r\n          this.moveTo(x);\r\n        },\r\n        onComplete: () => {\r\n          this.updateCurrItem();\r\n          pswp.appendHeavy();\r\n        }\r\n      });\r\n\r\n      let currDiff = pswp.potentialIndex - pswp.currIndex;\r\n      if (pswp.canLoop()) {\r\n        const currDistance = (currDiff + numSlides) % numSlides;\r\n        if (currDistance <= numSlides / 2) {\r\n          // go forward\r\n          currDiff = currDistance;\r\n        } else {\r\n          // go backwards\r\n          currDiff = currDistance - numSlides;\r\n        }\r\n      }\r\n\r\n      // Force-append new slides during transition\r\n      // if difference between slides is more than 1\r\n      if (Math.abs(currDiff) > 1) {\r\n        this.updateCurrItem();\r\n      }\r\n    }\r\n\r\n    if (diff) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * X position of the main scroll for the current slide\r\n   * (ignores position during dragging)\r\n   */\r\n  getCurrSlideX() {\r\n    return this.slideWidth * this._currPositionIndex;\r\n  }\r\n\r\n  /**\r\n   * Whether scroll position is shifted.\r\n   * For example, it will return true if the scroll is being dragged or animated.\r\n   */\r\n  isShifted() {\r\n    return this.x !== this.getCurrSlideX();\r\n  }\r\n\r\n  /**\r\n   * Update slides X positions and set their content\r\n   */\r\n  updateCurrItem() {\r\n    const { pswp } = this;\r\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\r\n\r\n    if (!positionDifference) {\r\n      return;\r\n    }\r\n\r\n    this._prevPositionIndex = this._currPositionIndex;\r\n\r\n    pswp.currIndex = pswp.potentialIndex;\r\n\r\n    let diffAbs = Math.abs(positionDifference);\r\n    let tempHolder;\r\n\r\n    if (diffAbs >= 3) {\r\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\r\n      diffAbs = 3;\r\n    }\r\n\r\n    for (let i = 0; i < diffAbs; i++) {\r\n      if (positionDifference > 0) {\r\n        tempHolder = this.itemHolders.shift();\r\n        this.itemHolders[2] = tempHolder; // move first to last\r\n\r\n        this._containerShiftIndex++;\r\n\r\n        setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex - diffAbs) + i + 2);\r\n      } else {\r\n        tempHolder = this.itemHolders.pop();\r\n        this.itemHolders.unshift(tempHolder); // move last to first\r\n\r\n        this._containerShiftIndex--;\r\n\r\n        setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\r\n\r\n        pswp.setContent(tempHolder, (pswp.currIndex + diffAbs) - i - 2);\r\n      }\r\n    }\r\n\r\n    // Reset transfrom every 50ish navigations in one direction.\r\n    //\r\n    // Otherwise transform will keep growing indefinitely,\r\n    // which might cause issues as browsers have a maximum transform limit.\r\n    // I wasn't able to reach it, but just to be safe.\r\n    // This should not cause noticable lag.\r\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\r\n      this.resetPosition();\r\n      this.resize();\r\n    }\r\n\r\n    // Pan transition might be running (and consntantly updating pan position)\r\n    pswp.animations.stopAllPan();\r\n\r\n    this.itemHolders.forEach((itemHolder, i) => {\r\n      if (itemHolder.slide) {\r\n        // Slide in the 2nd holder is always active\r\n        itemHolder.slide.setIsActive(i === 1);\r\n      }\r\n    });\r\n\r\n    pswp.currSlide = this.itemHolders[1].slide;\r\n    pswp.contentLoader.updateLazy(positionDifference);\r\n\r\n    if (pswp.currSlide) {\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n\r\n    pswp.dispatch('change');\r\n  }\r\n\r\n  /**\r\n   * Move the X position of the main scroll container\r\n   *\r\n   * @param {number} x\r\n   * @param {boolean=} dragging\r\n   */\r\n  moveTo(x, dragging) {\r\n    /** @type {number} */\r\n    let newSlideIndexOffset;\r\n    /** @type {number} */\r\n    let delta;\r\n\r\n    if (!this.pswp.canLoop() && dragging) {\r\n      // Apply friction\r\n      newSlideIndexOffset = ((this.slideWidth * this._currPositionIndex) - x) / this.slideWidth;\r\n      newSlideIndexOffset += this.pswp.currIndex;\r\n      delta = Math.round(x - this.x);\r\n\r\n      if ((newSlideIndexOffset < 0 && delta > 0)\r\n          || (newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0)) {\r\n        x = this.x + (delta * MAIN_SCROLL_END_FRICTION);\r\n      }\r\n    }\r\n\r\n    this.x = x;\r\n    setTransform(this.pswp.container, x);\r\n\r\n    this.pswp.dispatch('moveMainScroll', { x, dragging });\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * - Manages keyboard shortcuts.\r\n * - Heps trap focus within photoswipe.\r\n */\r\nclass Keyboard {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    pswp.on('bindEvents', () => {\r\n      // Dialog was likely opened by keyboard if initial point is not defined\r\n      if (!pswp.options.initialPointerPos) {\r\n        // focus causes layout,\r\n        // which causes lag during the animation,\r\n        // that's why we delay it until the opener transition ends\r\n        this._focusRoot();\r\n      }\r\n\r\n      pswp.events.add(document, 'focusin', this._onFocusIn.bind(this));\r\n      pswp.events.add(document, 'keydown', this._onKeyDown.bind(this));\r\n    });\r\n\r\n    const lastActiveElement = /** @type {HTMLElement} */ (document.activeElement);\r\n    pswp.on('destroy', () => {\r\n      if (pswp.options.returnFocus\r\n          && lastActiveElement\r\n          && this._wasFocused) {\r\n        lastActiveElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  _focusRoot() {\r\n    if (!this._wasFocused) {\r\n      this.pswp.element.focus();\r\n      this._wasFocused = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {KeyboardEvent} e\r\n   */\r\n  _onKeyDown(e) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('keydown', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (specialKeyUsed(e)) {\r\n      // don't do anything if special key pressed\r\n      // to prevent from overriding default browser actions\r\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\r\n      return;\r\n    }\r\n\r\n    /** @type {Methods<PhotoSwipe>} */\r\n    let keydownAction;\r\n    /** @type {'x' | 'y'} */\r\n    let axis;\r\n    let isForward;\r\n\r\n    switch (e.keyCode) {\r\n      case 27: // esc\r\n        if (pswp.options.escKey) {\r\n          keydownAction = 'close';\r\n        }\r\n        break;\r\n      case 90: // z key\r\n        keydownAction = 'toggleZoom';\r\n        break;\r\n      case 37: // left\r\n        axis = 'x';\r\n        break;\r\n      case 38: // top\r\n        axis = 'y';\r\n        break;\r\n      case 39: // right\r\n        axis = 'x';\r\n        isForward = true;\r\n        break;\r\n      case 40: // bottom\r\n        isForward = true;\r\n        axis = 'y';\r\n        break;\r\n      case 9: // tab\r\n        this._focusRoot();\r\n        break;\r\n    }\r\n\r\n    // if left/right/top/bottom key\r\n    if (axis) {\r\n      // prevent page scroll\r\n      e.preventDefault();\r\n\r\n      const { currSlide } = pswp;\r\n\r\n      if (pswp.options.arrowKeys\r\n          && axis === 'x'\r\n          && pswp.getNumItems() > 1) {\r\n        keydownAction = isForward ? 'next' : 'prev';\r\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\r\n        // up/down arrow keys pan the image vertically\r\n        // left/right arrow keys pan horizontally.\r\n        // Unless there is only one image,\r\n        // or arrowKeys option is disabled\r\n        currSlide.pan[axis] += isForward ? -80 : 80;\r\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\r\n      }\r\n    }\r\n\r\n    if (keydownAction) {\r\n      e.preventDefault();\r\n      pswp[keydownAction]();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trap focus inside photoswipe\r\n   *\r\n   * @param {FocusEvent} e\r\n   */\r\n  _onFocusIn(e) {\r\n    const { template } = this.pswp;\r\n    if (document !== e.target\r\n        && template !== e.target\r\n        && !template.contains(/** @type {Node} */ (e.target))) {\r\n      // focus root element\r\n      template.focus();\r\n    }\r\n  }\r\n}\n\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/** @typedef {import('./animations.js').AnimationProps} AnimationProps */\r\n\r\n/**\r\n * Runs CSS transition.\r\n */\r\nclass CSSAnimation {\r\n  /**\r\n   * onComplete can be unpredictable, be careful about current state\r\n   *\r\n   * @param {AnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n    const {\r\n      target,\r\n      onComplete,\r\n      transform,\r\n      onFinish\r\n      // opacity\r\n    } = props;\r\n\r\n    let {\r\n      duration,\r\n      easing,\r\n    } = props;\r\n\r\n    /** @type {() => void} */\r\n    this.onFinish = onFinish;\r\n\r\n    // support only transform and opacity\r\n    const prop = transform ? 'transform' : 'opacity';\r\n    const propValue = props[prop];\r\n\r\n    /** @private */\r\n    this._target = target;\r\n    /** @private */\r\n    this._onComplete = onComplete;\r\n\r\n    duration = duration || 333;\r\n    easing = easing || DEFAULT_EASING;\r\n\r\n    /** @private */\r\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\r\n\r\n    // Using timeout hack to make sure that animation\r\n    // starts even if the animated property was changed recently,\r\n    // otherwise transitionend might not fire or transiton won't start.\r\n    // https://drafts.csswg.org/css-transitions/#starting\r\n    //\r\n    // ¯\\_(ツ)_/¯\r\n    /** @private */\r\n    this._helperTimeout = setTimeout(() => {\r\n      setTransitionStyle(target, prop, duration, easing);\r\n      this._helperTimeout = setTimeout(() => {\r\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\r\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false);\r\n\r\n        // Safari occasionally does not emit transitionend event\r\n        // if element propery was modified during the transition,\r\n        // which may be caused by resize or third party component,\r\n        // using timeout as a safety fallback\r\n        this._helperTimeout = setTimeout(() => {\r\n          this._finalizeAnimation();\r\n        }, duration + 500);\r\n        target.style[prop] = propValue;\r\n      }, 30); // Do not reduce this number\r\n    }, 0);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {TransitionEvent} e\r\n   */\r\n  _onTransitionEnd(e) {\r\n    if (e.target === this._target) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _finalizeAnimation() {\r\n    if (!this._finished) {\r\n      this._finished = true;\r\n      this.onFinish();\r\n      if (this._onComplete) {\r\n        this._onComplete();\r\n      }\r\n    }\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._helperTimeout) {\r\n      clearTimeout(this._helperTimeout);\r\n    }\r\n    removeTransitionStyle(this._target);\r\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\r\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\r\n    if (!this._finished) {\r\n      this._finalizeAnimation();\r\n    }\r\n  }\r\n}\n\nconst DEFAULT_NATURAL_FREQUENCY = 12;\r\nconst DEFAULT_DAMPING_RATIO = 0.75;\r\n\r\n/**\r\n * Spring easing helper\r\n */\r\nclass SpringEaser {\r\n  /**\r\n   * @param {number} initialVelocity Initial velocity, px per ms.\r\n   *\r\n   * @param {number} dampingRatio\r\n   * Determines how bouncy animation will be.\r\n   * From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\r\n   * \"overshoot\" refers to part of animation that\r\n   * goes beyond the final value.\r\n   *\r\n   * @param {number} naturalFrequency\r\n   * Determines how fast animation will slow down.\r\n   * The higher value - the stiffer the transition will be,\r\n   * and the faster it will slow down.\r\n   * Recommended value from 10 to 50\r\n   */\r\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\r\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\r\n\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;\r\n\r\n    // https://en.wikipedia.org/wiki/Natural_frequency\r\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\r\n\r\n    if (this._dampingRatio < 1) {\r\n      this._dampedFrequency = this._naturalFrequency\r\n                         * Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} deltaPosition Difference between current and end position of the animation\r\n   * @param {number} deltaTime Frame duration in milliseconds\r\n   *\r\n   * @returns {number} Displacement, relative to the end position.\r\n   */\r\n  easeFrame(deltaPosition, deltaTime) {\r\n    // Inspired by Apple Webkit and Android spring function implementation\r\n    // https://en.wikipedia.org/wiki/Oscillation\r\n    // https://en.wikipedia.org/wiki/Damping_ratio\r\n    // we ignore mass (assume that it's 1kg)\r\n\r\n    let displacement = 0;\r\n    let coeff;\r\n\r\n    deltaTime /= 1000;\r\n\r\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\r\n\r\n    if (this._dampingRatio === 1) {\r\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\r\n\r\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency) + coeff\r\n                        * naturalDumpingPow;\r\n    } else if (this._dampingRatio < 1) {\r\n      coeff = (1 / this._dampedFrequency)\r\n                * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\r\n\r\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\r\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\r\n\r\n      displacement = naturalDumpingPow\r\n                       * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\r\n\r\n      this.velocity = displacement\r\n                        * (-this._naturalFrequency)\r\n                        * this._dampingRatio\r\n                        + naturalDumpingPow\r\n                        * (-this._dampedFrequency * deltaPosition * dumpedFSin\r\n                        + this._dampedFrequency * coeff * dumpedFCos);\r\n    }\r\n\r\n    // Overdamped (>1) damping ratio is not supported\r\n\r\n    return displacement;\r\n  }\r\n}\n\n/** @typedef {import('./animations.js').AnimationProps} AnimationProps */\r\n\r\nclass SpringAnimation {\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  constructor(props) {\r\n    this.props = props;\r\n\r\n    const {\r\n      start,\r\n      end,\r\n      velocity,\r\n      onUpdate,\r\n      onComplete,\r\n      onFinish,\r\n      dampingRatio,\r\n      naturalFrequency\r\n    } = props;\r\n\r\n    /** @type {() => void} */\r\n    this.onFinish = onFinish;\r\n\r\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\r\n    let prevTime = Date.now();\r\n    let deltaPosition = start - end;\r\n\r\n    const animationLoop = () => {\r\n      if (this._raf) {\r\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\r\n\r\n        // Stop the animation if velocity is low and position is close to end\r\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\r\n          // Finalize the animation\r\n          onUpdate(end);\r\n          if (onComplete) {\r\n            onComplete();\r\n          }\r\n          this.onFinish();\r\n        } else {\r\n          prevTime = Date.now();\r\n          onUpdate(deltaPosition + end);\r\n          this._raf = requestAnimationFrame(animationLoop);\r\n        }\r\n      }\r\n    };\r\n\r\n    this._raf = requestAnimationFrame(animationLoop);\r\n  }\r\n\r\n  // Destroy is called automatically onFinish\r\n  destroy() {\r\n    if (this._raf >= 0) {\r\n      cancelAnimationFrame(this._raf);\r\n    }\r\n    this._raf = null;\r\n  }\r\n}\n\n/** @typedef {SpringAnimation | CSSAnimation} Animation */\r\n\r\n/**\r\n * @typedef {Object} AnimationProps\r\n *\r\n * @prop {HTMLElement=} target\r\n *\r\n * @prop {string=} name\r\n *\r\n * @prop {number=} start\r\n * @prop {number=} end\r\n * @prop {number=} duration\r\n * @prop {number=} velocity\r\n * @prop {number=} dampingRatio\r\n * @prop {number=} naturalFrequency\r\n *\r\n * @prop {(end: number) => void} [onUpdate]\r\n * @prop {() => void} [onComplete]\r\n * @prop {() => void} [onFinish]\r\n *\r\n * @prop {string=} transform\r\n * @prop {string=} opacity\r\n * @prop {string=} easing\r\n *\r\n * @prop {boolean=} isPan\r\n * @prop {boolean=} isMainScroll\r\n */\r\n\r\n/**\r\n * Manages animations\r\n */\r\nclass Animations {\r\n  constructor() {\r\n    /** @type {Animation[]} */\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  startSpring(props) {\r\n    this._start(props, true);\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   */\r\n  startTransition(props) {\r\n    this._start(props);\r\n  }\r\n\r\n  /**\r\n   * @param {AnimationProps} props\r\n   * @param {boolean=} isSpring\r\n   */\r\n  _start(props, isSpring) {\r\n    /** @type {Animation} */\r\n    let animation;\r\n    if (isSpring) {\r\n      animation = new SpringAnimation(props);\r\n    } else {\r\n      animation = new CSSAnimation(props);\r\n    }\r\n\r\n    this.activeAnimations.push(animation);\r\n    animation.onFinish = () => this.stop(animation);\r\n\r\n    return animation;\r\n  }\r\n\r\n  /**\r\n   * @param {Animation} animation\r\n   */\r\n  stop(animation) {\r\n    animation.destroy();\r\n    const index = this.activeAnimations.indexOf(animation);\r\n    if (index > -1) {\r\n      this.activeAnimations.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  stopAll() { // _stopAllAnimations\r\n    this.activeAnimations.forEach((animation) => {\r\n      animation.destroy();\r\n    });\r\n    this.activeAnimations = [];\r\n  }\r\n\r\n  /**\r\n   * Stop all pan or zoom transitions\r\n   */\r\n  stopAllPan() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isPan) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  stopMainScroll() {\r\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\r\n      if (animation.props.isMainScroll) {\r\n        animation.destroy();\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns true if main scroll transition is running\r\n   */\r\n  // isMainScrollRunning() {\r\n  //   return this.activeAnimations.some((animation) => {\r\n  //     return animation.props.isMainScroll;\r\n  //   });\r\n  // }\r\n\r\n  /**\r\n   * Returns true if any pan or zoom transition is running\r\n   */\r\n  isPanRunning() {\r\n    return this.activeAnimations.some((animation) => {\r\n      return animation.props.isPan;\r\n    });\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * Handles scroll wheel.\r\n * Can pan and zoom current slide image.\r\n */\r\nclass ScrollWheel {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    pswp.events.add(pswp.element, 'wheel', this._onWheel.bind(this));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {WheelEvent} e\r\n   */\r\n  _onWheel(e) {\r\n    e.preventDefault();\r\n    const { currSlide } = this.pswp;\r\n    let { deltaX, deltaY } = e;\r\n\r\n    if (!currSlide) {\r\n      return;\r\n    }\r\n\r\n    if (this.pswp.dispatch('wheel', { originalEvent: e }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\r\n      // zoom\r\n      if (currSlide.isZoomable()) {\r\n        let zoomFactor = -deltaY;\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          zoomFactor *= 0.05;\r\n        } else {\r\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\r\n        }\r\n        zoomFactor = 2 ** zoomFactor;\r\n\r\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\r\n        currSlide.zoomTo(destZoomLevel, {\r\n          x: e.clientX,\r\n          y: e.clientY\r\n        });\r\n      }\r\n    } else {\r\n      // pan\r\n      if (currSlide.isPannable()) {\r\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\r\n          // 18 - average line height\r\n          deltaX *= 18;\r\n          deltaY *= 18;\r\n        }\r\n\r\n        currSlide.panTo(\r\n          currSlide.pan.x - deltaX,\r\n          currSlide.pan.y - deltaY\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Methods<T>} Methods<T>\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementMarkupProps\r\n * @prop {boolean=} isCustomSVG\r\n * @prop {string} inner\r\n * @prop {string=} outlineID\r\n * @prop {number | string} [size]\r\n */\r\n\r\n/**\r\n * @typedef {Object} UIElementData\r\n * @prop {DefaultUIElements | string} [name]\r\n * @prop {string=} className\r\n * @prop {UIElementMarkup=} html\r\n * @prop {boolean=} isButton\r\n * @prop {keyof HTMLElementTagNameMap} [tagName]\r\n * @prop {string=} title\r\n * @prop {string=} ariaLabel\r\n * @prop {(element: HTMLElement, pswp: PhotoSwipe) => void} [onInit]\r\n * @prop {Methods<PhotoSwipe> | ((e: MouseEvent, element: HTMLElement, pswp: PhotoSwipe) => void)} [onClick]\r\n * @prop {'bar' | 'wrapper' | 'root'} [appendTo]\r\n * @prop {number=} order\r\n */\r\n\r\n/** @typedef {'arrowPrev' | 'arrowNext' | 'close' | 'zoom' | 'counter'} DefaultUIElements */\r\n\r\n/** @typedef {string | UIElementMarkupProps} UIElementMarkup */\r\n\r\n/**\r\n * @param {UIElementMarkup} [htmlData]\r\n */\r\nfunction addElementHTML(htmlData) {\r\n  if (typeof htmlData === 'string') {\r\n    // Allow developers to provide full svg,\r\n    // For example:\r\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\r\n    //   <path d=\"...\" />\r\n    //   <circle ... />\r\n    // </svg>\r\n    // Can also be any HTML string.\r\n    return htmlData;\r\n  }\r\n\r\n  if (!htmlData || !htmlData.isCustomSVG) {\r\n    return '';\r\n  }\r\n\r\n  const svgData = htmlData;\r\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\r\n  // replace all %d with size\r\n  out = out.split('%d').join(/** @type {string} */ (svgData.size || 32));\r\n\r\n  // Icons may contain outline/shadow,\r\n  // to make it we \"clone\" base icon shape and add border to it.\r\n  // Icon itself and border are styled via CSS.\r\n  //\r\n  // Property shadowID defines ID of element that should be cloned.\r\n  if (svgData.outlineID) {\r\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\r\n  }\r\n\r\n  out += svgData.inner;\r\n\r\n  out += '</svg>';\r\n\r\n  return out;\r\n}\r\n\r\nclass UIElement {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   * @param {UIElementData} data\r\n   */\r\n  constructor(pswp, data) {\r\n    const name = data.name || data.className;\r\n    let elementHTML = data.html;\r\n\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (pswp.options[name] === false) {\r\n      // exit if element is disabled from options\r\n      return;\r\n    }\r\n\r\n    // Allow to override SVG icons from options\r\n    // @ts-expect-error lookup only by `data.name` maybe?\r\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\r\n      // arrowPrevSVG\r\n      // arrowNextSVG\r\n      // closeSVG\r\n      // zoomSVG\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      elementHTML = pswp.options[name + 'SVG'];\r\n    }\r\n\r\n    pswp.dispatch('uiElementCreate', { data });\r\n\r\n    let className = '';\r\n    if (data.isButton) {\r\n      className += 'pswp__button ';\r\n      className += (data.className || `pswp__button--${data.name}`);\r\n    } else {\r\n      className += (data.className || `pswp__${data.name}`);\r\n    }\r\n\r\n    /** @type {HTMLElement} */\r\n    let element;\r\n    let tagName = data.isButton ? (data.tagName || 'button') : (data.tagName || 'div');\r\n    tagName = /** @type {keyof HTMLElementTagNameMap} */ (tagName.toLowerCase());\r\n    element = createElement(className, tagName);\r\n\r\n    if (data.isButton) {\r\n      // create button element\r\n      element = createElement(className, tagName);\r\n      if (tagName === 'button') {\r\n        /** @type {HTMLButtonElement} */ (element).type = 'button';\r\n      }\r\n\r\n      let { title } = data;\r\n      const { ariaLabel } = data;\r\n\r\n      // @ts-expect-error lookup only by `data.name` maybe?\r\n      if (typeof pswp.options[name + 'Title'] === 'string') {\r\n        // @ts-expect-error lookup only by `data.name` maybe?\r\n        title = pswp.options[name + 'Title'];\r\n      }\r\n\r\n      if (title) {\r\n        element.title = title;\r\n      }\r\n\r\n      if (ariaLabel || title) {\r\n        /** @type {HTMLElement} */ (element).setAttribute('aria-label', ariaLabel || title);\r\n      }\r\n    }\r\n\r\n    element.innerHTML = addElementHTML(elementHTML);\r\n\r\n    if (data.onInit) {\r\n      data.onInit(element, pswp);\r\n    }\r\n\r\n    if (data.onClick) {\r\n      element.onclick = (e) => {\r\n        if (typeof data.onClick === 'string') {\r\n          pswp[data.onClick]();\r\n        } else {\r\n          data.onClick(e, element, pswp);\r\n        }\r\n      };\r\n    }\r\n\r\n    // Top bar is default position\r\n    const appendTo = data.appendTo || 'bar';\r\n    let container;\r\n    if (appendTo === 'bar') {\r\n      if (!pswp.topBar) {\r\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', 'div', pswp.scrollWrap);\r\n      }\r\n      container = pswp.topBar;\r\n    } else {\r\n      // element outside of top bar gets a secondary class\r\n      // that makes element fade out on close\r\n      element.classList.add('pswp__hide-on-close');\r\n\r\n      if (appendTo === 'wrapper') {\r\n        container = pswp.scrollWrap;\r\n      } else {\r\n        // root element\r\n        container = pswp.element;\r\n      }\r\n    }\r\n\r\n    container.appendChild(pswp.applyFilters('uiElement', element, data));\r\n  }\r\n}\n\n/*\r\n  Backward and forward arrow buttons\r\n */\r\n\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/**\r\n *\r\n * @param {HTMLElement} element\r\n * @param {PhotoSwipe} pswp\r\n * @param {boolean=} isNextButton\r\n */\r\nfunction initArrowButton(element, pswp, isNextButton) {\r\n  element.classList.add('pswp__button--arrow');\r\n  // TODO: this should point to a unique id for this instance\r\n  element.setAttribute('aria-controls', 'pswp__items');\r\n  pswp.on('change', () => {\r\n    if (!pswp.options.loop) {\r\n      if (isNextButton) {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\r\n      } else {\r\n        /** @type {HTMLButtonElement} */\r\n        (element).disabled = !(pswp.currIndex > 0);\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/** @type {UIElementData} */\r\nconst arrowPrev = {\r\n  name: 'arrowPrev',\r\n  className: 'pswp__button--arrow--prev',\r\n  title: 'Previous',\r\n  order: 10,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'prev',\r\n  onInit: initArrowButton\r\n};\r\n\r\n/** @type {UIElementData} */\r\nconst arrowNext = {\r\n  name: 'arrowNext',\r\n  className: 'pswp__button--arrow--next',\r\n  title: 'Next',\r\n  order: 11,\r\n  isButton: true,\r\n  appendTo: 'wrapper',\r\n  html: {\r\n    isCustomSVG: true,\r\n    size: 60,\r\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\r\n    outlineID: 'pswp__icn-arrow'\r\n  },\r\n  onClick: 'next',\r\n  onInit: (el, pswp) => {\r\n    initArrowButton(el, pswp, true);\r\n  }\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst closeButton = {\r\n  name: 'close',\r\n  title: 'Close',\r\n  order: 20,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\r\n    outlineID: 'pswp__icn-close'\r\n  },\r\n  onClick: 'close'\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst zoomButton = {\r\n  name: 'zoom',\r\n  title: 'Zoom',\r\n  order: 10,\r\n  isButton: true,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>'\r\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\r\n    outlineID: 'pswp__icn-zoom'\r\n  },\r\n  onClick: 'toggleZoom'\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst loadingIndicator = {\r\n  name: 'preloader',\r\n  appendTo: 'bar',\r\n  order: 7,\r\n  html: {\r\n    isCustomSVG: true,\r\n    // eslint-disable-next-line max-len\r\n    inner: '<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M21.2 16a5.2 5.2 0 1 1-5.2-5.2V8a8 8 0 1 0 8 8h-2.8Z\" id=\"pswp__icn-loading\"/>',\r\n    outlineID: 'pswp__icn-loading'\r\n  },\r\n  onInit: (indicatorElement, pswp) => {\r\n    /** @type {boolean} */\r\n    let isVisible;\r\n    /** @type {NodeJS.Timeout} */\r\n    let delayTimeout;\r\n\r\n    /**\r\n     * @param {string} className\r\n     * @param {boolean} add\r\n     */\r\n    const toggleIndicatorClass = (className, add) => {\r\n      indicatorElement.classList[add ? 'add' : 'remove']('pswp__preloader--' + className);\r\n    };\r\n\r\n    /**\r\n     * @param {boolean} visible\r\n     */\r\n    const setIndicatorVisibility = (visible) => {\r\n      if (isVisible !== visible) {\r\n        isVisible = visible;\r\n        toggleIndicatorClass('active', visible);\r\n      }\r\n    };\r\n\r\n    const updatePreloaderVisibility = () => {\r\n      if (!pswp.currSlide.content.isLoading()) {\r\n        setIndicatorVisibility(false);\r\n        if (delayTimeout) {\r\n          clearTimeout(delayTimeout);\r\n          delayTimeout = null;\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (!delayTimeout) {\r\n        // display loading indicator with delay\r\n        delayTimeout = setTimeout(() => {\r\n          setIndicatorVisibility(pswp.currSlide.content.isLoading());\r\n          delayTimeout = null;\r\n        }, pswp.options.preloaderDelay);\r\n      }\r\n    };\r\n\r\n    pswp.on('change', updatePreloaderVisibility);\r\n\r\n    pswp.on('loadComplete', (e) => {\r\n      if (pswp.currSlide === e.slide) {\r\n        updatePreloaderVisibility();\r\n      }\r\n    });\r\n\r\n    // expose the method\r\n    pswp.ui.updatePreloaderVisibility = updatePreloaderVisibility;\r\n  }\r\n};\n\n/** @type {import('./ui-element.js').UIElementData} UIElementData */\r\nconst counterIndicator = {\r\n  name: 'counter',\r\n  order: 5,\r\n  onInit: (counterElement, pswp) => {\r\n    pswp.on('change', () => {\r\n      counterElement.innerText = (pswp.currIndex + 1)\r\n                                  + pswp.options.indexIndicatorSep\r\n                                  + pswp.getNumItems();\r\n    });\r\n  }\r\n};\n\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./ui-element.js').UIElementData} UIElementData */\r\n\r\n/**\r\n * Set special class on element when image is zoomed.\r\n *\r\n * By default it is used to adjust\r\n * zoom icon and zoom cursor via CSS.\r\n *\r\n * @param {HTMLElement} el\r\n * @param {boolean} isZoomedIn\r\n */\r\nfunction setZoomedIn(el, isZoomedIn) {\r\n  el.classList[isZoomedIn ? 'add' : 'remove']('pswp--zoomed-in');\r\n}\r\n\r\nclass UI {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n\r\n    /** @type {() => void} */\r\n    this.updatePreloaderVisibility = undefined;\r\n\r\n    /** @type {number} */\r\n    this._lastUpdatedZoomLevel = undefined;\r\n  }\r\n\r\n  init() {\r\n    const { pswp } = this;\r\n    this.isRegistered = false;\r\n    /** @type {UIElementData[]} */\r\n    this.uiElementsData = [\r\n      closeButton,\r\n      arrowPrev,\r\n      arrowNext,\r\n      zoomButton,\r\n      loadingIndicator,\r\n      counterIndicator\r\n    ];\r\n\r\n    pswp.dispatch('uiRegister');\r\n\r\n    // sort by order\r\n    this.uiElementsData.sort((a, b) => {\r\n      // default order is 0\r\n      return (a.order || 0) - (b.order || 0);\r\n    });\r\n\r\n    /** @type {(UIElement | UIElementData)[]} */\r\n    this.items = [];\r\n\r\n    this.isRegistered = true;\r\n    this.uiElementsData.forEach((uiElementData) => {\r\n      this.registerElement(uiElementData);\r\n    });\r\n\r\n    pswp.on('change', () => {\r\n      pswp.element.classList[pswp.getNumItems() === 1 ? 'add' : 'remove']('pswp--one-slide');\r\n    });\r\n\r\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\r\n  }\r\n\r\n  /**\r\n   * @param {UIElementData} elementData\r\n   */\r\n  registerElement(elementData) {\r\n    if (this.isRegistered) {\r\n      this.items.push(\r\n        new UIElement(this.pswp, elementData)\r\n      );\r\n    } else {\r\n      this.uiElementsData.push(elementData);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fired each time zoom or pan position is changed.\r\n   * Update classes that control visibility of zoom button and cursor icon.\r\n   */\r\n  _onZoomPanUpdate() {\r\n    const { template, currSlide, options } = this.pswp;\r\n    let { currZoomLevel } = currSlide;\r\n\r\n    if (this.pswp.opener.isClosing) {\r\n      return;\r\n    }\r\n\r\n    // if not open yet - check against initial zoom level\r\n    if (!this.pswp.opener.isOpen) {\r\n      currZoomLevel = currSlide.zoomLevels.initial;\r\n    }\r\n\r\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\r\n      return;\r\n    }\r\n    this._lastUpdatedZoomLevel = currZoomLevel;\r\n\r\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\r\n\r\n    // Initial and secondary zoom levels are almost equal\r\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\r\n      // disable zoom\r\n      setZoomedIn(template, false);\r\n      template.classList.remove('pswp--zoom-allowed');\r\n      return;\r\n    }\r\n\r\n    template.classList.add('pswp--zoom-allowed');\r\n\r\n    const potentialZoomLevel = currZoomLevel === currSlide.zoomLevels.initial\r\n      ? currSlide.zoomLevels.secondary : currSlide.zoomLevels.initial;\r\n\r\n    setZoomedIn(template, potentialZoomLevel <= currZoomLevel);\r\n\r\n    if (options.imageClickAction === 'zoom'\r\n        || options.imageClickAction === 'zoom-or-close') {\r\n      template.classList.add('pswp--click-to-zoom');\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\n/** @typedef {{ x: number; y: number; w: number; innerRect?: { w: number; h: number; x: number; y: number } }} Bounds */\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nfunction getBoundsByElement(el) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n  return {\r\n    x: thumbAreaRect.left,\r\n    y: thumbAreaRect.top,\r\n    w: thumbAreaRect.width\r\n  };\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n * @param {number} imageWidth\r\n * @param {number} imageHeight\r\n */\r\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\r\n  const thumbAreaRect = el.getBoundingClientRect();\r\n\r\n  // fill image into the area\r\n  // (do they same as object-fit:cover does to retrieve coordinates)\r\n  const hRatio = thumbAreaRect.width / imageWidth;\r\n  const vRatio = thumbAreaRect.height / imageHeight;\r\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\r\n\r\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\r\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\r\n\r\n  /**\r\n   * Coordinates of the image,\r\n   * as if it was not cropped,\r\n   * height is calculated automatically\r\n   *\r\n   * @type {Bounds}\r\n   */\r\n  const bounds = {\r\n    x: thumbAreaRect.left + offsetX,\r\n    y: thumbAreaRect.top + offsetY,\r\n    w: imageWidth * fillZoomLevel\r\n  };\r\n\r\n  // Coordinates of inner crop area\r\n  // relative to the image\r\n  bounds.innerRect = {\r\n    w: thumbAreaRect.width,\r\n    h: thumbAreaRect.height,\r\n    x: offsetX,\r\n    y: offsetY\r\n  };\r\n\r\n  return bounds;\r\n}\r\n\r\n/**\r\n * Get dimensions of thumbnail image\r\n * (click on which opens photoswipe or closes photoswipe to)\r\n *\r\n * @param {number} index\r\n * @param {SlideData} itemData\r\n * @param {PhotoSwipe} instance PhotoSwipe instance\r\n * @returns {Bounds | undefined}\r\n */\r\nfunction getThumbBounds(index, itemData, instance) {\r\n  // legacy event, before filters were introduced\r\n  const event = instance.dispatch('thumbBounds', {\r\n    index,\r\n    itemData,\r\n    instance\r\n  });\r\n  // @ts-expect-error\r\n  if (event.thumbBounds) {\r\n    // @ts-expect-error\r\n    return event.thumbBounds;\r\n  }\r\n\r\n  const { element } = itemData;\r\n  let thumbBounds;\r\n  /** @type {HTMLElement} */\r\n  let thumbnail;\r\n\r\n  if (element && instance.options.thumbSelector !== false) {\r\n    const thumbSelector = instance.options.thumbSelector || 'img';\r\n    thumbnail = element.matches(thumbSelector)\r\n      ? element : element.querySelector(thumbSelector);\r\n  }\r\n\r\n  thumbnail = instance.applyFilters('thumbEl', thumbnail, itemData, index);\r\n\r\n  if (thumbnail) {\r\n    if (!itemData.thumbCropped) {\r\n      thumbBounds = getBoundsByElement(thumbnail);\r\n    } else {\r\n      thumbBounds = getCroppedBoundsByElement(\r\n        thumbnail,\r\n        itemData.width || itemData.w,\r\n        itemData.height || itemData.h\r\n      );\r\n    }\r\n  }\r\n\r\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\r\n}\n\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point, transitionDuration: number | false }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thubmnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thubmnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter<T>\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback<T>\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe=} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name].push({ fn, priority });\r\n    this._filters[name].sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    if (this.pswp) {\r\n      this.pswp.addFilter(name, fn, priority);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    if (this._filters[name]) {\r\n      this._filters[name].forEach((filter) => {\r\n        // @ts-expect-error\r\n        args[0] = filter.fn.apply(this, args);\r\n      });\r\n    }\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name].push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    if (this.pswp) {\r\n      this.pswp.on(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.off(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    if (!this._listeners) {\r\n      return event;\r\n    }\r\n\r\n    if (this._listeners[name]) {\r\n      this._listeners[name].forEach((listener) => {\r\n        listener.call(this, event);\r\n      });\r\n    }\r\n\r\n    return event;\r\n  }\r\n}\n\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : '',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).decoding = 'async';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).alt = '';\r\n      /** @type {HTMLImageElement} */\r\n      (this.element).src = imageSrc;\r\n      this.element.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hidden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\n\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipe} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement} */\r\n    this.element = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = null;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean=} isLazy\r\n   * @param {boolean=} reload\r\n   */\r\n  load(isLazy, reload) {\r\n    if (this.slide && this.usePlaceholder()) {\r\n      if (!this.placeholder) {\r\n        const placeholderSrc = this.instance.applyFilters(\r\n          'placeholderSrc',\r\n          // use  image-based placeholder only for the first slide,\r\n          // as rendering (even small stretched thumbnail) is an expensive operation\r\n          (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n          this\r\n        );\r\n        this.placeholder = new Placeholder(\r\n          placeholderSrc,\r\n          this.slide.container\r\n        );\r\n      } else {\r\n        const placeholderEl = this.placeholder.element;\r\n        // Add placeholder to DOM if it was already created\r\n        if (placeholderEl && !placeholderEl.parentElement) {\r\n          this.slide.container.prepend(placeholderEl);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    if (this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src;\r\n\r\n    imageElement.alt = this.data.alt || '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    // eslint-disable-next-line max-len\r\n    if (this.instance.dispatch('contentResize', { content: this, width, height }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        // eslint-disable-next-line max-len\r\n        this.instance.dispatch('imageSizeChange', { slide: this.slide, width, height, content: this });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (this.data.srcset) {\r\n      const image = /** @type HTMLImageElement */ (this.element);\r\n      const sizesWidth = this.instance.applyFilters(\r\n        'srcsetSizesWidth',\r\n        this.displayedImageWidth,\r\n        this\r\n      );\r\n\r\n      if (!image.dataset.largestUsedSize\r\n          || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)) {\r\n        image.sizes = sizesWidth + 'px';\r\n        image.dataset.largestUsedSize = String(sizesWidth);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = null;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.destroy();\r\n      this.placeholder = null;\r\n    }\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      /** @type {HTMLElement} */\r\n      let errorMsgEl = createElement('pswp__error-msg');\r\n      errorMsgEl.innerText = this.instance.options.errorMsg;\r\n      errorMsgEl = this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      );\r\n      this.element = createElement('pswp__content pswp__error-msg-container');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().catch(() => {}).finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.slide) {\r\n      if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n        // add image to slide when it becomes active,\r\n        // even if it's not finished decoding\r\n        this.appendImage();\r\n      } else if (this.isError()) {\r\n        this.load(false, true); // try to reload\r\n      }\r\n\r\n      if (this.slide.holderElement) {\r\n        this.slide.holderElement.setAttribute('aria-hidden', 'false');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n    if (this.slide && this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n\r\n    if (this.placeholder && this.placeholder.element) {\r\n      this.placeholder.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\n\n/** @typedef {import('./content.js').default} Content */\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipe | PhotoSwipeLightbox | PhotoSwipeBase} instance PhotoSwipe instance\r\n * @param {number} index\r\n * @returns Image that is being decoded or false.\r\n */\r\nfunction lazyLoadData(itemData, instance, index) {\r\n  // src/slide/content/content.js\r\n  const content = instance.createContentFromData(itemData, index);\r\n\r\n  if (!content || !content.lazyLoad) {\r\n    return;\r\n  }\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset and we need to define sizes\r\n  // @ts-expect-error should provide pswp instance?\r\n  const viewportSize = instance.viewportSize || getViewportSize(options, instance);\r\n  const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n\r\n  const zoomLevel = new ZoomLevel(options, itemData, -1);\r\n  zoomLevel.update(content.width, content.height, panAreaSize);\r\n\r\n  content.lazyLoad();\r\n  content.setDisplayedSize(\r\n    Math.ceil(content.width * zoomLevel.initial),\r\n    Math.ceil(content.height * zoomLevel.initial)\r\n  );\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipe | PhotoSwipeLightbox} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n */\r\nfunction lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number=} diff Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   */\r\n  loadSlideByIndex(index) {\r\n    index = this.pswp.getLoopedIndex(index);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n\r\n    if (content) {\r\n      // assign slide to content\r\n      content.setSlide(slide);\r\n    }\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = null;\r\n  }\r\n}\n\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../photoswipe.js\").PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems;\r\n    const { dataSource } = this.options;\r\n    if (!dataSource) {\r\n      numItems = 0;\r\n    } else if ('length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if ('gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    // @ts-expect-error\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getItemData(index) {\r\n    const { dataSource } = this.options;\r\n    let dataSourceItem;\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && dataSource.gallery) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options.children || this.options.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   */\r\n  // eslint-disable-next-line class-methods-use-this\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    // eslint-disable-next-line max-len\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (element.tagName === 'A' ? element : element.querySelector('a'));\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = parseInt(linkEl.dataset.pswpWidth, 10);\r\n      itemData.height = parseInt(linkEl.dataset.pswpHeight, 10);\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt');\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n\r\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns Image that is being decoded or false.\r\n   */\r\n  lazyLoadData(itemData, index) {\r\n    return lazyLoadData(itemData, this, index);\r\n  }\r\n}\n\n/** @typedef {import('./photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('./slide/get-thumb-bounds.js').Bounds} Bounds */\r\n/** @typedef {import('./util/animations.js').AnimationProps} AnimationProps */\r\n\r\n// some browsers do not paint\r\n// elements which opacity is set to 0,\r\n// since we need to pre-render elements for the animation -\r\n// we set it to the minimum amount\r\nconst MIN_OPACITY = 0.003;\r\n\r\n/**\r\n * Manages opening and closing transitions of the PhotoSwipe.\r\n *\r\n * It can perform zoom, fade or no transition.\r\n */\r\nclass Opener {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    this.isClosed = true;\r\n    this._prepareOpen = this._prepareOpen.bind(this);\r\n\r\n    /** @type {false | Bounds} */\r\n    this._thumbBounds = undefined;\r\n\r\n    // Override initial zoom and pan position\r\n    pswp.on('firstZoomPan', this._prepareOpen);\r\n  }\r\n\r\n  open() {\r\n    this._prepareOpen();\r\n    this._start();\r\n  }\r\n\r\n  close() {\r\n    if (this.isClosed || this.isClosing || this.isOpening) {\r\n      // if we close during opening animation\r\n      // for now do nothing,\r\n      // browsers aren't good at changing the direction of the CSS transition\r\n      return false;\r\n    }\r\n\r\n    const slide = this.pswp.currSlide;\r\n\r\n    this.isOpen = false;\r\n    this.isOpening = false;\r\n    this.isClosing = true;\r\n    this._duration = this.pswp.options.hideAnimationDuration;\r\n\r\n    if (slide && slide.currZoomLevel * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n      this._duration = 0;\r\n    }\r\n\r\n    this._applyStartProps();\r\n    setTimeout(() => {\r\n      this._start();\r\n    }, this._croppedZoom ? 30 : 0);\r\n\r\n    return true;\r\n  }\r\n\r\n  _prepareOpen() {\r\n    this.pswp.off('firstZoomPan', this._prepareOpen);\r\n    if (!this.isOpening) {\r\n      const slide = this.pswp.currSlide;\r\n      this.isOpening = true;\r\n      this.isClosing = false;\r\n      this._duration = this.pswp.options.showAnimationDuration;\r\n      if (slide && slide.zoomLevels.initial * slide.width >= this.pswp.options.maxWidthToAnimate) {\r\n        this._duration = 0;\r\n      }\r\n      this._applyStartProps();\r\n    }\r\n  }\r\n\r\n  _applyStartProps() {\r\n    const { pswp } = this;\r\n    const slide = this.pswp.currSlide;\r\n    const { options } = pswp;\r\n\r\n    if (options.showHideAnimationType === 'fade') {\r\n      options.showHideOpacity = true;\r\n      this._thumbBounds = false;\r\n    } else if (options.showHideAnimationType === 'none') {\r\n      options.showHideOpacity = false;\r\n      this._duration = 0;\r\n      this._thumbBounds = false;\r\n    } else if (this.isOpening && pswp._initialThumbBounds) {\r\n      // Use initial bounds if defined\r\n      this._thumbBounds = pswp._initialThumbBounds;\r\n    } else {\r\n      this._thumbBounds = this.pswp.getThumbBounds();\r\n    }\r\n\r\n    this._placeholder = slide.getPlaceholderElement();\r\n\r\n    pswp.animations.stopAll();\r\n\r\n    // Discard animations when duration is less than 50ms\r\n    this._useAnimation = (this._duration > 50);\r\n    this._animateZoom = Boolean(this._thumbBounds)\r\n                        && (slide.content && slide.content.usePlaceholder())\r\n                        && (!this.isClosing || !pswp.mainScroll.isShifted());\r\n    if (!this._animateZoom) {\r\n      this._animateRootOpacity = true;\r\n\r\n      if (this.isOpening) {\r\n        slide.zoomAndPanToInitial();\r\n        slide.applyCurrentZoomPan();\r\n      }\r\n    } else {\r\n      this._animateRootOpacity = options.showHideOpacity;\r\n    }\r\n    this._animateBgOpacity = !this._animateRootOpacity && this.pswp.options.bgOpacity > MIN_OPACITY;\r\n    this._opacityElement = this._animateRootOpacity ? pswp.element : pswp.bg;\r\n\r\n    if (!this._useAnimation) {\r\n      this._duration = 0;\r\n      this._animateZoom = false;\r\n      this._animateBgOpacity = false;\r\n      this._animateRootOpacity = true;\r\n      if (this.isOpening) {\r\n        pswp.element.style.opacity = String(MIN_OPACITY);\r\n        pswp.applyBgOpacity(1);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (this._animateZoom && this._thumbBounds && this._thumbBounds.innerRect) {\r\n      // Properties are used when animation from cropped thumbnail\r\n      this._croppedZoom = true;\r\n      this._cropContainer1 = this.pswp.container;\r\n      this._cropContainer2 = this.pswp.currSlide.holderElement;\r\n\r\n      pswp.container.style.overflow = 'hidden';\r\n      pswp.container.style.width = pswp.viewportSize.x + 'px';\r\n    } else {\r\n      this._croppedZoom = false;\r\n    }\r\n\r\n    if (this.isOpening) {\r\n      // Apply styles before opening transition\r\n      if (this._animateRootOpacity) {\r\n        pswp.element.style.opacity = String(MIN_OPACITY);\r\n        pswp.applyBgOpacity(1);\r\n      } else {\r\n        if (this._animateBgOpacity) {\r\n          pswp.bg.style.opacity = String(MIN_OPACITY);\r\n        }\r\n        pswp.element.style.opacity = '1';\r\n      }\r\n\r\n      if (this._animateZoom) {\r\n        this._setClosedStateZoomPan();\r\n        if (this._placeholder) {\r\n          // tell browser that we plan to animate the placeholder\r\n          this._placeholder.style.willChange = 'transform';\r\n\r\n          // hide placeholder to allow hiding of\r\n          // elements that overlap it (such as icons over the thumbnail)\r\n          this._placeholder.style.opacity = String(MIN_OPACITY);\r\n        }\r\n      }\r\n    } else if (this.isClosing) {\r\n      // hide nearby slides to make sure that\r\n      // they are not painted during the transition\r\n      pswp.mainScroll.itemHolders[0].el.style.display = 'none';\r\n      pswp.mainScroll.itemHolders[2].el.style.display = 'none';\r\n\r\n      if (this._croppedZoom) {\r\n        if (pswp.mainScroll.x !== 0) {\r\n          // shift the main scroller to zero position\r\n          pswp.mainScroll.resetPosition();\r\n          pswp.mainScroll.resize();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _start() {\r\n    if (this.isOpening\r\n        && this._useAnimation\r\n        && this._placeholder\r\n        && this._placeholder.tagName === 'IMG') {\r\n      // To ensure smooth animation\r\n      // we wait till the current slide image placeholder is decoded,\r\n      // but no longer than 250ms,\r\n      // and no shorter than 50ms\r\n      // (just using requestanimationframe is not enough in Firefox,\r\n      // for some reason)\r\n      new Promise((resolve) => {\r\n        let decoded = false;\r\n        let isDelaying = true;\r\n        decodeImage(/** @type {HTMLImageElement} */ (this._placeholder)).finally(() => {\r\n          decoded = true;\r\n          if (!isDelaying) {\r\n            resolve();\r\n          }\r\n        });\r\n        setTimeout(() => {\r\n          isDelaying = false;\r\n          if (decoded) {\r\n            resolve();\r\n          }\r\n        }, 50);\r\n        setTimeout(resolve, 250);\r\n      }).finally(() => this._initiate());\r\n    } else {\r\n      this._initiate();\r\n    }\r\n  }\r\n\r\n  _initiate() {\r\n    this.pswp.element.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\r\n\r\n    this.pswp.dispatch(\r\n      this.isOpening ? 'openingAnimationStart' : 'closingAnimationStart'\r\n    );\r\n\r\n    // legacy event\r\n    this.pswp.dispatch(\r\n      /** @type {'initialZoomIn' | 'initialZoomOut'} */\r\n      ('initialZoom' + (this.isOpening ? 'In' : 'Out'))\r\n    );\r\n\r\n    this.pswp.element.classList[this.isOpening ? 'add' : 'remove']('pswp--ui-visible');\r\n\r\n    if (this.isOpening) {\r\n      if (this._placeholder) {\r\n        // unhide the placeholder\r\n        this._placeholder.style.opacity = '1';\r\n      }\r\n      this._animateToOpenState();\r\n    } else if (this.isClosing) {\r\n      this._animateToClosedState();\r\n    }\r\n\r\n    if (!this._useAnimation) {\r\n      this._onAnimationComplete();\r\n    }\r\n  }\r\n\r\n  _onAnimationComplete() {\r\n    const { pswp } = this;\r\n    this.isOpen = this.isOpening;\r\n    this.isClosed = this.isClosing;\r\n    this.isOpening = false;\r\n    this.isClosing = false;\r\n\r\n    pswp.dispatch(\r\n      this.isOpen ? 'openingAnimationEnd' : 'closingAnimationEnd'\r\n    );\r\n\r\n    // legacy event\r\n    pswp.dispatch(\r\n      /** @type {'initialZoomInEnd' | 'initialZoomOutEnd'} */\r\n      ('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'))\r\n    );\r\n\r\n    if (this.isClosed) {\r\n      pswp.destroy();\r\n    } else if (this.isOpen) {\r\n      if (this._animateZoom) {\r\n        pswp.container.style.overflow = 'visible';\r\n        pswp.container.style.width = '100%';\r\n      }\r\n      pswp.currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  _animateToOpenState() {\r\n    const { pswp } = this;\r\n    if (this._animateZoom) {\r\n      if (this._croppedZoom) {\r\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\r\n        this._animateTo(this._cropContainer2, 'transform', 'none');\r\n      }\r\n\r\n      pswp.currSlide.zoomAndPanToInitial();\r\n      this._animateTo(\r\n        pswp.currSlide.container,\r\n        'transform',\r\n        pswp.currSlide.getCurrentTransform()\r\n      );\r\n    }\r\n\r\n    if (this._animateBgOpacity) {\r\n      this._animateTo(pswp.bg, 'opacity', String(pswp.options.bgOpacity));\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', '1');\r\n    }\r\n  }\r\n\r\n  _animateToClosedState() {\r\n    const { pswp } = this;\r\n\r\n    if (this._animateZoom) {\r\n      this._setClosedStateZoomPan(true);\r\n    }\r\n\r\n    if (this._animateBgOpacity\r\n        && pswp.bgOpacity > 0.01) { // do not animate opacity if it's already at 0\r\n      this._animateTo(pswp.bg, 'opacity', '0');\r\n    }\r\n\r\n    if (this._animateRootOpacity) {\r\n      this._animateTo(pswp.element, 'opacity', '0');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {boolean=} animate\r\n   */\r\n  _setClosedStateZoomPan(animate) {\r\n    if (!this._thumbBounds) return;\r\n\r\n    const { pswp } = this;\r\n    const { innerRect } = this._thumbBounds;\r\n    const { currSlide, viewportSize } = pswp;\r\n\r\n    if (this._croppedZoom) {\r\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\r\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\r\n      const containerTwoPanX = viewportSize.x - innerRect.w;\r\n      const containerTwoPanY = viewportSize.y - innerRect.h;\r\n\r\n\r\n      if (animate) {\r\n        this._animateTo(\r\n          this._cropContainer1,\r\n          'transform',\r\n          toTransformString(containerOnePanX, containerOnePanY)\r\n        );\r\n\r\n        this._animateTo(\r\n          this._cropContainer2,\r\n          'transform',\r\n          toTransformString(containerTwoPanX, containerTwoPanY)\r\n        );\r\n      } else {\r\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\r\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\r\n      }\r\n    }\r\n\r\n    equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\r\n    currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\r\n\r\n    if (animate) {\r\n      this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\r\n    } else {\r\n      currSlide.applyCurrentZoomPan();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {HTMLElement} target\r\n   * @param {'transform' | 'opacity'} prop\r\n   * @param {string} propValue\r\n   */\r\n  _animateTo(target, prop, propValue) {\r\n    if (!this._duration) {\r\n      target.style[prop] = propValue;\r\n      return;\r\n    }\r\n\r\n    const { animations } = this.pswp;\r\n    /** @type {AnimationProps} */\r\n    const animProps = {\r\n      duration: this._duration,\r\n      easing: this.pswp.options.easing,\r\n      onComplete: () => {\r\n        if (!animations.activeAnimations.length) {\r\n          this._onAnimationComplete();\r\n        }\r\n      },\r\n      target,\r\n    };\r\n    animProps[prop] = propValue;\r\n    animations.startTransition(animProps);\r\n  }\r\n}\n\n/**\r\n * @template T\r\n * @typedef {import('./types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('./slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('./slide/zoom-level.js').ZoomLevelOption} ZoomLevelOption */\r\n/** @typedef {import('./ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('./main-scroll.js').ItemHolder} ItemHolder */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('./core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n/**\r\n * @template T\r\n * @typedef {import('./core/eventable.js').AugmentedEvent<T>} AugmentedEvent<T>\r\n */\r\n\r\n/** @typedef {{ x?: number; y?: number; id?: string | number }} Point */\r\n/** @typedef {{ x?: number; y?: number }} Size */\r\n/** @typedef {{ top: number; bottom: number; left: number; right: number }} Padding */\r\n/** @typedef {SlideData[]} DataSourceArray */\r\n/** @typedef {{ gallery: HTMLElement; items?: HTMLElement[] }} DataSourceObject */\r\n/** @typedef {DataSourceArray | DataSourceObject} DataSource */\r\n/** @typedef {(point: Point, originalEvent: PointerEvent) => void} ActionFn */\r\n/** @typedef {'close' | 'next' | 'zoom' | 'zoom-or-close' | 'toggle-controls'} ActionType */\r\n/** @typedef {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} PhotoSwipeModule */\r\n/** @typedef {PhotoSwipeModule | Promise<PhotoSwipeModule> | (() => Promise<PhotoSwipeModule>)} PhotoSwipeModuleOption */\r\n\r\n/**\r\n * @typedef {string | NodeListOf<HTMLElement> | HTMLElement[] | HTMLElement} ElementProvider\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeOptions https://photoswipe.com/options/\r\n *\r\n * @prop {DataSource=} dataSource\r\n * Pass an array of any items via dataSource option. Its length will determine amount of slides\r\n * (which may be modified further from numItems event).\r\n *\r\n * Each item should contain data that you need to generate slide\r\n * (for image slide it would be src (image URL), width (image width), height, srcset, alt).\r\n *\r\n * If these properties are not present in your initial array, you may \"pre-parse\" each item from itemData filter.\r\n *\r\n * @prop {number=} bgOpacity\r\n * Background backdrop opacity, always define it via this option and not via CSS rgba color.\r\n *\r\n * @prop {number=} spacing\r\n * Spacing between slides. Defined as ratio relative to the viewport width (0.1 = 10% of viewport).\r\n *\r\n * @prop {boolean=} allowPanToNext\r\n * Allow swipe navigation to the next slide when the current slide is zoomed. Does not apply to mouse events.\r\n *\r\n * @prop {boolean=} loop\r\n * If set to true you'll be able to swipe from the last to the first image.\r\n * Option is always false when there are less than 3 slides.\r\n *\r\n * @prop {boolean=} wheelToZoom\r\n * By default PhotoSwipe zooms image with ctrl-wheel, if you enable this option - image will zoom just via wheel.\r\n *\r\n * @prop {boolean=} pinchToClose\r\n * Pinch touch gesture to close the gallery.\r\n *\r\n * @prop {boolean=} closeOnVerticalDrag\r\n * Vertical drag gesture to close the PhotoSwipe.\r\n *\r\n * @prop {Padding=} padding\r\n * Slide area padding (in pixels).\r\n *\r\n * @prop {(viewportSize: Size, itemData: SlideData, index: number) => Padding} [paddingFn]\r\n * The option is checked frequently, so make sure it's performant. Overrides padding option if defined. For example:\r\n *\r\n * @prop {number | false} [hideAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} [showAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {number | false} [zoomAnimationDuration]\r\n * Transition duration in milliseconds, can be 0.\r\n *\r\n * @prop {string=} easing\r\n * String, 'cubic-bezier(.4,0,.22,1)'. CSS easing function for open/close/zoom transitions.\r\n *\r\n * @prop {boolean=} escKey\r\n * Esc key to close.\r\n *\r\n * @prop {boolean=} arrowKeys\r\n * Left/right arrow keys for navigation.\r\n *\r\n * @prop {boolean=} returnFocus\r\n * Restore focus the last active element after PhotoSwipe is closed.\r\n *\r\n * @prop {boolean=} clickToCloseNonZoomable\r\n * If image is not zoomable (for example, smaller than viewport) it can be closed by clicking on it.\r\n *\r\n * @prop {ActionType | ActionFn | false} [imageClickAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [bgClickAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [tapAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {ActionType | ActionFn | false} [doubleTapAction]\r\n * Refer to click and tap actions page.\r\n *\r\n * @prop {number=} preloaderDelay\r\n * Delay before the loading indicator will be displayed,\r\n * if image is loaded during it - the indicator will not be displayed at all. Can be zero.\r\n *\r\n * @prop {string=} indexIndicatorSep\r\n * Used for slide count indicator (\"1 of 10 \").\r\n *\r\n * @prop {(options: PhotoSwipeOptions, pswp: PhotoSwipe) => { x: number; y: number }} [getViewportSizeFn]\r\n * A function that should return slide viewport width and height, in format {x: 100, y: 100}.\r\n *\r\n * @prop {string=} errorMsg\r\n * Message to display when the image wasn't able to load. If you need to display HTML - use contentErrorElement filter.\r\n *\r\n * @prop {[number, number]=} preload\r\n * Lazy loading of nearby slides based on direction of movement. Should be an array with two integers,\r\n * first one - number of items to preload before the current image, second one - after the current image.\r\n * Two nearby images are always loaded.\r\n *\r\n * @prop {string=} mainClass\r\n * Class that will be added to the root element of PhotoSwipe, may contain multiple separated by space.\r\n * Example on Styling page.\r\n *\r\n * @prop {HTMLElement=} appendToEl\r\n * Element to which PhotoSwipe dialog will be appended when it opens.\r\n *\r\n * @prop {number=} maxWidthToAnimate\r\n * Maximum width of image to animate, if initial rendered image width\r\n * is larger than this value - the opening/closing transition will be automatically disabled.\r\n *\r\n * @prop {string=} closeTitle\r\n * Translating\r\n *\r\n * @prop {string=} zoomTitle\r\n * Translating\r\n *\r\n * @prop {string=} arrowPrevTitle\r\n * Translating\r\n *\r\n * @prop {string=} arrowNextTitle\r\n * Translating\r\n *\r\n * @prop {'zoom' | 'fade' | 'none'} [showHideAnimationType]\r\n * To adjust opening or closing transition type use lightbox option `showHideAnimationType` (`String`).\r\n * It supports three values - `zoom` (default), `fade` (default if there is no thumbnail) and `none`.\r\n *\r\n * Animations are automatically disabled if user `(prefers-reduced-motion: reduce)`.\r\n *\r\n * @prop {number=} index\r\n * Defines start slide index.\r\n *\r\n * @prop {(e: MouseEvent) => number} [getClickedIndexFn]\r\n *\r\n * @prop {boolean=} arrowPrev\r\n * @prop {boolean=} arrowNext\r\n * @prop {boolean=} zoom\r\n * @prop {boolean=} close\r\n * @prop {boolean=} counter\r\n *\r\n * @prop {string=} arrowPrevSVG\r\n * @prop {string=} arrowNextSVG\r\n * @prop {string=} zoomSVG\r\n * @prop {string=} closeSVG\r\n * @prop {string=} counterSVG\r\n *\r\n * @prop {string=} arrowPrevTitle\r\n * @prop {string=} arrowNextTitle\r\n * @prop {string=} zoomTitle\r\n * @prop {string=} closeTitle\r\n * @prop {string=} counterTitle\r\n *\r\n * @prop {ZoomLevelOption=} initialZoomLevel\r\n * @prop {ZoomLevelOption=} secondaryZoomLevel\r\n * @prop {ZoomLevelOption=} maxZoomLevel\r\n *\r\n * @prop {boolean=} mouseMovePan\r\n * @prop {Point | null} [initialPointerPos]\r\n * @prop {boolean=} showHideOpacity\r\n *\r\n * @prop {PhotoSwipeModuleOption} [pswpModule]\r\n * @prop {() => Promise<any>} [openPromise]\r\n * @prop {boolean=} preloadFirstSlide\r\n * @prop {ElementProvider=} gallery\r\n * @prop {string=} gallerySelector\r\n * @prop {ElementProvider=} children\r\n * @prop {string=} childSelector\r\n * @prop {string | false} [thumbSelector]\r\n */\r\n\r\n/** @type {PhotoSwipeOptions} */\r\nconst defaultOptions = {\r\n  allowPanToNext: true,\r\n  spacing: 0.1,\r\n  loop: true,\r\n  pinchToClose: true,\r\n  closeOnVerticalDrag: true,\r\n  hideAnimationDuration: 333,\r\n  showAnimationDuration: 333,\r\n  zoomAnimationDuration: 333,\r\n  escKey: true,\r\n  arrowKeys: true,\r\n  returnFocus: true,\r\n  maxWidthToAnimate: 4000,\r\n  clickToCloseNonZoomable: true,\r\n  imageClickAction: 'zoom-or-close',\r\n  bgClickAction: 'close',\r\n  tapAction: 'toggle-controls',\r\n  doubleTapAction: 'zoom',\r\n  indexIndicatorSep: ' / ',\r\n  preloaderDelay: 2000,\r\n  bgOpacity: 0.8,\r\n\r\n  index: 0,\r\n  errorMsg: 'The image cannot be loaded',\r\n  preload: [1, 2],\r\n  easing: 'cubic-bezier(.4,0,.22,1)'\r\n};\r\n\r\n/**\r\n * PhotoSwipe Core\r\n */\r\nclass PhotoSwipe extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    this._prepareOptions(options);\r\n\r\n    /**\r\n     * offset of viewport relative to document\r\n     *\r\n     * @type {{ x?: number; y?: number }}\r\n     */\r\n    this.offset = {};\r\n\r\n    /**\r\n     * @type {{ x?: number; y?: number }}\r\n     * @private\r\n     */\r\n    this._prevViewportSize = {};\r\n\r\n    /**\r\n     * Size of scrollable PhotoSwipe viewport\r\n     *\r\n     * @type {{ x?: number; y?: number }}\r\n     */\r\n    this.viewportSize = {};\r\n\r\n    /**\r\n     * background (backdrop) opacity\r\n     *\r\n     * @type {number}\r\n     */\r\n    this.bgOpacity = 1;\r\n\r\n    /** @type {HTMLDivElement} */\r\n    this.topBar = undefined;\r\n\r\n    this.events = new DOMEvents();\r\n\r\n    /** @type {Animations} */\r\n    this.animations = new Animations();\r\n\r\n    this.mainScroll = new MainScroll(this);\r\n    this.gestures = new Gestures(this);\r\n    this.opener = new Opener(this);\r\n    this.keyboard = new Keyboard(this);\r\n    this.contentLoader = new ContentLoader(this);\r\n  }\r\n\r\n  init() {\r\n    if (this.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isOpen = true;\r\n    this.dispatch('init'); // legacy\r\n    this.dispatch('beforeOpen');\r\n\r\n    this._createMainStructure();\r\n\r\n    // add classes to the root element of PhotoSwipe\r\n    let rootClasses = 'pswp--open';\r\n    if (this.gestures.supportsTouch) {\r\n      rootClasses += ' pswp--touch';\r\n    }\r\n    if (this.options.mainClass) {\r\n      rootClasses += ' ' + this.options.mainClass;\r\n    }\r\n    this.element.className += ' ' + rootClasses;\r\n\r\n    this.currIndex = this.options.index || 0;\r\n    this.potentialIndex = this.currIndex;\r\n    this.dispatch('firstUpdate'); // starting index can be modified here\r\n\r\n    // initialize scroll wheel handler to block the scroll\r\n    this.scrollWheel = new ScrollWheel(this);\r\n\r\n    // sanitize index\r\n    if (Number.isNaN(this.currIndex)\r\n        || this.currIndex < 0\r\n        || this.currIndex >= this.getNumItems()) {\r\n      this.currIndex = 0;\r\n    }\r\n\r\n    if (!this.gestures.supportsTouch) {\r\n      // enable mouse features if no touch support detected\r\n      this.mouseDetected();\r\n    }\r\n\r\n    // causes forced synchronous layout\r\n    this.updateSize();\r\n\r\n    this.offset.y = window.pageYOffset;\r\n\r\n    this._initialItemData = this.getItemData(this.currIndex);\r\n    this.dispatch('gettingData', {\r\n      index: this.currIndex,\r\n      data: this._initialItemData,\r\n      slide: undefined\r\n    });\r\n\r\n    // *Layout* - calculate size and position of elements here\r\n    this._initialThumbBounds = this.getThumbBounds();\r\n    this.dispatch('initialLayout');\r\n\r\n    this.on('openingAnimationEnd', () => {\r\n      this.mainScroll.itemHolders[0].el.style.display = 'block';\r\n      this.mainScroll.itemHolders[2].el.style.display = 'block';\r\n\r\n      // Add content to the previous and next slide\r\n      this.setContent(this.mainScroll.itemHolders[0], this.currIndex - 1);\r\n      this.setContent(this.mainScroll.itemHolders[2], this.currIndex + 1);\r\n\r\n      this.appendHeavy();\r\n\r\n      this.contentLoader.updateLazy();\r\n\r\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\r\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\r\n      this.dispatch('bindEvents');\r\n    });\r\n\r\n    // set content for center slide (first time)\r\n    this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\r\n    this.dispatch('change');\r\n\r\n    this.opener.open();\r\n\r\n    this.dispatch('afterInit');\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Get looped slide index\r\n   * (for example, -1 will return the last slide)\r\n   *\r\n   * @param {number} index\r\n   */\r\n  getLoopedIndex(index) {\r\n    const numSlides = this.getNumItems();\r\n\r\n    if (this.options.loop) {\r\n      if (index > numSlides - 1) {\r\n        index -= numSlides;\r\n      }\r\n\r\n      if (index < 0) {\r\n        index += numSlides;\r\n      }\r\n    }\r\n\r\n    index = clamp(index, 0, numSlides - 1);\r\n\r\n    return index;\r\n  }\r\n\r\n  appendHeavy() {\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.appendHeavy();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Change the slide\r\n   * @param {number} index New index\r\n   */\r\n  goTo(index) {\r\n    this.mainScroll.moveIndexBy(\r\n      this.getLoopedIndex(index) - this.potentialIndex\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Go to the next slide.\r\n   */\r\n  next() {\r\n    this.goTo(this.potentialIndex + 1);\r\n  }\r\n\r\n  /**\r\n   * Go to the previous slide.\r\n   */\r\n  prev() {\r\n    this.goTo(this.potentialIndex - 1);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js zoomTo\r\n   *\r\n   * @param {Parameters<Slide['zoomTo']>} args\r\n   */\r\n  zoomTo(...args) {\r\n    this.currSlide.zoomTo(...args);\r\n  }\r\n\r\n  /**\r\n   * @see slide/slide.js toggleZoom\r\n   */\r\n  toggleZoom() {\r\n    this.currSlide.toggleZoom();\r\n  }\r\n\r\n  /**\r\n   * Close the gallery.\r\n   * After closing transition ends - destroy it\r\n   */\r\n  close() {\r\n    if (!this.opener.isOpen || this.isDestroying) {\r\n      return;\r\n    }\r\n\r\n    this.isDestroying = true;\r\n\r\n    this.dispatch('close');\r\n\r\n    this.events.removeAll();\r\n    this.opener.close();\r\n  }\r\n\r\n  /**\r\n   * Destroys the gallery:\r\n   * - instantly closes the gallery\r\n   * - unbinds events,\r\n   * - cleans intervals and timeouts\r\n   * - removes elements from DOM\r\n   */\r\n  destroy() {\r\n    if (!this.isDestroying) {\r\n      this.options.showHideAnimationType = 'none';\r\n      this.close();\r\n      return;\r\n    }\r\n\r\n    this.dispatch('destroy');\r\n\r\n    this.listeners = null;\r\n\r\n    this.scrollWrap.ontouchmove = null;\r\n    this.scrollWrap.ontouchend = null;\r\n\r\n    this.element.remove();\r\n\r\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\r\n      if (itemHolder.slide) {\r\n        itemHolder.slide.destroy();\r\n      }\r\n    });\r\n\r\n    this.contentLoader.destroy();\r\n    this.events.removeAll();\r\n  }\r\n\r\n  /**\r\n   * Refresh/reload content of a slide by its index\r\n   *\r\n   * @param {number} slideIndex\r\n   */\r\n  refreshSlideContent(slideIndex) {\r\n    this.contentLoader.removeByIndex(slideIndex);\r\n    this.mainScroll.itemHolders.forEach((itemHolder, i) => {\r\n      let potentialHolderIndex = this.currSlide.index - 1 + i;\r\n      if (this.canLoop()) {\r\n        potentialHolderIndex = this.getLoopedIndex(potentialHolderIndex);\r\n      }\r\n      if (potentialHolderIndex === slideIndex) {\r\n        // set the new slide content\r\n        this.setContent(itemHolder, slideIndex, true);\r\n\r\n        // activate the new slide if it's current\r\n        if (i === 1) {\r\n          /** @type {Slide} */\r\n          this.currSlide = itemHolder.slide;\r\n          itemHolder.slide.setIsActive(true);\r\n        }\r\n      }\r\n    });\r\n\r\n    this.dispatch('change');\r\n  }\r\n\r\n\r\n  /**\r\n   * Set slide content\r\n   *\r\n   * @param {ItemHolder} holder mainScroll.itemHolders array item\r\n   * @param {number} index Slide index\r\n   * @param {boolean=} force If content should be set even if index wasn't changed\r\n   */\r\n  setContent(holder, index, force) {\r\n    if (this.canLoop()) {\r\n      index = this.getLoopedIndex(index);\r\n    }\r\n\r\n    if (holder.slide) {\r\n      if (holder.slide.index === index && !force) {\r\n        // exit if holder already contains this slide\r\n        // this could be common when just three slides are used\r\n        return;\r\n      }\r\n\r\n      // destroy previous slide\r\n      holder.slide.destroy();\r\n      holder.slide = null;\r\n    }\r\n\r\n    // exit if no loop and index is out of bounds\r\n    if (!this.canLoop() && (index < 0 || index >= this.getNumItems())) {\r\n      return;\r\n    }\r\n\r\n    const itemData = this.getItemData(index);\r\n    holder.slide = new Slide(itemData, index, this);\r\n\r\n    // set current slide\r\n    if (index === this.currIndex) {\r\n      this.currSlide = holder.slide;\r\n    }\r\n\r\n    holder.slide.append(holder.el);\r\n  }\r\n\r\n  getViewportCenterPoint() {\r\n    return {\r\n      x: this.viewportSize.x / 2,\r\n      y: this.viewportSize.y / 2\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Update size of all elements.\r\n   * Executed on init and on page resize.\r\n   *\r\n   * @param {boolean=} force Update size even if size of viewport was not changed.\r\n   */\r\n  updateSize(force) {\r\n    // let item;\r\n    // let itemIndex;\r\n\r\n    if (this.isDestroying) {\r\n      // exit if PhotoSwipe is closed or closing\r\n      // (to avoid errors, as resize event might be delayed)\r\n      return;\r\n    }\r\n\r\n    //const newWidth = this.scrollWrap.clientWidth;\r\n    //const newHeight = this.scrollWrap.clientHeight;\r\n\r\n    const newViewportSize = getViewportSize(this.options, this);\r\n\r\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\r\n      // Exit if dimensions were not changed\r\n      return;\r\n    }\r\n\r\n    //this._prevViewportSize.x = newWidth;\r\n    //this._prevViewportSize.y = newHeight;\r\n    equalizePoints(this._prevViewportSize, newViewportSize);\r\n\r\n    this.dispatch('beforeResize');\r\n\r\n    equalizePoints(this.viewportSize, this._prevViewportSize);\r\n\r\n    this._updatePageScrollOffset();\r\n\r\n    this.dispatch('viewportSize');\r\n\r\n    // Resize slides only after opener animation is finished\r\n    // and don't re-calculate size on inital size update\r\n    this.mainScroll.resize(this.opener.isOpen);\r\n\r\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\r\n      this.mouseDetected();\r\n    }\r\n\r\n    this.dispatch('resize');\r\n  }\r\n\r\n  /**\r\n   * @param {number} opacity\r\n   */\r\n  applyBgOpacity(opacity) {\r\n    this.bgOpacity = Math.max(opacity, 0);\r\n    this.bg.style.opacity = String(this.bgOpacity * this.options.bgOpacity);\r\n  }\r\n\r\n  /**\r\n   * Whether mouse is detected\r\n   */\r\n  mouseDetected() {\r\n    if (!this.hasMouse) {\r\n      this.hasMouse = true;\r\n      this.element.classList.add('pswp--has_mouse');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page resize event handler\r\n   *\r\n   * @private\r\n   */\r\n  _handlePageResize() {\r\n    this.updateSize();\r\n\r\n    // In iOS webview, if element size depends on document size,\r\n    // it'll be measured incorrectly in resize event\r\n    //\r\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\r\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\r\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\r\n      setTimeout(() => {\r\n        this.updateSize();\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Page scroll offset is used\r\n   * to get correct coordinates\r\n   * relative to PhotoSwipe viewport.\r\n   *\r\n   * @private\r\n   */\r\n  _updatePageScrollOffset() {\r\n    this.setScrollOffset(0, window.pageYOffset);\r\n  }\r\n\r\n  /**\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\r\n  setScrollOffset(x, y) {\r\n    this.offset.x = x;\r\n    this.offset.y = y;\r\n    this.dispatch('updateScrollOffset');\r\n  }\r\n\r\n  /**\r\n   * Create main HTML structure of PhotoSwipe,\r\n   * and add it to DOM\r\n   *\r\n   * @private\r\n   */\r\n  _createMainStructure() {\r\n    // root DOM element of PhotoSwipe (.pswp)\r\n    this.element = createElement('pswp');\r\n    this.element.setAttribute('tabindex', '-1');\r\n    this.element.setAttribute('role', 'dialog');\r\n\r\n    // template is legacy prop\r\n    this.template = this.element;\r\n\r\n    // Background is added as a separate element,\r\n    // as animating opacity is faster than animating rgba()\r\n    this.bg = createElement('pswp__bg', false, this.element);\r\n    this.scrollWrap = createElement('pswp__scroll-wrap', 'section', this.element);\r\n    this.container = createElement('pswp__container', false, this.scrollWrap);\r\n\r\n    // aria pattern: carousel\r\n    this.scrollWrap.setAttribute('aria-roledescription', 'carousel');\r\n    this.container.setAttribute('aria-live', 'off');\r\n    this.container.setAttribute('id', 'pswp__items');\r\n\r\n    this.mainScroll.appendHolders();\r\n\r\n    this.ui = new UI(this);\r\n    this.ui.init();\r\n\r\n    // append to DOM\r\n    (this.options.appendToEl || document.body).appendChild(this.element);\r\n  }\r\n\r\n\r\n  /**\r\n   * Get position and dimensions of small thumbnail\r\n   *   {x:,y:,w:}\r\n   *\r\n   * Height is optional (calculated based on the large image)\r\n   */\r\n  getThumbBounds() {\r\n    return getThumbBounds(\r\n      this.currIndex,\r\n      this.currSlide ? this.currSlide.data : this._initialItemData,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * If the PhotoSwipe can have continious loop\r\n   * @returns Boolean\r\n   */\r\n  canLoop() {\r\n    return (this.options.loop && this.getNumItems() > 2);\r\n  }\r\n\r\n  /**\r\n   * @param {PhotoSwipeOptions} options\r\n   * @private\r\n   */\r\n  _prepareOptions(options) {\r\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\r\n      options.showHideAnimationType = 'none';\r\n      options.zoomAnimationDuration = 0;\r\n    }\r\n\r\n    /** @type {PhotoSwipeOptions}*/\r\n    this.options = {\r\n      ...defaultOptions,\r\n      ...options\r\n    };\r\n  }\r\n}\n\nexport { PhotoSwipe as default };\n//# sourceMappingURL=photoswipe.esm.js.map\n","import PhotoSwipeLightbox from 'photoswipe/lightbox';\nimport PhotoSwipe from 'photoswipe';\nimport style from 'photoswipe/style.css?inline';\ndocument.querySelector('#textContainer').appendChild(<style>{style}</style>);\nexport const imageViewer = (gallery) => {\n  const lightbox = new PhotoSwipeLightbox({\n    gallery,\n    children: 'a',\n    pswpModule: PhotoSwipe,\n  });\n  lightbox.init();\n};\n"],"names":["createElement","className","tagName","appendToEl","el","document","appendChild","setWidthHeight","w","h","style","width","height","LOAD_STATE","getElementsFromOption","option","legacySelector","parent","elements","Element","NodeList","Array","isArray","from","selector","querySelectorAll","isSafari","navigator","vendor","match","Eventable$1","constructor","this","_listeners","_filters","pswp","options","addFilter","name","fn","priority","push","sort","f1","f2","removeFilter","filter","applyFilters","args","forEach","apply","on","off","listener","dispatch","details","event","type","Object","assign","preventDefault","defaultPrevented","call","parsePaddingOption","prop","viewportSize","itemData","index","paddingValue","paddingFn","padding","legacyPropName","toUpperCase","slice","ZoomLevel$1","update","maxWidth","maxHeight","panAreaSize","elementSize","x","y","hRatio","vRatio","fit","Math","min","fill","vFill","initial","_getInitial","secondary","_getSecondary","max","_getMax","zoomLevels","slideData","_parseZoomLevelOption","optionPrefix","optionName","optionValue","Number","currZoomLevel","lazyLoadData","instance","content","createContentFromData","lazyLoad","getViewportSizeFn","newViewportSize","documentElement","clientWidth","window","innerHeight","getViewportSize","getPanAreaSize","zoomLevel","ZoomLevel","setDisplayedSize","ceil","Eventable","getNumItems","numItems","dataSource","length","items","_getGalleryDOMElements","gallery","data","element","displayedImageWidth","displayedImageHeight","isAttached","hasSlide","state","src","removePlaceholder","placeholder","keepPlaceholder","setTimeout","destroy","load","isLazy","reload","slide","usePlaceholder","placeholderEl","parentElement","container","prepend","placeholderSrc","msrc","isFirstSlide","imageSrc","decoding","alt","setAttribute","transformOrigin","transform","scale","propValue","toTransformString","parentNode","remove","isImageContent","loadImage","innerHTML","html","updateContentSize","imageElement","updateSrcsetSizes","srcset","complete","onLoaded","onload","onerror","onError","setSlide","isActive","heavyAppended","append","displayError","isError","isLoading","isInitialSizeUpdate","isZoomable","image","sizesWidth","dataset","largestUsedSize","parseInt","sizes","String","errorMsgEl","innerText","errorMsg","supportsDecode","isDecoding","decode","catch","finally","appendImage","activate","holderElement","deactivate","getItemData","dataSourceItem","_domElementToItemData","galleryElement","children","childSelector","linkEl","querySelector","pswpSrc","href","pswpSrcset","pswpWidth","pswpHeight","pswpType","thumbnailEl","currentSrc","getAttribute","pswpCropped","cropped","thumbCropped","PhotoSwipeLightbox","PhotoSwipeBase","super","_uid","init","onThumbnailsClick","bind","gallerySelector","addEventListener","e","which","ctrlKey","metaKey","altKey","shiftKey","specialKeyUsed","onLine","initialPoint","clientX","clientY","clickedIndex","getClickedIndex","loadAndOpen","getClickedIndexFn","clickedTarget","clickedChildIndex","currentTarget","findIndex","child","contains","initialPointerPos","shouldOpen","preload","promiseArray","pswpModuleType","pswpModule","isPswpClass","prototype","goTo","Promise","resolve","Error","openPromise","preloadFirstSlide","_preloadedContent","lazyLoadSlide","uid","all","then","iterableModules","mainModule","_openPhotoswipe","module","default","keys","contentLoader","addToCache","removeEventListener","equalizePoints","p1","p2","id","roundPoint","p","round","getDistanceBetween","abs","sqrt","pointsEqual","clamp","val","setTransform","defaultCSSEasing","setTransitionStyle","duration","ease","transition","supportsPassive","defineProperty","get","DOMEvents","_pool","add","target","passive","_toggleListener","removeAll","poolItem","unbind","skipPool","methodName","split","eType","eventOptions","PanBounds","center","reset","_updateAxis","axis","elSize","correctPan","panOffset","Slide","currIndex","currentResolution","opener","isOpen","pan","getContentBySlide","bounds","prevDisplayedWidth","prevDisplayedHeight","setIsActive","calculateSize","appendHeavy","zoomAndPanToInitial","applyCurrentZoomPan","mainScroll","isShifted","resize","panTo","force","scaleMultiplier","sizeChanged","getPlaceholderElement","zoomTo","destZoomLevel","centerPoint","transitionDuration","ignoreBounds","animations","stopAllPan","prevZoomLevel","setZoomLevel","calculateZoomToPanOffset","finishTransition","_setResolution","startTransition","isPan","getCurrentTransform","onComplete","easing","toggleZoom","zoomAnimationDuration","point","getViewportCenterPoint","zoomFactor","panX","panY","isPannable","_applyZoomTransform","currSlide","zoom","newResolution","DragHandler","gestures","startPan","start","stopAll","change","prevP1","dragAxis","closeOnVerticalDrag","isMultitouch","_setPanWithFriction","bgOpacity","_getVerticalDragRatio","applyBgOpacity","_panOrMoveMainScroll","end","velocity","indexDiff","currentSlideVisibilityRatio","getCurrSlideX","moveIndexBy","correctZoomPan","_finishPanGestureForAxis","panPos","restoreBgOpacity","projectedPosition","initialVelocity","decelerationRate","project","vDragRatio","projectedVDragRatio","close","correctedPanPosition","dampingRatio","initialBgOpacity","totalPanDist","startSpring","onUpdate","pos","animationProgressRatio","floor","delta","newMainScrollX","moveTo","newPan","allowPanToNext","currSlideMainScrollX","mainScrollShiftDiff","isLeftToRight","isRightToLeft","potentialPan","customFriction","getZoomPointsCenter","ZoomHandler","_startPan","_startZoomPoint","_zoomPoint","_startZoomLevel","_wasOverFitZoomLevel","startP1","startP2","minZoomLevel","maxZoomLevel","pinchToClose","_calculatePanForZoomLevel","ignoreGesture","destinationZoomLevel","currZoomLevelNeedsChange","initialPan","destinationPan","panNeedsChange","naturalFrequency","now","newZoomLevel","didTapOnMainContent","closest","TapHandler","click","originalEvent","targetClassList","isImageClick","isBackgroundClick","_doClickOrTapAction","tap","doubleTap","actionName","actionFullName","clickToCloseNonZoomable","classList","toggle","Gestures","prevP2","_lastStartP1","_intervalP1","_numActivePoints","_ongoingPointers","_touchEventEnabled","_pointerEventEnabled","PointerEvent","supportsTouch","maxTouchPoints","drag","tapHandler","events","scrollWrap","_onClick","_bindEvents","ontouchmove","ontouchend","pref","down","up","cancel","cancelEvent","onPointerDown","onPointerMove","onPointerUp","isMousePointer","pointerType","button","mouseDetected","_preventPointerEventBehaviour","_updatePoints","pointerDown","_clearTapTimer","isDragging","isZooming","_finishDrag","_updateStartPoints","_rafStopLoop","_rafRenderLoop","_calculateDragDirection","_intervalTime","Date","_velocityCalculated","_updateVelocity","_finishTap","_updatePrevPoints","raf","requestAnimationFrame","time","_getVelocity","indexOf","tapDelay","doubleTapAction","_tapTimer","clearTimeout","displacement","cancelAnimationFrame","pointerEvent","pointerIndex","ongoingPoiner","pointerId","splice","_convertEventPosToPoint","touchEvent","touches","diff","axisToCheck","pageX","offset","pageY","identifier","stopPropagation","MainScroll","slideWidth","itemHolders","resetPosition","resizeSlides","newSlideWidth","spacing","slideWidthChanged","itemHolder","_containerShiftIndex","_currPositionIndex","_prevPositionIndex","appendHolders","i","display","canBeSwiped","animate","velocityX","newIndex","potentialIndex","numSlides","canLoop","getLoopedIndex","distance","stopMainScroll","destinationX","isMainScroll","updateCurrItem","currDiff","currDistance","positionDifference","tempHolder","diffAbs","shift","setContent","pop","unshift","updateLazy","dragging","newSlideIndexOffset","Keyboard","_focusRoot","_onFocusIn","_onKeyDown","lastActiveElement","returnFocus","_wasFocused","focus","keydownAction","isForward","keyCode","escKey","arrowKeys","template","CSSAnimation","props","onFinish","_target","_onComplete","_onTransitionEnd","_helperTimeout","_finalizeAnimation","_finished","SpringEaser","_dampingRatio","_naturalFrequency","_dampedFrequency","easeFrame","deltaPosition","deltaTime","coeff","naturalDumpingPow","E","dumpedFCos","cos","dumpedFSin","sin","SpringAnimation","easer","prevTime","animationLoop","_raf","Animations","activeAnimations","_start","isSpring","animation","stop","isPanRunning","some","ScrollWheel","_onWheel","deltaX","deltaY","wheelToZoom","deltaMode","UIElement","elementHTML","isButton","toLowerCase","title","ariaLabel","htmlData","isCustomSVG","svgData","out","join","size","outlineID","inner","addElementHTML","onInit","onClick","onclick","appendTo","topBar","initArrowButton","isNextButton","loop","disabled","arrowPrev","order","arrowNext","closeButton","zoomButton","loadingIndicator","indicatorElement","isVisible","delayTimeout","toggleIndicatorClass","setIndicatorVisibility","visible","updatePreloaderVisibility","preloaderDelay","ui","counterIndicator","counterElement","indexIndicatorSep","setZoomedIn","isZoomedIn","UI","_lastUpdatedZoomLevel","isRegistered","uiElementsData","a","b","uiElementData","registerElement","_onZoomPanUpdate","elementData","isClosing","currZoomLevelDiff","imageClickAction","PhotoSwipeEvent","Placeholder","Content","ContentLoader","limit","_cachedItems","loadSlideByIndex","getContentByIndex","removeByIndex","indexToRemove","item","find","MIN_OPACITY","Opener","isClosed","_prepareOpen","_thumbBounds","open","isOpening","_duration","hideAnimationDuration","maxWidthToAnimate","_applyStartProps","_croppedZoom","showAnimationDuration","showHideAnimationType","showHideOpacity","_initialThumbBounds","getThumbBounds","_placeholder","_useAnimation","_animateZoom","_animateRootOpacity","_animateBgOpacity","_opacityElement","bg","opacity","innerRect","_cropContainer1","_cropContainer2","overflow","_setClosedStateZoomPan","willChange","decoded","isDelaying","img","reject","_initiate","setProperty","_animateToOpenState","_animateToClosedState","_onAnimationComplete","_animateTo","containerOnePanX","containerOnePanY","containerTwoPanX","containerTwoPanY","animProps","defaultOptions","bgClickAction","tapAction","PhotoSwipe","_prepareOptions","_prevViewportSize","keyboard","isDestroying","_createMainStructure","rootClasses","mainClass","scrollWheel","isNaN","updateSize","pageYOffset","_initialItemData","_handlePageResize","_updatePageScrollOffset","next","prev","listeners","refreshSlideContent","slideIndex","potentialHolderIndex","holder","hasMouse","matchMedia","matches","test","userAgent","setScrollOffset","body","thumbBounds","thumbnail","thumbSelector","imageWidth","imageHeight","thumbAreaRect","getBoundingClientRect","fillZoomLevel","offsetX","offsetY","left","top","getCroppedBoundsByElement","getBoundsByElement","imageViewer"],"mappings":";;;;IAiBA,SAASA,EAAcC,EAAWC,EAASC,GACzC,MAAMC,EAAKC,SAASL,cAAcE,GAAW,OACzCD,OAAAA,IACFG,EAAGH,UAAYA,GAEbE,GACFA,EAAWG,YAAYF,GAGlBA,CACT,CA8BA,SAASG,EAAeH,EAAII,EAAGC,GAC7BL,EAAGM,MAAMC,MAAsB,iBAANH,EAAmBA,EAAI,KAAQA,EACxDJ,EAAGM,MAAME,OAAuB,iBAANH,EAAmBA,EAAI,KAAQA,CAC3D,CAIA,MAAMI,EACE,OADFA,EAEK,UAFLA,EAGI,SAHJA,EAIG,QAwBT,SAASC,EAAsBC,EAAQC,EAAgBC,EAASZ,UAE9D,IAAIa,EAAW,GAEf,GAAIH,aAAkBI,QACpBD,EAAW,CAACH,QAAM,GACTA,aAAkBK,UAAYC,MAAMC,QAAQP,GACrDG,EAAWG,MAAME,KAAKR,OACjB,CACL,MAAMS,EAA6B,iBAAXT,EAAsBA,EAASC,EACnDQ,IACFN,EAAWG,MAAME,KAAKN,EAAOQ,iBAAiBD,IAAS,CAIpDN,OAAAA,CACT,CAkBA,SAASQ,IACP,SAAUC,UAAUC,SAAUD,UAAUC,OAAOC,MAAM,UACvD,CAgNA,IAqBAC,EAAA,MACEC,cAIOC,KAAAC,WAAa,GAKlBD,KAAKE,SAAW,GAGhBF,KAAKG,UAAO,EAGZH,KAAKI,aAAU,CAChB,CAQDC,UAAUC,EAAMC,EAAIC,EAAW,KACxBR,KAAKE,SAASI,KACjBN,KAAKE,SAASI,GAAQ,IAGxBN,KAAKE,SAASI,GAAMG,KAAK,CAAEF,GAAAA,EAAIC,SAAAA,IAC/BR,KAAKE,SAASI,GAAMI,MAAK,CAACC,EAAIC,IAAOD,EAAGH,SAAWI,EAAGJ,WAElDR,KAAKG,MACPH,KAAKG,KAAKE,UAAUC,EAAMC,EAAIC,EAEjC,CAODK,aAAaP,EAAMC,GACbP,KAAKE,SAASI,KAEhBN,KAAKE,SAASI,GAAQN,KAAKE,SAASI,GAAMQ,QAAOA,GAAWA,EAAOP,KAAOA,KAGxEP,KAAKG,MACPH,KAAKG,KAAKU,aAAaP,EAAMC,EAEhC,CAQDQ,aAAaT,KAASU,GAChB,OAAAhB,KAAKE,SAASI,IAChBN,KAAKE,SAASI,GAAMW,SAASH,IAE3BE,EAAK,GAAKF,EAAOP,GAAGW,MAAMlB,KAAMgB,EAAI,IAGjCA,EAAK,EACb,CAODG,GAAGb,EAAMC,GACFP,KAAKC,WAAWK,KACnBN,KAAKC,WAAWK,GAAQ,IAE1BN,KAAKC,WAAWK,GAAMG,KAAKF,GAKvBP,KAAKG,MACPH,KAAKG,KAAKgB,GAAGb,EAAMC,EAEtB,CAODa,IAAId,EAAMC,GACJP,KAAKC,WAAWK,KAElBN,KAAKC,WAAWK,GAAQN,KAAKC,WAAWK,GAAMQ,QAAOO,GAAad,IAAOc,KAGvErB,KAAKG,MACPH,KAAKG,KAAKiB,IAAId,EAAMC,EAEvB,CAQDe,SAAShB,EAAMiB,GACb,GAAIvB,KAAKG,KACP,OAAOH,KAAKG,KAAKmB,SAAShB,EAAMiB,GAG5BC,MAAAA,EAAAA,IAzIV,MAKEzB,YAAY0B,EAAMF,GAChBvB,KAAKyB,KAAOA,EACRF,GACFG,OAAOC,OAAO3B,KAAMuB,EAEvB,CAEDK,iBACE5B,KAAK6B,kBAAmB,CACzB,GA2HqEvB,EAAMiB,GAE1E,OAAKvB,KAAKC,YAIND,KAAKC,WAAWK,IAClBN,KAAKC,WAAWK,GAAMW,SAASI,IAC7BA,EAASS,KAAK9B,KAAMwB,EAAK,IAItBA,CACR,GAmnBH,SAASO,EAAmBC,EAAM5B,EAAS6B,EAAcC,EAAUC,GAE7DC,IAAAA,EAEJ,GAAIhC,EAAQiC,UACVD,EAAehC,EAAQiC,UAAUJ,EAAcC,EAAUC,GAAOH,QAAI,GAC3D5B,EAAQkC,QACjBF,EAAehC,EAAQkC,QAAQN,OAC1B,CACCO,MAAAA,EAAiB,UAAYP,EAAK,GAAGQ,cAAgBR,EAAKS,MAAM,GAElErC,EAAQmC,KAEVH,EAAehC,EAAQmC,GAAc,CAIzC,OAAOH,GAAgB,CACzB,CA+BA,IAAAM,EAAA,MAOE3C,YAAYK,EAAS8B,EAAUC,EAAOhC,GAC/BH,KAAAG,KAAOA,EACZH,KAAKI,QAAUA,EACfJ,KAAKkC,SAAWA,EAChBlC,KAAKmC,MAAQA,CACd,CAWDQ,OAAOC,EAAUC,EAAWC,GAC1B9C,KAAK+C,YAAc,CACjBC,EAAGJ,EACHK,EAAGJ,GAGL7C,KAAK8C,YAAcA,EAEnB,MAAMI,EAASlD,KAAK8C,YAAYE,EAAIhD,KAAK+C,YAAYC,EAC/CG,EAASnD,KAAK8C,YAAYG,EAAIjD,KAAK+C,YAAYE,EAErDjD,KAAKoD,IAAMC,KAAKC,IAAI,EAAGJ,EAASC,EAASD,EAASC,GAClDnD,KAAKuD,KAAOF,KAAKC,IAAI,EAAGJ,EAASC,EAASD,EAASC,GAInDnD,KAAKwD,MAAQH,KAAKC,IAAI,EAAGH,GAEzBnD,KAAKyD,QAAUzD,KAAK0D,cACpB1D,KAAK2D,UAAY3D,KAAK4D,gBACtB5D,KAAK6D,IAAMR,KAAKQ,IACd7D,KAAKyD,QACLzD,KAAK2D,UACL3D,KAAK8D,WAGP9D,KAAKsD,IAAMD,KAAKC,IACdtD,KAAKoD,IACLpD,KAAKyD,QACLzD,KAAK2D,WAGH3D,KAAKG,MACPH,KAAKG,KAAKmB,SAAS,mBAAoB,CAAEyC,WAAY/D,KAAMgE,UAAWhE,KAAKkC,UAE9E,CAQD+B,sBAAsBC,GAEdC,MAAAA,EAAwFD,EAAe,YACvGE,EAAcpE,KAAKI,QAAQ+D,GAE5BC,GAAAA,EAIL,MAA2B,mBAAhBA,EACFA,EAAYpE,MAGD,SAAhBoE,EACKpE,KAAKuD,KAGM,QAAhBa,EACKpE,KAAKoD,IAGPiB,OAAOD,EACf,CAWDR,gBACMU,IAAAA,EAAgBtE,KAAKiE,sBAAsB,aAE/C,OAAIK,IAKJA,EAAgBjB,KAAKC,IAAI,EAAc,EAAXtD,KAAKoD,KAE7BkB,EAAgBtE,KAAK+C,YAAYC,EAzHjB,MA0HlBsB,EA1HkB,IA0HgBtE,KAAK+C,YAAYC,GAG9CsB,EACR,CAQDZ,cACE,OAAO1D,KAAKiE,sBAAsB,YAAcjE,KAAKoD,GACtD,CAUDU,UAGE,OAFsB9D,KAAKiE,sBAAsB,QAQ1CZ,KAAKQ,IAAI,EAAc,EAAX7D,KAAKoD,IACzB,GAaH,SAASmB,EAAarC,EAAUsC,EAAUrC,GAExC,MAAMsC,EAAUD,EAASE,sBAAsBxC,EAAUC,GAErD,IAACsC,IAAYA,EAAQE,SACvB,OAGI,MAAEvE,QAAAA,GAAYoE,EAKdvC,EAAeuC,EAASvC,cAjRhC,SAAyB7B,EAASD,GAChC,GAAIC,EAAQwE,kBAAmB,CAC7B,MAAMC,EAAkBzE,EAAQwE,kBAAkBxE,EAASD,GACvD0E,GAAAA,EACKA,OAAAA,CAAA,CAIJ,MAAA,CACL7B,EAAG3E,SAASyG,gBAAgBC,YAM5B9B,EAAG+B,OAAOC,YAEd,CAgQgDC,CAAgB9E,EAASoE,GACjE1B,EAlMR,SAAwB1C,EAAS6B,EAAcC,EAAUC,GAChD,MAAA,CACLa,EAAGf,EAAae,EACZjB,EAAmB,OAAQ3B,EAAS6B,EAAcC,EAAUC,GAC5DJ,EAAmB,QAAS3B,EAAS6B,EAAcC,EAAUC,GACjEc,EAAGhB,EAAagB,EACZlB,EAAmB,MAAO3B,EAAS6B,EAAcC,EAAUC,GAC3DJ,EAAmB,SAAU3B,EAAS6B,EAAcC,EAAUC,GAEtE,CAyLsBgD,CAAe/E,EAAS6B,EAAcC,EAAUC,GAE9DiD,EAAY,IAAIC,EAAUjF,EAAS8B,GAAY,GACrDkD,OAAAA,EAAUzC,OAAO8B,EAAQ9F,MAAO8F,EAAQ7F,OAAQkE,GAEhD2B,EAAQE,WACRF,EAAQa,iBACNjC,KAAKkC,KAAKd,EAAQ9F,MAAQyG,EAAU3B,SACpCJ,KAAKkC,KAAKd,EAAQ7F,OAASwG,EAAU3B,UAGhCgB,CACT,OA+BA,cAA6Be,EAM3BC,cACMC,IAAAA,EACJ,MAAQC,WAAAA,GAAe3F,KAAKI,QACvBuF,EAEM,WAAYA,EAErBD,EAAWC,EAAWC,OACb,YAAaD,IAEjBA,EAAWE,QACdF,EAAWE,MAAQ7F,KAAK8F,uBAAuBH,EAAWI,UAGxDJ,EAAWE,QACbH,EAAWC,EAAWE,MAAMD,SAX9BF,EAAW,EAgBPlE,MAAAA,EAAQxB,KAAKsB,SAAS,WAAY,CACtCqE,WAAAA,EACAD,SAAAA,IAEF,OAAO1F,KAAKe,aAAa,WAAYS,EAAMkE,SAAUC,EACtD,CAMDjB,sBAAsBV,EAAW7B,GAE/B,OAAO,IAj2BX,MAMEpC,YAAYmC,EAAUsC,EAAUrC,GAC9BnC,KAAKwE,SAAWA,EAChBxE,KAAKgG,KAAO9D,EACZlC,KAAKmC,MAAQA,EAGbnC,KAAKiG,aAAU,EAEfjG,KAAKkG,oBAAsB,EAC3BlG,KAAKmG,qBAAuB,EAE5BnG,KAAKrB,MAAQ0F,OAAOrE,KAAKgG,KAAKxH,IAAM6F,OAAOrE,KAAKgG,KAAKrH,QAAU,EAC/DqB,KAAKpB,OAASyF,OAAOrE,KAAKgG,KAAKvH,IAAM4F,OAAOrE,KAAKgG,KAAKpH,SAAW,EAEjEoB,KAAKoG,YAAa,EAClBpG,KAAKqG,UAAW,EAEhBrG,KAAKsG,MAAQzH,EAETmB,KAAKgG,KAAKvE,KACZzB,KAAKyB,KAAOzB,KAAKgG,KAAKvE,KACbzB,KAAKgG,KAAKO,IACnBvG,KAAKyB,KAAO,QAEZzB,KAAKyB,KAAO,OAGdzB,KAAKwE,SAASlD,SAAS,cAAe,CAAEmD,QAASzE,MAClD,CAEDwG,oBACMxG,KAAKyG,cAAgBzG,KAAK0G,mBAE5BC,YAAW,KACL3G,KAAKyG,cACPzG,KAAKyG,YAAYG,UACjB5G,KAAKyG,YAAc,KAAA,GAEpB,IAEN,CAQDI,KAAKC,EAAQC,GACP,GAAA/G,KAAKgH,OAAShH,KAAKiH,iBACrB,GAAKjH,KAAKyG,YAYH,CACCS,MAAAA,EAAgBlH,KAAKyG,YAAYR,QAEnCiB,IAAkBA,EAAcC,eAClCnH,KAAKgH,MAAMI,UAAUC,QAAQH,EAhBV,KAAA,CACfI,MAAAA,EAAiBtH,KAAKwE,SAASzD,aACnC,oBAGCf,KAAKgG,KAAKuB,OAAQvH,KAAKgH,MAAMQ,eAAgBxH,KAAKgG,KAAKuB,KACxDvH,MAEFA,KAAKyG,YAAc,IA7H3B,MAKE1G,YAAY0H,EAAUL,GAGpBpH,KAAKiG,QAAUjI,EACb,mCACAyJ,EAAW,MAAQ,GACnBL,GAGEK,IAEDzH,KAAKiG,QAASyB,SAAW,QAEzB1H,KAAKiG,QAAS0B,IAAM,GAEpB3H,KAAKiG,QAASM,IAAMkB,EACrBzH,KAAKiG,QAAQ2B,aAAa,OAAQ,iBAGpC5H,KAAKiG,QAAQ2B,aAAa,cAAe,OAC1C,CAMDtC,iBAAiB3G,EAAOC,GACjBoB,KAAKiG,UAImB,QAAzBjG,KAAKiG,QAAQ/H,SAIfK,EAAeyB,KAAKiG,QAAS,IAAK,QAClCjG,KAAKiG,QAAQvH,MAAMmJ,gBAAkB,MACrC7H,KAAKiG,QAAQvH,MAAMoJ,UA/ezB,SAA2B9E,EAAGC,EAAG8E,GAC/B,IAAIC,EAAY,yBAIhB,YAAc,IAAVD,IACFC,GAAa,YACTD,EAAQ,IAAMA,EACd,OAGCC,CACT,CAmeqCC,CAAkB,EAAG,EAAGtJ,EAAQ,MAE/DJ,EAAeyB,KAAKiG,QAAStH,EAAOC,GAEvC,CAEDgI,UACM5G,KAAKiG,QAAQiC,YACflI,KAAKiG,QAAQkC,SAEfnI,KAAKiG,QAAU,IAChB,GAyEOqB,EACAtH,KAAKgH,MAAMI,UACrB,CAUQpH,KAAKiG,UAAYc,GAIjB/G,KAAKwE,SAASlD,SAAS,cAAe,CAAEmD,QAASzE,KAAM8G,OAAAA,IAAUjF,mBAIjE7B,KAAKoI,kBACPpI,KAAKiG,QAAUjI,EAAc,YAAa,OAGtCgC,KAAKkG,qBACPlG,KAAKqI,UAAUvB,KAGjB9G,KAAKiG,QAAUjI,EAAc,iBAC7BgC,KAAKiG,QAAQqC,UAAYtI,KAAKgG,KAAKuC,MAAQ,IAGzCxB,GAAU/G,KAAKgH,OACjBhH,KAAKgH,MAAMwB,mBAAkB,GAEhC,CAODH,UAAUvB,GACF2B,MAAAA,EAA8CzI,KAAK,QAErDA,KAAKwE,SAASlD,SAAS,mBAAoB,CAAEmD,QAASzE,KAAM8G,OAAAA,IAAUjF,mBAI1E7B,KAAK0I,oBAED1I,KAAKgG,KAAK2C,SACZF,EAAaE,OAAS3I,KAAKgG,KAAK2C,QAGlCF,EAAalC,IAAMvG,KAAKgG,KAAKO,IAE7BkC,EAAad,IAAM3H,KAAKgG,KAAK2B,KAAO,GAEpC3H,KAAKsG,MAAQzH,EAET4J,EAAaG,SACf5I,KAAK6I,YAELJ,EAAaK,OAAS,KACpB9I,KAAK6I,UAAQ,EAGfJ,EAAaM,QAAU,KACrB/I,KAAKgJ,SAAO,GAGjB,CAODC,SAASjC,GACPhH,KAAKgH,MAAQA,EACbhH,KAAKqG,UAAW,EAChBrG,KAAKwE,SAAWwC,EAAM7G,IAGvB,CAKD0I,WACO7I,KAAAsG,MAAQzH,EAETmB,KAAKgH,QACPhH,KAAKwE,SAASlD,SAAS,eAAgB,CAAE0F,MAAOhH,KAAKgH,MAAOvC,QAASzE,OAGjEA,KAAKgH,MAAMkC,UACRlJ,KAAKgH,MAAMmC,gBACVnJ,KAAKiG,QAAQiC,aACnBlI,KAAKoJ,SACLpJ,KAAKgH,MAAMwB,mBAAkB,KAG3BxI,KAAKsG,QAAUzH,GAAqBmB,KAAKsG,QAAUzH,IACrDmB,KAAKwG,oBAGV,CAKDwC,UACEhJ,KAAKsG,MAAQzH,EAETmB,KAAKgH,QACPhH,KAAKqJ,eACLrJ,KAAKwE,SAASlD,SAAS,eAAgB,CAAE0F,MAAOhH,KAAKgH,MAAOsC,SAAS,EAAM7E,QAASzE,OACpFA,KAAKwE,SAASlD,SAAS,YAAa,CAAE0F,MAAOhH,KAAKgH,MAAOvC,QAASzE,OAErE,CAKDuJ,YACE,OAAOvJ,KAAKwE,SAASzD,aACnB,mBACAf,KAAKsG,QAAUzH,EACfmB,KAEH,CAEDsJ,UACS,OAAAtJ,KAAKsG,QAAUzH,CACvB,CAKDuJ,iBACE,MAAqB,UAAdpI,KAAKyB,IACb,CAQD6D,iBAAiB3G,EAAOC,GACtB,GAAKoB,KAAKiG,UAINjG,KAAKyG,aACPzG,KAAKyG,YAAYnB,iBAAiB3G,EAAOC,SAIlC4F,SAASlD,SAAS,gBAAiB,CAAEmD,QAASzE,KAAMrB,MAAAA,EAAOC,OAAAA,IAAUiD,mBAI9EtD,EAAeyB,KAAKiG,QAAStH,EAAOC,GAEhCoB,KAAKoI,mBAAqBpI,KAAKsJ,YAAW,CACtCE,MAAAA,GAAwBxJ,KAAKkG,qBAAuBvH,EAE1DqB,KAAKkG,oBAAsBvH,EAC3BqB,KAAKmG,qBAAuBvH,EAExB4K,EACFxJ,KAAKqI,WAAU,GAEfrI,KAAK0I,oBAGH1I,KAAKgH,OAEPhH,KAAKwE,SAASlD,SAAS,kBAAmB,CAAE0F,MAAOhH,KAAKgH,MAAOrI,MAAAA,EAAOC,OAAAA,EAAQ6F,QAASzE,MAAM,CAGlG,CAKDyJ,aACE,OAAOzJ,KAAKwE,SAASzD,aACnB,oBACAf,KAAKoI,kBAAqBpI,KAAKsG,QAAUzH,EACzCmB,KAEH,CAKD0I,oBAWM,GAAA1I,KAAKgG,KAAK2C,OAAQ,CACde,MAAAA,EAAuC1J,KACvC2J,QAAAA,EAAa3J,KAAKwE,SAASzD,aAC/B,mBACAf,KAAKkG,oBACLlG,QAGG0J,EAAME,QAAQC,iBACZF,EAAaG,SAASJ,EAAME,QAAQC,gBAAiB,OAC1DH,EAAMK,MAAQJ,EAAa,KAC3BD,EAAME,QAAQC,gBAAkBG,OAAOL,GAAU,CAGtD,CAKD1C,iBACE,OAAOjH,KAAKwE,SAASzD,aACnB,wBACAf,KAAKoI,iBACLpI,KAEH,CAKD2E,WACM3E,KAAKwE,SAASlD,SAAS,kBAAmB,CAAEmD,QAASzE,OAAQ6B,kBAIjE7B,KAAK6G,MAAK,EACX,CAKDH,kBACE,OAAO1G,KAAKwE,SAASzD,aACnB,uBACAf,KAAKuJ,YACLvJ,KAEH,CAKD4G,UACE5G,KAAKqG,UAAW,EAChBrG,KAAKgH,MAAQ,WAEJxC,SAASlD,SAAS,iBAAkB,CAAEmD,QAASzE,OAAQ6B,mBAIhE7B,KAAKmI,SAEDnI,KAAKyG,cACPzG,KAAKyG,YAAYG,UACjB5G,KAAKyG,YAAc,MAGjBzG,KAAKoI,kBAAoBpI,KAAKiG,UAChCjG,KAAKiG,QAAQ6C,OAAS,KACtB9I,KAAKiG,QAAQ8C,QAAU,KACvB/I,KAAKiG,QAAU,MAElB,CAKDoD,eACE,GAAIrJ,KAAKgH,MAAO,CAEViD,IAAAA,EAAajM,EAAc,mBAC/BiM,EAAWC,UAAYlK,KAAKwE,SAASpE,QAAQ+J,SAC7CF,EAAajK,KAAKwE,SAASzD,aACzB,sBACAkJ,EACAjK,MAEFA,KAAKiG,QAAUjI,EAAc,2CAC7BgC,KAAKiG,QAAQ3H,YAAY2L,GACzBjK,KAAKgH,MAAMI,UAAU8C,UAAY,GACjClK,KAAKgH,MAAMI,UAAU9I,YAAY0B,KAAKiG,SACtCjG,KAAKgH,MAAMwB,mBAAkB,GAC7BxI,KAAKwG,mBAAiB,CAEzB,CAKD4C,SACE,GAAIpJ,KAAKoG,WACP,OAKF,GAFApG,KAAKoG,YAAa,EAEdpG,KAAKsG,QAAUzH,EAEjB,YADAmB,KAAKqJ,eAIH,GAAArJ,KAAKwE,SAASlD,SAAS,gBAAiB,CAAEmD,QAASzE,OAAQ6B,iBAC7D,OAGIuI,MAAAA,EAAkB,WAAYpK,KAAKiG,QAErCjG,KAAKoI,iBAaHgC,GAAkBpK,KAAKgH,SAAWhH,KAAKgH,MAAMkC,UAAYxJ,MAC3DM,KAAKqK,YAAa,EAIjBrK,KAAKiG,QAASqE,SAASC,OAAM,SAAUC,SAAQ,KACzCxK,KAAAqK,YAAa,EAClBrK,KAAKyK,aAAW,KAGlBzK,KAAKyK,cAEEzK,KAAKiG,UAAYjG,KAAKiG,QAAQiC,YACvClI,KAAKgH,MAAMI,UAAU9I,YAAY0B,KAAKiG,QAEzC,CAODyE,WACM1K,KAAKwE,SAASlD,SAAS,kBAAmB,CAAEmD,QAASzE,OAAQ6B,kBAI7D7B,KAAKgH,QACHhH,KAAKoI,kBAAoBpI,KAAKqK,aAAe3K,IAG/CM,KAAKyK,cACIzK,KAAKsJ,WACdtJ,KAAK6G,MAAK,GAAO,GAGf7G,KAAKgH,MAAM2D,eACb3K,KAAKgH,MAAM2D,cAAc/C,aAAa,cAAe,SAG1D,CAKDgD,aACE5K,KAAKwE,SAASlD,SAAS,oBAAqB,CAAEmD,QAASzE,OACnDA,KAAKgH,OAAShH,KAAKgH,MAAM2D,eAC3B3K,KAAKgH,MAAM2D,cAAc/C,aAAa,cAAe,OAExD,CAMDO,SACEnI,KAAKoG,YAAa,GAEdpG,KAAKwE,SAASlD,SAAS,gBAAiB,CAAEmD,QAASzE,OAAQ6B,mBAI3D7B,KAAKiG,SAAWjG,KAAKiG,QAAQiC,YAC/BlI,KAAKiG,QAAQkC,SAGXnI,KAAKyG,aAAezG,KAAKyG,YAAYR,SACvCjG,KAAKyG,YAAYR,QAAQkC,SAE5B,CAKDsC,cACOzK,KAAKoG,aAINpG,KAAKwE,SAASlD,SAAS,qBAAsB,CAAEmD,QAASzE,OAAQ6B,mBAKhE7B,KAAKgH,OAAShH,KAAKiG,UAAYjG,KAAKiG,QAAQiC,YAC9ClI,KAAKgH,MAAMI,UAAU9I,YAAY0B,KAAKiG,UAGpCjG,KAAKsG,QAAUzH,GAAqBmB,KAAKsG,QAAUzH,IACrDmB,KAAKwG,qBAER,GA+WoBxC,EAAWhE,KAAMmC,EACrC,CAWD0I,YAAY1I,GACV,MAAQwD,WAAAA,GAAe3F,KAAKI,QACxB0K,IAAAA,EACAzL,MAAMC,QAAQqG,GAEhBmF,EAAiBnF,EAAWxD,GACnBwD,GAAcA,EAAWI,UAM7BJ,EAAWE,QACdF,EAAWE,MAAQ7F,KAAK8F,uBAAuBH,EAAWI,UAG5D+E,EAAiBnF,EAAWE,MAAM1D,IAGpC,IAAID,EAAW4I,EAEX5I,aAAoB/C,UACtB+C,EAAWlC,KAAK+K,sBAAsB7I,IAKlCV,MAAAA,EAAQxB,KAAKsB,SAAS,WAAY,CACtCY,SAAUA,GAAY,CAAE,EACxBC,MAAAA,IAGF,OAAOnC,KAAKe,aAAa,WAAYS,EAAMU,SAAUC,EACtD,CAQD2D,uBAAuBkF,GACrB,OAAIhL,KAAKI,QAAQ6K,UAAYjL,KAAKI,QAAQ8K,cACjCpM,EACLkB,KAAKI,QAAQ6K,SACbjL,KAAKI,QAAQ8K,cACbF,IACG,GAGA,CAACA,EACT,CAQDD,sBAAsB9E,GAEpB,MAAM/D,EAAW,CACf+D,QAAAA,GAIIkF,EAA+D,MAApBlF,EAAQ/H,QAAkB+H,EAAUA,EAAQmF,cAAc,KAE3G,GAAID,EAAQ,CAGVjJ,EAASqE,IAAM4E,EAAOvB,QAAQyB,SAAWF,EAAOG,KAE5CH,EAAOvB,QAAQ2B,aACjBrJ,EAASyG,OAASwC,EAAOvB,QAAQ2B,YAGnCrJ,EAASvD,MAAQmL,SAASqB,EAAOvB,QAAQ4B,UAAW,IACpDtJ,EAAStD,OAASkL,SAASqB,EAAOvB,QAAQ6B,WAAY,IAGtDvJ,EAAS1D,EAAI0D,EAASvD,MACtBuD,EAASzD,EAAIyD,EAAStD,OAElBuM,EAAOvB,QAAQ8B,WACjBxJ,EAAST,KAAO0J,EAAOvB,QAAQ8B,UAG3BC,MAAAA,EAAc1F,EAAQmF,cAAc,OAEtCO,IAGFzJ,EAASqF,KAAOoE,EAAYC,YAAcD,EAAYpF,IACtDrE,EAASyF,IAAMgE,EAAYE,aAAa,SAGtCV,EAAOvB,QAAQkC,aAAeX,EAAOvB,QAAQmC,WAC/C7J,EAAS8J,cAAe,EAAA,CAI5B,OAAOhM,KAAKe,aAAa,cAAemB,EAAU+D,EAASkF,EAC5D,CASD5G,aAAarC,EAAUC,GACdoC,OAAAA,EAAarC,EAAUlC,KAAMmC,EACrC,GAmCH,MAAM8J,UAA2BC,EAI/BnM,YAAYK,GACV+L,QAEAnM,KAAKI,QAAUA,GAAW,GAC1BJ,KAAKoM,KAAO,CACb,CAMDC,OACErM,KAAKsM,kBAAoBtM,KAAKsM,kBAAkBC,KAAKvM,MAGrDlB,EAAsBkB,KAAKI,QAAQ2F,QAAS/F,KAAKI,QAAQoM,iBACtDvL,SAAS+J,IACRA,EAAeyB,iBAAiB,QAASzM,KAAKsM,mBAAmB,EAAK,GAE3E,CAKDA,kBAAkBI,GAEhB,GAx/CJ,SAAwBA,GAClBA,GAAY,IAAZA,EAAEC,OAAeD,EAAEE,SAAWF,EAAEG,SAAWH,EAAEI,QAAUJ,EAAEK,SACpD,OAAA,CAEX,CAo/CQC,CAAeN,IACZ1H,OAAO7E,OACqB,IAA5B6E,OAAOrF,UAAUsN,OACtB,OAUF,IAAIC,EAAe,CAAElK,EAAG0J,EAAES,QAASlK,EAAGyJ,EAAEU,UAEnCF,EAAalK,IAAMkK,EAAajK,IACnCiK,EAAe,MAGbG,IAAAA,EAAerN,KAAKsN,gBAAgBZ,GACxCW,EAAerN,KAAKe,aAAa,eAAgBsM,EAAcX,EAAG1M,MAClE,MAAM2F,EAAa,CACjBI,QAAqC2G,EAAE,eAGrCW,GAAgB,IAClBX,EAAE9K,iBACF5B,KAAKuN,YAAYF,EAAc1H,EAAYuH,GAE9C,CAODI,gBAAgBZ,GAEd,GAAI1M,KAAKI,QAAQoN,kBACf,OAAOxN,KAAKI,QAAQoN,kBAAkB1L,KAAK9B,KAAM0M,GAG7Ce,MAAAA,EAA4Cf,EAAE,OAM9CgB,EALgB5O,EACpBkB,KAAKI,QAAQ6K,SACbjL,KAAKI,QAAQ8K,cACewB,EAAEiB,eAEQC,WACtCC,GAASA,IAAUJ,GAAiBI,EAAMC,SAASL,KAGjDC,WAAAA,EACKA,EACE1N,KAAKI,QAAQ6K,UAAYjL,KAAKI,QAAQ8K,eAM1C,EAAA,CACR,CASDqC,YAAYpL,EAAOwD,EAAYuH,GAE7B,OAAIlI,OAAO7E,OAKXH,KAAKI,QAAQ+B,MAAQA,EAGrBnC,KAAKI,QAAQ2N,kBAAoBb,EAEjClN,KAAKgO,YAAa,EAClBhO,KAAKiO,QAAQ9L,EAAOwD,IACb,EACR,CAQDsI,QAAQ9L,EAAOwD,GACP,MAAEvF,QAAAA,GAAYJ,KAEhB2F,IACFvF,EAAQuF,WAAaA,GAKvB,MAAMuI,EAAe,GAEfC,SAAwB/N,EAAQgO,WAClCC,GA3jDe,mBADF9N,EA4jDDH,EAAQgO,aA1jDrB7N,EAAG+N,WACH/N,EAAG+N,UAAUC,KA0jDdL,EAAazN,KAAK+N,QAAQC,QAAyCrO,EAAQgO,iBACtE,CAAA,GAAuB,WAAnBD,EACH,MAAA,IAAIO,MAAM,+CACX,GAAuB,aAAnBP,EAGH,MAAA,IAAIO,MAAM,2BAFhBR,EAAazN,KAAqDL,EAAQgO,aAEjC,CAnkD/C,IAAqB7N,EAukDkB,mBAAxBH,EAAQuO,aAEjBT,EAAazN,KAAKL,EAAQuO,gBAGM,IAA9BvO,EAAQwO,mBAA+BzM,GAAS,IAClDnC,KAAK6O,kBAlXX,SAAuB1M,EAAOqC,GACtBtC,MAAAA,EAAWsC,EAASqG,YAAY1I,GAElC,IAAAqC,EAASlD,SAAS,gBAAiB,CAAEa,MAAAA,EAAOD,SAAAA,IAAYL,iBAIrD0C,OAAAA,EAAarC,EAAUsC,EAAUrC,EAC1C,CA0W+B2M,CAAc3M,EAAOnC,OAI1C+O,MAAAA,IAAQ/O,KAAKoM,KACnBoC,QAAQQ,IAAId,GAAce,MAAMC,IAC9B,GAAIlP,KAAKgO,WAAY,CACbmB,MAAAA,EAAaD,EAAgB,GAC9BlP,KAAAoP,gBAAgBD,EAAYJ,EAAG,IAGzC,CAODK,gBAAgBC,EAAQN,GAMlBA,GAAAA,IAAQ/O,KAAKoM,MAAQpM,KAAKgO,aAI9BhO,KAAKgO,YAAa,EAGdhJ,OAAO7E,MACT,OAQF,MAAMA,EAAyB,iBAAXkP,EACd,IAAIA,EAAOC,QAAQtP,KAAKI,SACxB,IAAIiP,EAAOrP,KAAKI,SAEtBJ,KAAKG,KAAOA,EACZ6E,OAAO7E,KAAOA,EAIbuB,OAAO6N,KAAKvP,KAAKC,YAAagB,SAASX,IACtCN,KAAKC,WAAWK,GAAMW,SAASV,IAC7BJ,EAAKgB,GAAGb,EAAgDC,KACzD,IAKFmB,OAAO6N,KAAKvP,KAAKE,UAAWe,SAASX,IACpCN,KAAKE,SAASI,GAAMW,SAASH,IAC3BX,EAAKE,UAAUC,EAAMQ,EAAOP,GAAIO,EAAON,SAAQ,GAChD,IAGCR,KAAK6O,oBACP1O,EAAKqP,cAAcC,WAAWzP,KAAK6O,mBACnC7O,KAAK6O,kBAAoB,MAG3B1O,EAAKgB,GAAG,WAAW,KAEZnB,KAAAG,KAAO,KACZ6E,OAAO7E,KAAO,IAAA,IAGhBA,EAAKkM,MACN,CAKDzF,UACM5G,KAAKG,MACPH,KAAKG,KAAKyG,UAGZ5G,KAAKgO,YAAa,EAClBhO,KAAKC,WAAa,KAElBnB,EAAsBkB,KAAKI,QAAQ2F,QAAS/F,KAAKI,QAAQoM,iBACtDvL,SAAS+J,IACRA,EAAe0E,oBAAoB,QAAS1P,KAAKsM,mBAAmB,EAAK,GAE9E;;;;IC3wDH,SAAStO,EAAcC,EAAWC,EAASC,GACzC,MAAMC,EAAKC,SAASL,cAAcE,GAAW,OACzCD,OAAAA,IACFG,EAAGH,UAAYA,GAEbE,GACFA,EAAWG,YAAYF,GAGlBA,CACT,CAMA,SAASuR,EAAeC,EAAIC,GAC1B,OAAAD,EAAG5M,EAAI6M,EAAG7M,EACV4M,EAAG3M,EAAI4M,EAAG5M,OACI,IAAV4M,EAAGC,KACLF,EAAGE,GAAKD,EAAGC,IAENF,CACT,CAKA,SAASG,EAAWC,GAClBA,EAAEhN,EAAIK,KAAK4M,MAAMD,EAAEhN,GACnBgN,EAAE/M,EAAII,KAAK4M,MAAMD,EAAE/M,EACrB,CAQA,SAASiN,EAAmBN,EAAIC,GAC9B,MAAM7M,EAAIK,KAAK8M,IAAIP,EAAG5M,EAAI6M,EAAG7M,GACvBC,EAAII,KAAK8M,IAAIP,EAAG3M,EAAI4M,EAAG5M,GAC7B,OAAOI,KAAK+M,KAAMpN,EAAIA,EAAMC,EAAIA,EAClC,CAQA,SAASoN,EAAYT,EAAIC,GACvB,OAAOD,EAAG5M,IAAM6M,EAAG7M,GAAK4M,EAAG3M,IAAM4M,EAAG5M,CACtC,CASA,SAASqN,EAAMC,EAAKjN,EAAKO,GACvB,OAAOR,KAAKC,IAAID,KAAKQ,IAAI0M,EAAKjN,GAAMO,EACtC,CASA,SAASoE,EAAkBjF,EAAGC,EAAG8E,GAC/B,IAAIC,EAAY,eACZhF,EAAI,OAASC,GAAK,GAAK,QAG3B,YAAc,IAAV8E,IACFC,GAAa,YACTD,EAAQ,IAAMA,EACd,OAGCC,CACT,CAUA,SAASwI,EAAapS,EAAI4E,EAAGC,EAAG8E,GAC9B3J,EAAGM,MAAMoJ,UAAYG,EAAkBjF,EAAGC,EAAG8E,EAC/C,CAEA,MAAM0I,EAAmB,2BAUzB,SAASC,EAAmBtS,EAAI4D,EAAM2O,EAAUC,GAI9CxS,EAAGM,MAAMmS,WAAa7O,EACjBA,EAAO,IAAM2O,EAAW,OAASC,GAAQH,GAC1C,MACN,CASA,SAASlS,EAAeH,EAAII,EAAGC,GAC7BL,EAAGM,MAAMC,MAAsB,iBAANH,EAAmBA,EAAI,KAAQA,EACxDJ,EAAGM,MAAME,OAAuB,iBAANH,EAAmBA,EAAI,KAAQA,CAC3D,CA8BA,MAAMI,EACE,OADFA,EAEK,UAFLA,EAGI,SAHJA,EAIG,QA+CT,SAASa,IACP,SAAUC,UAAUC,SAAUD,UAAUC,OAAOC,MAAM,UACvD,CAGA,IAAIiR,GAAkB,EAEtB,IACE9L,OAAOyH,iBAAiB,OAAQ,KAAM/K,OAAOqP,eAAe,CAAE,EAAE,UAAW,CACzEC,IAAK,KACHF,GAAkB,CAAA,IAGxB,CAAE,MAAY,CAYd,MAAMG,EACJlR,cAKEC,KAAKkR,MAAQ,EACd,CAUDC,IAAIC,EAAQ3P,EAAMJ,EAAUgQ,GAC1BrR,KAAKsR,gBAAgBF,EAAQ3P,EAAMJ,EAAUgQ,EAC9C,CAUDlJ,OAAOiJ,EAAQ3P,EAAMJ,EAAUgQ,GAC7BrR,KAAKsR,gBAAgBF,EAAQ3P,EAAMJ,EAAUgQ,GAAS,EACvD,CAKDE,YACOvR,KAAAkR,MAAMjQ,SAASuQ,IACbxR,KAAAsR,gBACHE,EAASJ,OACTI,EAAS/P,KACT+P,EAASnQ,SACTmQ,EAASH,SACT,GACA,EACR,IAEIrR,KAAKkR,MAAQ,EACd,CAYDI,gBAAgBF,EAAQ3P,EAAMJ,EAAUgQ,EAASI,EAAQC,GACvD,IAAKN,EACH,OAGIO,MAAAA,EAAaF,EAAS,sBAAwB,mBACtChQ,EAAKmQ,MAAM,KACnB3Q,SAAS4Q,IACb,GAAIA,EAAO,CAGJH,IACCD,EAEFzR,KAAKkR,MAAQlR,KAAKkR,MAAMpQ,QAAQ0Q,GACvBA,EAAS/P,OAASoQ,GACpBL,EAASnQ,WAAaA,GACtBmQ,EAASJ,SAAWA,IAI3BpR,KAAKkR,MAAMzQ,KAAK,CACd2Q,OAAAA,EACA3P,KAAMoQ,EACNxQ,SAAAA,EACAgQ,QAAAA,KAQN,MAAMS,IAAehB,GAAkB,CAAEO,QAAUA,IAAW,GAE9DD,EAAOO,GACLE,EACAxQ,EACAyQ,EACV,IAGG,EAWH,SAAS5M,EAAgB9E,EAASD,GAChC,GAAIC,EAAQwE,kBAAmB,CAC7B,MAAMC,EAAkBzE,EAAQwE,kBAAkBxE,EAASD,GACvD0E,GAAAA,EACKA,OAAAA,CAAA,CAIJ,MAAA,CACL7B,EAAG3E,SAASyG,gBAAgBC,YAM5B9B,EAAG+B,OAAOC,YAEd,CAqCA,SAASlD,EAAmBC,EAAM5B,EAAS6B,EAAcC,EAAUC,GAE7DC,IAAAA,EAEJ,GAAIhC,EAAQiC,UACVD,EAAehC,EAAQiC,UAAUJ,EAAcC,EAAUC,GAAOH,QAAI,GAC3D5B,EAAQkC,QACjBF,EAAehC,EAAQkC,QAAQN,OAC1B,CACCO,MAAAA,EAAiB,UAAYP,EAAK,GAAGQ,cAAgBR,EAAKS,MAAM,GAElErC,EAAQmC,KAEVH,EAAehC,EAAQmC,GAAc,CAIzC,OAAOH,GAAgB,CACzB,CAQA,SAAS+C,EAAe/E,EAAS6B,EAAcC,EAAUC,GAChD,MAAA,CACLa,EAAGf,EAAae,EACZjB,EAAmB,OAAQ3B,EAAS6B,EAAcC,EAAUC,GAC5DJ,EAAmB,QAAS3B,EAAS6B,EAAcC,EAAUC,GACjEc,EAAGhB,EAAagB,EACZlB,EAAmB,MAAO3B,EAAS6B,EAAcC,EAAUC,GAC3DJ,EAAmB,SAAU3B,EAAS6B,EAAcC,EAAUC,GAEtE,CASA,MAAM4P,EAIJhS,YAAYiH,GACVhH,KAAKgH,MAAQA,EAEbhH,KAAKsE,cAAgB,EAGrBtE,KAAKgS,OAAS,GAEdhS,KAAK6D,IAAM,GAEX7D,KAAKsD,IAAM,GAEXtD,KAAKiS,OACN,CAODtP,OAAO2B,GACAtE,KAAAsE,cAAgBA,EAEhBtE,KAAKgH,MAAMrI,OAGdqB,KAAKkS,YAAY,KACjBlS,KAAKkS,YAAY,KACjBlS,KAAKgH,MAAM7G,KAAKmB,SAAS,aAAc,CAAE0F,MAAOhH,KAAKgH,SAJrDhH,KAAKiS,OAMR,CAODC,YAAYC,GACV,MAAQhS,KAAAA,GAASH,KAAKgH,MAChBoL,EAASpS,KAAKgH,MAAe,MAATmL,EAAe,QAAU,UAAYnS,KAAKsE,cAE9DhC,EAAUP,EADa,MAAToQ,EAAe,OAAS,MAG1ChS,EAAKC,QACLD,EAAK8B,aACLjC,KAAKgH,MAAMhB,KACXhG,KAAKgH,MAAM7E,OAGPW,EAAc9C,KAAKgH,MAAMlE,YAAYqP,GAI3CnS,KAAKgS,OAAOG,GAAQ9O,KAAK4M,OAAOnN,EAAcsP,GAAU,GAAK9P,EAG7DtC,KAAK6D,IAAIsO,GAASC,EAAStP,EACvBO,KAAK4M,MAAMnN,EAAcsP,GAAU9P,EACnCtC,KAAKgS,OAAOG,GAGhBnS,KAAKsD,IAAI6O,GAASC,EAAStP,EACvBR,EACAtC,KAAKgS,OAAOG,EACjB,CAGDF,QACOjS,KAAAgS,OAAOhP,EAAI,EAChBhD,KAAKgS,OAAO/O,EAAI,EAChBjD,KAAK6D,IAAIb,EAAI,EACbhD,KAAK6D,IAAIZ,EAAI,EACbjD,KAAKsD,IAAIN,EAAI,EACbhD,KAAKsD,IAAIL,EAAI,CACd,CAQDoP,WAAWF,EAAMG,GACRhC,OAAAA,EAAMgC,EAAWtS,KAAK6D,IAAIsO,GAAOnS,KAAKsD,IAAI6O,GAClD,EAeH,MAAM9M,EAOJtF,YAAYK,EAAS8B,EAAUC,EAAOhC,GAC/BH,KAAAG,KAAOA,EACZH,KAAKI,QAAUA,EACfJ,KAAKkC,SAAWA,EAChBlC,KAAKmC,MAAQA,CACd,CAWDQ,OAAOC,EAAUC,EAAWC,GAC1B9C,KAAK+C,YAAc,CACjBC,EAAGJ,EACHK,EAAGJ,GAGL7C,KAAK8C,YAAcA,EAEnB,MAAMI,EAASlD,KAAK8C,YAAYE,EAAIhD,KAAK+C,YAAYC,EAC/CG,EAASnD,KAAK8C,YAAYG,EAAIjD,KAAK+C,YAAYE,EAErDjD,KAAKoD,IAAMC,KAAKC,IAAI,EAAGJ,EAASC,EAASD,EAASC,GAClDnD,KAAKuD,KAAOF,KAAKC,IAAI,EAAGJ,EAASC,EAASD,EAASC,GAInDnD,KAAKwD,MAAQH,KAAKC,IAAI,EAAGH,GAEzBnD,KAAKyD,QAAUzD,KAAK0D,cACpB1D,KAAK2D,UAAY3D,KAAK4D,gBACtB5D,KAAK6D,IAAMR,KAAKQ,IACd7D,KAAKyD,QACLzD,KAAK2D,UACL3D,KAAK8D,WAGP9D,KAAKsD,IAAMD,KAAKC,IACdtD,KAAKoD,IACLpD,KAAKyD,QACLzD,KAAK2D,WAGH3D,KAAKG,MACPH,KAAKG,KAAKmB,SAAS,mBAAoB,CAAEyC,WAAY/D,KAAMgE,UAAWhE,KAAKkC,UAE9E,CAQD+B,sBAAsBC,GAEdC,MAAAA,EAAwFD,EAAe,YACvGE,EAAcpE,KAAKI,QAAQ+D,GAE5BC,GAAAA,EAIL,MAA2B,mBAAhBA,EACFA,EAAYpE,MAGD,SAAhBoE,EACKpE,KAAKuD,KAGM,QAAhBa,EACKpE,KAAKoD,IAGPiB,OAAOD,EACf,CAWDR,gBACMU,IAAAA,EAAgBtE,KAAKiE,sBAAsB,aAE/C,OAAIK,IAKJA,EAAgBjB,KAAKC,IAAI,EAAc,EAAXtD,KAAKoD,KAE7BkB,EAAgBtE,KAAK+C,YAAYC,EAzHjB,MA0HlBsB,EA1HkB,IA0HgBtE,KAAK+C,YAAYC,GAG9CsB,EACR,CAQDZ,cACE,OAAO1D,KAAKiE,sBAAsB,YAAcjE,KAAKoD,GACtD,CAUDU,UAGE,OAFsB9D,KAAKiE,sBAAsB,QAQ1CZ,KAAKQ,IAAI,EAAc,EAAX7D,KAAKoD,IACzB,EAQH,MAAMmP,EAMJxS,YAAYiG,EAAM7D,EAAOhC,GACvBH,KAAKgG,KAAOA,EACZhG,KAAKmC,MAAQA,EACbnC,KAAKG,KAAOA,EACZH,KAAKkJ,SAAY/G,IAAUhC,EAAKqS,UAChCxS,KAAKyS,kBAAoB,EAEzBzS,KAAK8C,YAAc,GAEnB9C,KAAKwH,aAAgBxH,KAAKkJ,WAAa/I,EAAKuS,OAAOC,OAEnD3S,KAAK+D,WAAa,IAAIsB,EAAUlF,EAAKC,QAAS4F,EAAM7D,EAAOhC,GAE3DH,KAAKG,KAAKmB,SAAS,cAAe,CAChC0F,MAAOhH,KACPgG,KAAMhG,KAAKgG,KACX7D,MAAAA,IAGFnC,KAAK4S,IAAM,CACT5P,EAAG,EACHC,EAAG,GAGLjD,KAAKyE,QAAUzE,KAAKG,KAAKqP,cAAcqD,kBAAkB7S,MACzDA,KAAKoH,UAAYpJ,EAAc,mBAE/BgC,KAAKsE,cAAgB,EAErBtE,KAAKrB,MAAQqB,KAAKyE,QAAQ9F,MAE1BqB,KAAKpB,OAASoB,KAAKyE,QAAQ7F,OAE3BoB,KAAK8S,OAAS,IAAIf,EAAU/R,MAE5BA,KAAK+S,sBACL/S,KAAKgT,uBAELhT,KAAKG,KAAKmB,SAAS,YAAa,CAAE0F,MAAOhH,MAC1C,CAODiT,YAAY/J,GACNA,IAAalJ,KAAKkJ,SAEpBlJ,KAAK0K,YACKxB,GAAYlJ,KAAKkJ,UAE3BlJ,KAAK4K,YAER,CAODxB,OAAOuB,GACL3K,KAAK2K,cAAgBA,EAErB3K,KAAKoH,UAAU1I,MAAMmJ,gBAAkB,MAGlC7H,KAAKgG,OAIVhG,KAAKkT,gBAELlT,KAAK6G,OACL7G,KAAKwI,oBACLxI,KAAKmT,cAELnT,KAAK2K,cAAcrM,YAAY0B,KAAKoH,WAEpCpH,KAAKoT,sBAELpT,KAAKG,KAAKmB,SAAS,eAAgB,CAAE0F,MAAOhH,OAE5CA,KAAKqT,sBAELrT,KAAKG,KAAKmB,SAAS,kBAAmB,CAAE0F,MAAOhH,OAE3CA,KAAKkJ,UACPlJ,KAAK0K,WAER,CAED7D,OACO7G,KAAAyE,QAAQoC,OACb7G,KAAKG,KAAKmB,SAAS,YAAa,CAAE0F,MAAOhH,MAC1C,CAQDmT,cACE,MAAQhT,KAAAA,GAASH,KAIbA,KAAKmJ,gBACDhJ,EAAKuS,OAAOC,QACbxS,EAAKmT,WAAWC,cACdvT,KAAKkJ,SAAN,IAIJlJ,KAAKG,KAAKmB,SAAS,cAAe,CAAE0F,MAAOhH,OAAQ6B,mBAIvD7B,KAAKmJ,eAAgB,EAErBnJ,KAAKyE,QAAQ2E,SAEbpJ,KAAKG,KAAKmB,SAAS,qBAAsB,CAAE0F,MAAOhH,OACnD,CAQD0K,WACE1K,KAAKkJ,UAAW,EAChBlJ,KAAKmT,cACLnT,KAAKyE,QAAQiG,WACb1K,KAAKG,KAAKmB,SAAS,gBAAiB,CAAE0F,MAAOhH,MAC9C,CAOD4K,aACE5K,KAAKkJ,UAAW,EAChBlJ,KAAKyE,QAAQmG,aAET5K,KAAKsE,gBAAkBtE,KAAK+D,WAAWN,SAEzCzD,KAAKkT,gBAIPlT,KAAKyS,kBAAoB,EACzBzS,KAAKoT,sBACLpT,KAAKqT,sBACLrT,KAAKwI,oBAELxI,KAAKG,KAAKmB,SAAS,kBAAmB,CAAE0F,MAAOhH,MAChD,CAMD4G,UACE5G,KAAKyE,QAAQ4B,UAAW,EACxBrG,KAAKyE,QAAQ0D,SACbnI,KAAKoH,UAAUe,SACfnI,KAAKG,KAAKmB,SAAS,eAAgB,CAAE0F,MAAOhH,MAC7C,CAEDwT,SACMxT,KAAKsE,gBAAkBtE,KAAK+D,WAAWN,SAAYzD,KAAKkJ,UAY1DlJ,KAAKkT,gBACLlT,KAAK8S,OAAOnQ,OAAO3C,KAAKsE,eACxBtE,KAAKyT,MAAMzT,KAAK4S,IAAI5P,EAAGhD,KAAK4S,IAAI3P,KAThCjD,KAAKkT,gBACLlT,KAAKyS,kBAAoB,EACzBzS,KAAKoT,sBACLpT,KAAKqT,sBACLrT,KAAKwI,oBAOR,CASDA,kBAAkBkL,GAGhB,MAAMC,EAAkB3T,KAAKyS,mBAAqBzS,KAAK+D,WAAWN,QAElE,IAAKkQ,EACH,OAGIhV,MAAAA,EAAQ0E,KAAK4M,MAAMjQ,KAAKrB,MAAQgV,IAAoB3T,KAAKG,KAAK8B,aAAae,EAC3EpE,EAASyE,KAAK4M,MAAMjQ,KAAKpB,OAAS+U,IAAoB3T,KAAKG,KAAK8B,aAAagB,GAE9EjD,KAAK4T,YAAYjV,EAAOC,KAAY8U,GAGzC1T,KAAKyE,QAAQa,iBAAiB3G,EAAOC,EACtC,CAMDgV,YAAYjV,EAAOC,GACjB,OAAID,IAAUqB,KAAK+S,oBACZnU,IAAWoB,KAAKgT,uBACrBhT,KAAK+S,mBAAqBpU,EAC1BqB,KAAKgT,oBAAsBpU,GACpB,EAIV,CAEDiV,wBACE,GAAI7T,KAAKyE,QAAQgC,YACR,OAAAzG,KAAKyE,QAAQgC,YAAYR,OAEnC,CAYD6N,OAAOC,EAAeC,EAAaC,EAAoBC,GAC/C,MAAE/T,KAAAA,GAASH,KACjB,IAAKA,KAAKyJ,cACHtJ,EAAKmT,WAAWC,YACrB,OAGFpT,EAAKmB,SAAS,eAAgB,CAC5ByS,cAAAA,EAAeC,YAAAA,EAAaC,mBAAAA,IAI9B9T,EAAKgU,WAAWC,aAMhB,MAAMC,EAAgBrU,KAAKsE,cAEtB4P,IACHH,EAAgBzD,EAAMyD,EAAe/T,KAAK+D,WAAWT,IAAKtD,KAAK+D,WAAWF,MAO5E7D,KAAKsU,aAAaP,GAClB/T,KAAK4S,IAAI5P,EAAIhD,KAAKuU,yBAAyB,IAAKP,EAAaK,GAC7DrU,KAAK4S,IAAI3P,EAAIjD,KAAKuU,yBAAyB,IAAKP,EAAaK,GAC7DtE,EAAW/P,KAAK4S,KAEhB,MAAM4B,EAAmB,KACvBxU,KAAKyU,eAAeV,GACpB/T,KAAKqT,qBAAmB,EAGrBY,EAGH9T,EAAKgU,WAAWO,gBAAgB,CAC9BC,OAAO,EACPrU,KAAM,SACN8Q,OAAQpR,KAAKoH,UACbU,UAAW9H,KAAK4U,sBAChBC,WAAYL,EACZ7D,SAAUsD,EACVa,OAAQ3U,EAAKC,QAAQ0U,SATvBN,GAYH,CAKDO,WAAWf,GACJhU,KAAA8T,OACH9T,KAAKsE,gBAAkBtE,KAAK+D,WAAWN,QACnCzD,KAAK+D,WAAWJ,UAAY3D,KAAK+D,WAAWN,QAChDuQ,EACAhU,KAAKG,KAAKC,QAAQ4U,sBAErB,CAQDV,aAAahQ,GACXtE,KAAKsE,cAAgBA,EACrBtE,KAAK8S,OAAOnQ,OAAO3C,KAAKsE,cACzB,CAcDiQ,yBAAyBpC,EAAM8C,EAAOZ,GACX,GAAArU,KAAK8S,OAAOjP,IAAIsO,GAAQnS,KAAK8S,OAAOxP,IAAI6O,IACxC,EAChB,OAAAnS,KAAK8S,OAAOd,OAAOG,GAGvB8C,IACHA,EAAQjV,KAAKG,KAAK+U,0BAGdC,MAAAA,EAAanV,KAAKsE,cAAgB+P,EACxC,OAAOrU,KAAK8S,OAAOT,WACjBF,GACCnS,KAAK4S,IAAIT,GAAQ8C,EAAM9C,IAASgD,EAAaF,EAAM9C,GAEvD,CAQDsB,MAAM2B,EAAMC,GACVrV,KAAK4S,IAAI5P,EAAIhD,KAAK8S,OAAOT,WAAW,IAAK+C,GACzCpV,KAAK4S,IAAI3P,EAAIjD,KAAK8S,OAAOT,WAAW,IAAKgD,GACzCrV,KAAKqT,qBACN,CAKDiC,aACE,OAAOtV,KAAKrB,OAAUqB,KAAKsE,cAAgBtE,KAAK+D,WAAWX,GAC5D,CAKDqG,aACE,OAAOzJ,KAAKrB,OAASqB,KAAKyE,QAAQgF,YACnC,CAMD4J,sBACOrT,KAAAuV,oBAAoBvV,KAAK4S,IAAI5P,EAAGhD,KAAK4S,IAAI3P,EAAGjD,KAAKsE,eAClDtE,OAASA,KAAKG,KAAKqV,WACrBxV,KAAKG,KAAKmB,SAAS,gBAAiB,CAAE0F,MAAOhH,MAEhD,CAEDoT,sBACOpT,KAAAsE,cAAgBtE,KAAK+D,WAAWN,QAGrCzD,KAAK8S,OAAOnQ,OAAO3C,KAAKsE,eACxBqL,EAAe3P,KAAK4S,IAAK5S,KAAK8S,OAAOd,QACrChS,KAAKG,KAAKmB,SAAS,iBAAkB,CAAE0F,MAAOhH,MAC/C,CASDuV,oBAAoBvS,EAAGC,EAAGwS,GACxBA,GAAQzV,KAAKyS,mBAAqBzS,KAAK+D,WAAWN,QAClD+M,EAAaxQ,KAAKoH,UAAWpE,EAAGC,EAAGwS,EACpC,CAEDvC,gBACQ,MAAE/S,KAAAA,GAASH,KAEjB2P,EACE3P,KAAK8C,YACLqC,EAAehF,EAAKC,QAASD,EAAK8B,aAAcjC,KAAKgG,KAAMhG,KAAKmC,QAGlEnC,KAAK+D,WAAWpB,OAAO3C,KAAKrB,MAAOqB,KAAKpB,OAAQoB,KAAK8C,aAErD3C,EAAKmB,SAAS,gBAAiB,CAC7B0F,MAAOhH,MAEV,CAED4U,sBACE,MAAM7M,EAAQ/H,KAAKsE,eAAiBtE,KAAKyS,mBAAqBzS,KAAK+D,WAAWN,SAC9E,OAAOwE,EAAkBjI,KAAK4S,IAAI5P,EAAGhD,KAAK4S,IAAI3P,EAAG8E,EAClD,CAiBD0M,eAAeiB,GACTA,IAAkB1V,KAAKyS,oBAI3BzS,KAAKyS,kBAAoBiD,EACzB1V,KAAKwI,oBAELxI,KAAKG,KAAKmB,SAAS,qBACpB,EA2BH,MAAMqU,EAIJ5V,YAAY6V,GACL5V,KAAA4V,SAAWA,EAChB5V,KAAKG,KAAOyV,EAASzV,KAErBH,KAAK6V,SAAW,EACjB,CAEDC,QACEnG,EAAe3P,KAAK6V,SAAU7V,KAAKG,KAAKqV,UAAU5C,KAClD5S,KAAKG,KAAKgU,WAAW4B,SACtB,CAEDC,SACE,MAAQpG,GAAAA,EAAIqG,OAAAA,EAAQC,SAAAA,EAAU/V,KAAAA,GAASH,KAAK4V,UACpCJ,UAAAA,GAAcrV,EAEtB,GAAiB,MAAb+V,GACG/V,EAAKC,QAAQ+V,qBACbX,EAAUlR,eAAiBkR,EAAUzR,WAAWX,MAC/CpD,KAAK4V,SAASQ,aAAc,CAElC,MAAMf,EAAOG,EAAU5C,IAAI3P,GAAK2M,EAAG3M,EAAIgT,EAAOhT,GAC1C,IAAC9C,EAAKmB,SAAS,eAAgB,CAAE+T,KAAAA,IAAQxT,iBAAkB,CACxD7B,KAAAqW,oBAAoB,IAAKhB,EA/CP,IAgDjBiB,MAAAA,EAAY,EAAIjT,KAAK8M,IAAInQ,KAAKuW,sBAAsBf,EAAU5C,IAAI3P,IACxE9C,EAAKqW,eAAeF,GACpBd,EAAUnC,qBAAmB,CAAA,MAGLrT,KAAKyW,qBAAqB,OAElDzW,KAAKyW,qBAAqB,KAE1B1G,EAAWyF,EAAU5C,KACrB4C,EAAUnC,sBAGf,CAEDqD,MACQ,MAAEvW,KAAAA,EAAMwW,SAAAA,GAAa3W,KAAK4V,UACxBtC,WAAAA,GAAenT,EACvB,IAAIyW,EAAY,EAKhB,GAHAzW,EAAKgU,WAAW4B,UAGZzC,EAAWC,YAAa,CAQ1B,MAAMsD,GANsBvD,EAAWtQ,EAAIsQ,EAAWwD,iBAMK3W,EAAK8B,aAAae,EAUxE2T,EAAS3T,GAlFS,IAkFoB6T,EAA8B,GACjEF,EAAS3T,EAAI,IAAO6T,OAE1BD,EAAY,EACZD,EAAS3T,EAAIK,KAAKC,IAAIqT,EAAS3T,EAAG,KACxB2T,EAAS3T,EAvFE,IAuF0B6T,EAA8B,GACvEF,EAAS3T,GAAI,IAAQ6T,EAA8B,MAEzDD,KACAD,EAAS3T,EAAIK,KAAKQ,IAAI8S,EAAS3T,EAAG,IAGpCsQ,EAAWyD,YAAYH,GAAW,EAAMD,EAAS3T,EAAC,CAIhD7C,EAAKqV,UAAUlR,cAAgBnE,EAAKqV,UAAUzR,WAAWF,KACtD7D,KAAK4V,SAASQ,aACnBpW,KAAK4V,SAAS7R,WAAWiT,gBAAe,IAMxChX,KAAKiX,yBAAyB,KAC9BjX,KAAKiX,yBAAyB,KAEjC,CAMDA,yBAAyB9E,GACvB,MAAQhS,KAAAA,GAASH,MACTwV,UAAAA,GAAcrV,GACdwW,SAAAA,GAAa3W,KAAK4V,UAClBhD,IAAAA,EAAKE,OAAAA,GAAW0C,EAClB0B,EAAStE,EAAIT,GACbgF,EAAoBhX,EAAKmW,UAAY,GAAc,MAATnE,EAO1CiF,EAAoBF,EA1H9B,SAAiBG,EAAiBC,GACzBD,OAAAA,EAAkBC,GAAoB,EAAIA,EACnD,CAwHuCC,CAAQZ,EAASxE,GAH3B,MAKzB,GAAIgF,EAAkB,CACdK,MAAAA,EAAaxX,KAAKuW,sBAAsBW,GACxCO,EAAsBzX,KAAKuW,sBAAsBa,GAIlDI,GAAAA,EAAa,GAAKC,GA5IF,IA6IbD,EAAa,GAAKC,EA7IL,GA+InB,YADAtX,EAAKuX,OACL,CAKJ,MAAMC,EAAuB7E,EAAOT,WAAWF,EAAMiF,GAIrD,GAAIF,IAAWS,EACb,OAIIC,MAAAA,EAAgBD,IAAyBP,EAAqB,EAAI,IAElES,EAAmB1X,EAAKmW,UACxBwB,EAAeH,EAAuBT,EAE5C/W,EAAKgU,WAAW4D,YAAY,CAC1BzX,KAAM,aAAe6R,EACrBwC,OAAO,EACPmB,MAAOoB,EACPR,IAAKiB,EACLhB,SAAUA,EAASxE,GACnByF,aAAAA,EACAI,SAAWC,IAELd,GAAAA,GAAoBhX,EAAKmW,UAAY,EAAG,CAEpC4B,MAAAA,EAAyB,GAAKP,EAAuBM,GAAOH,EAKlE3X,EAAKqW,eAAelG,EAClBuH,GAAoB,EAAIA,GAAoBK,EAC5C,EACA,GACD,CAGHtF,EAAIT,GAAQ9O,KAAK8U,MAAMF,GACvBzC,EAAUnC,qBAAmB,GAGlC,CAWDoD,qBAAqBtE,GACnB,MAAQvC,GAAAA,EAAIzP,KAAAA,EAAM+V,SAAAA,EAAUD,OAAAA,EAAQG,aAAAA,GAAiBpW,KAAK4V,UAClDJ,UAAAA,EAAWlC,WAAAA,GAAenT,EAC5BiY,EAASxI,EAAGuC,GAAQ8D,EAAO9D,GAC3BkG,EAAiB/E,EAAWtQ,EAAIoV,EAEtC,IAAKA,EACH,OAIF,GAAa,MAATjG,IAAiBqD,EAAUF,eAAiBc,EAC9C,OAAA9C,EAAWgF,OAAOD,GAAgB,IAC3B,EAGH,MAAEvF,OAAAA,GAAW0C,EACb+C,EAAS/C,EAAU5C,IAAIT,GAAQiG,EAEjCjY,GAAAA,EAAKC,QAAQoY,gBACG,MAAbtC,GACS,MAAT/D,IACCiE,EAAc,CACpB,MAAMqC,EAAuBnF,EAAWwD,gBAGlC4B,EAAsBpF,EAAWtQ,EAAIyV,EAErCE,EAAgBP,EAAQ,EACxBQ,GAAiBD,EAEvB,GAAIJ,EAASzF,EAAOxP,IAAI6O,IAASwG,EAAe,CAQ9C,GAF6B7F,EAAOxP,IAAI6O,IAASnS,KAAK6V,SAAS1D,GAG7D,OAAAmB,EAAWgF,OAAOD,GAAgB,IAC3B,EAEFrY,KAAAqW,oBAAoBlE,EAAMoG,EAAM,MAAA,GAG9BA,EAASzF,EAAOjP,IAAIsO,IAASyG,EAAe,CAMrD,GAF6B5Y,KAAK6V,SAAS1D,IAASW,EAAOjP,IAAIsO,GAG7D,OAAAmB,EAAWgF,OAAOD,GAAgB,IAC3B,EAEFrY,KAAAqW,oBAAoBlE,EAAMoG,EAAM,MAAA,GAKX,IAAxBG,EAA2B,CAE7B,GAAIA,EAAsB,EACxBpF,OAAAA,EAAWgF,OAAOjV,KAAKQ,IAAIwU,EAAgBI,IAAuB,IAC3D,EACF,GAAIC,EAAsB,EAE/BpF,OAAAA,EAAWgF,OAAOjV,KAAKC,IAAI+U,EAAgBI,IAAuB,IAC3D,CAAA,MAIJzY,KAAAqW,oBAAoBlE,EAAMoG,EAAM,KAI5B,MAATpG,GAEGmB,EAAWC,aAAeT,EAAOxP,IAAIL,IAAM6P,EAAOjP,IAAIZ,GACzDjD,KAAKqW,oBAAoBlE,EAAMoG,GAGjCvY,KAAKqW,oBAAoBlE,EAAMoG,EAGpC,CAeDhC,sBAAsBlB,GACZA,OAAAA,EAAOrV,KAAKG,KAAKqV,UAAU1C,OAAOd,OAAO/O,IACtCjD,KAAKG,KAAK8B,aAAagB,EAAI,EACvC,CAYDoT,oBAAoBlE,EAAM0G,EAAcC,GACtC,MAAQlG,IAAAA,EAAKE,OAAAA,GAAW9S,KAAKG,KAAKqV,UAGlC,GAFqB1C,EAAOT,WAAWF,EAAM0G,KAExBA,GAAgBC,EAAgB,CACnD,MAAMV,EAAQ/U,KAAK4M,MAAM4I,EAAejG,EAAIT,IAC5CS,EAAIT,IAASiG,GAASU,GAtUH,IAsUqB,MAExClG,EAAIT,GAAQ0G,CAEf,EAiBH,SAASE,EAAoB/I,EAAGJ,EAAIC,GAClC,OAAAG,EAAEhN,GAAK4M,EAAG5M,EAAI6M,EAAG7M,GAAK,EACtBgN,EAAE/M,GAAK2M,EAAG3M,EAAI4M,EAAG5M,GAAK,EACf+M,CACT,CAEA,MAAMgJ,EAIJjZ,YAAY6V,GACV5V,KAAK4V,SAAWA,EAChB5V,KAAKG,KAAOH,KAAK4V,SAASzV,KAE1BH,KAAKiZ,UAAY,GAGjBjZ,KAAKkZ,gBAAkB,GAEvBlZ,KAAKmZ,WAAa,EACnB,CAEDrD,QACE9V,KAAKoZ,gBAAkBpZ,KAAKG,KAAKqV,UAAUlR,cAC3CqL,EAAe3P,KAAKiZ,UAAWjZ,KAAKG,KAAKqV,UAAU5C,KACnD5S,KAAKG,KAAKgU,WAAWC,aACrBpU,KAAKqZ,sBAAuB,CAC7B,CAEDrD,SACQ,MAAEpG,GAAAA,EAAI0J,QAAAA,EAASzJ,GAAAA,EAAI0J,QAAAA,EAASpZ,KAAAA,GAASH,KAAK4V,UACxCJ,UAAAA,GAAcrV,EAChBqZ,EAAehE,EAAUzR,WAAWT,IACpCmW,EAAejE,EAAUzR,WAAWF,IAE1C,IAAK2R,EAAU/L,cAAgBtJ,EAAKmT,WAAWC,YAC7C,OAGFwF,EAAoB/Y,KAAKkZ,gBAAiBI,EAASC,GACnDR,EAAoB/Y,KAAKmZ,WAAYvJ,EAAIC,GAErCvL,IAAAA,EAAiB,EAAI4L,EAAmBoJ,EAASC,GACjCrJ,EAAmBN,EAAIC,GACvB7P,KAAKoZ,gBAGrB9U,GAAAA,EAAgBkR,EAAUzR,WAAWN,QAAW+R,EAAUzR,WAAWN,QAAU,KACjFzD,KAAKqZ,sBAAuB,GAG1B/U,EAAgBkV,EACdrZ,GAAAA,EAAKC,QAAQsZ,eACT1Z,KAAKqZ,sBACNrZ,KAAKoZ,iBAAmB5D,EAAUzR,WAAWN,QAAS,CAE3D,MAAM6S,EAAY,GAAMkD,EAAelV,IAAkBkV,EAAe,KACnErZ,EAAKmB,SAAS,aAAc,CAAEgV,UAAAA,IAAazU,kBAC9C1B,EAAKqW,eAAeF,EAAS,MAI/BhS,EAAgBkV,EAxEI,KAwEYA,EAAelV,QAExCA,EAAgBmV,IAEzBnV,EAAgBmV,EA7EM,KA6EUnV,EAAgBmV,IAGlDjE,EAAU5C,IAAI5P,EAAIhD,KAAK2Z,0BAA0B,IAAKrV,GACtDkR,EAAU5C,IAAI3P,EAAIjD,KAAK2Z,0BAA0B,IAAKrV,GAEtDkR,EAAUlB,aAAahQ,GACvBkR,EAAUnC,qBACX,CAEDqD,MACQ,MAAEvW,KAAAA,GAASH,MACTwV,UAAAA,GAAcrV,EAClBqV,EAAUlR,cAAgBkR,EAAUzR,WAAWN,UAC3CzD,KAAKqZ,sBACNlZ,EAAKC,QAAQsZ,aAClBvZ,EAAKuX,QAEL1X,KAAKgX,gBAER,CAOD2C,0BAA0BxH,EAAM7N,GACxB6Q,MAAAA,EAAa7Q,EAAgBtE,KAAKoZ,gBACjC,OAAApZ,KAAKmZ,WAAWhH,IACXnS,KAAKkZ,gBAAgB/G,GAAQnS,KAAKiZ,UAAU9G,IAASgD,CAClE,CAUD6B,eAAe4C,GACP,MAAEzZ,KAAAA,GAASH,MACTwV,UAAAA,GAAcrV,EAElB,IAACqV,EAAU/L,aACb,YAGwB,IAAtBzJ,KAAKmZ,WAAWnW,IAClB4W,GAAgB,GAGlB,MAAMvF,EAAgBmB,EAAUlR,cAGhC,IAAIuV,EACAC,GAA2B,EAE3BzF,EAAgBmB,EAAUzR,WAAWN,QACvCoW,EAAuBrE,EAAUzR,WAAWN,QAEnC4Q,EAAgBmB,EAAUzR,WAAWF,IAC9CgW,EAAuBrE,EAAUzR,WAAWF,KAG5CiW,GAA2B,EAC3BD,EAAuBxF,GAGzB,MAAMwD,EAAmB1X,EAAKmW,UACxBa,EAAmBhX,EAAKmW,UAAY,EAEpCyD,EAAapK,EAAe,CAAE,EAAE6F,EAAU5C,KAChD,IAAIoH,EAAiBrK,EAAe,CAAE,EAAEoK,GAEpCH,IACF5Z,KAAKmZ,WAAWnW,EAAI,EACpBhD,KAAKmZ,WAAWlW,EAAI,EACpBjD,KAAKkZ,gBAAgBlW,EAAI,EACzBhD,KAAKkZ,gBAAgBjW,EAAI,EACzBjD,KAAKoZ,gBAAkB/E,EACvB1E,EAAe3P,KAAKiZ,UAAWc,IAG7BD,IACFE,EAAiB,CACfhX,EAAGhD,KAAK2Z,0BAA0B,IAAKE,GACvC5W,EAAGjD,KAAK2Z,0BAA0B,IAAKE,KAK3CrE,EAAUlB,aAAauF,GAEvBG,EAAiB,CACfhX,EAAGwS,EAAU1C,OAAOT,WAAW,IAAK2H,EAAehX,GACnDC,EAAGuS,EAAU1C,OAAOT,WAAW,IAAK2H,EAAe/W,IAIrDuS,EAAUlB,aAAaD,GAEvB,IAAI4F,GAAiB,EACjB5J,GAAAA,EAAY2J,EAAgBD,KAC9BE,GAAiB,IAGdA,IAAmBH,IAA6B3C,EAMnD,OAJA3B,EAAUf,eAAeoF,QACzBrE,EAAUnC,sBAMZlT,EAAKgU,WAAWC,aAEhBjU,EAAKgU,WAAW4D,YAAY,CAC1BpD,OAAO,EACPmB,MAAO,EACPY,IAAK,IACLC,SAAU,EACViB,aAAc,EACdsC,iBAAkB,GAClBlC,SAAWmC,IACTA,GAAAA,GAAO,IAEHF,GAAkBH,EAA0B,CAC1CG,GAAAA,IACFzE,EAAU5C,IAAI5P,EAAI+W,EAAW/W,GAAKgX,EAAehX,EAAI+W,EAAW/W,GAAKmX,EACrE3E,EAAU5C,IAAI3P,EAAI8W,EAAW9W,GAAK+W,EAAe/W,EAAI8W,EAAW9W,GAAKkX,GAGnEL,EAA0B,CACtBM,MAAAA,EAAe/F,GACNwF,EAAuBxF,GAAiB8F,EACvD3E,EAAUlB,aAAa8F,EAAY,CAGrC5E,EAAUnC,qBAAmB,CAI3B8D,GAAoBhX,EAAKmW,UAAY,GAIvCnW,EAAKqW,eAAelG,EAClBuH,GAAoB,EAAIA,GAAoBsC,EAAK,EAAG,GACrD,EAGLtF,WAAY,KAEVW,EAAUf,eAAeoF,GACzBrE,EAAUnC,qBAAmB,GAGlC,EAoBH,SAASgH,EAAoB7Y,GAC3B,QAAsCA,EAAM4P,OAAQkJ,QAAQ,mBAC9D,CAKA,MAAMC,EAIJxa,YAAY6V,GACV5V,KAAK4V,SAAWA,CACjB,CAMD4E,MAAMvF,EAAOwF,GACLC,MAAAA,EAA8CD,EAAcrJ,OAAQ,UACpEuJ,EAAeD,EAAgB5M,SAAS,aACxC8M,EAAoBF,EAAgB5M,SAAS,eACtB4M,EAAgB5M,SAAS,mBAElD6M,EACF3a,KAAK6a,oBAAoB,aAAc5F,EAAOwF,GACrCG,GACT5a,KAAK6a,oBAAoB,UAAW5F,EAAOwF,EAE9C,CAMDK,IAAI7F,EAAOwF,GACLJ,EAAoBI,IACtBza,KAAK6a,oBAAoB,MAAO5F,EAAOwF,EAE1C,CAMDM,UAAU9F,EAAOwF,GACXJ,EAAoBI,IACtBza,KAAK6a,oBAAoB,YAAa5F,EAAOwF,EAEhD,CAODI,oBAAoBG,EAAY/F,EAAOwF,GAC/B,MAAEta,KAAAA,GAASH,KAAK4V,UACdJ,UAAAA,GAAcrV,EAChB8a,EAA+DD,EAAa,SAC5E5W,EAAcjE,EAAKC,QAAQ6a,GAE7B,IAAA9a,EAAKmB,SAAS2Z,EAAgB,CAAEhG,MAAAA,EAAOwF,cAAAA,IAAiB5Y,iBAI5D,CAAI,GAAuB,mBAAhBuC,EAET,YADAA,EAAYtC,KAAK3B,EAAM8U,EAAOwF,GAIhC,OAAQrW,GACN,IAAK,QACL,IAAK,OACHjE,EAAKiE,KACL,MACF,IAAK,OACHoR,EAAUT,WAAWE,GACrB,MACF,IAAK,gBAGCO,EAAU/L,cACP+L,EAAUzR,WAAWJ,YAAc6R,EAAUzR,WAAWN,QAC7D+R,EAAUT,WAAWE,GACZ9U,EAAKC,QAAQ8a,yBACtB/a,EAAKuX,QAEP,MACF,IAAK,kBACH1X,KAAK4V,SAASzV,KAAK8F,QAAQkV,UAAUC,OAAO,oBAO/C,CACF,EAqBH,MAAMC,EAIJtb,YAAYI,GACLH,KAAAG,KAAOA,EAGZH,KAAKkW,cAAW,EAKhBlW,KAAK4P,GAAK,GAEV5P,KAAK6P,GAAK,GAEV7P,KAAKiW,OAAS,GAEdjW,KAAKsb,OAAS,GAEdtb,KAAKsZ,QAAU,GAEftZ,KAAKuZ,QAAU,GAEfvZ,KAAK2W,SAAW,GAGhB3W,KAAKub,aAAe,GAEpBvb,KAAKwb,YAAc,GACnBxb,KAAKyb,iBAAmB,EAExBzb,KAAK0b,iBAAmB,GAExB1b,KAAK2b,mBAAqB,iBAAkB3W,OAC5ChF,KAAK4b,uBAA0B5W,OAAO6W,aACtC7b,KAAK8b,cAAgB9b,KAAK2b,oBACA3b,KAAK4b,sBAAwBjc,UAAUoc,eAAiB,EAE7E/b,KAAK8b,gBAER3b,EAAKC,QAAQoY,gBAAiB,GAGhCxY,KAAKgc,KAAO,IAAIrG,EAAY3V,MAC5BA,KAAK+D,WAAa,IAAIiV,EAAYhZ,MAClCA,KAAKic,WAAa,IAAI1B,EAAWva,MAEjCG,EAAKgB,GAAG,cAAc,KACpBhB,EAAK+b,OAAO/K,IAAIhR,EAAKgc,WAAY,SAASzP,GAAK1M,KAAKoc,SAAS1P,KAEzD1M,KAAK4b,qBACP5b,KAAKqc,YAAY,UAAW,OAAQ,KAAM,UACjCrc,KAAK2b,oBACd3b,KAAKqc,YAAY,QAAS,QAAS,MAAO,UAU1Clc,EAAKgc,WAAWG,YAAc,OAC9Bnc,EAAKgc,WAAWI,WAAa,QAE7Bvc,KAAKqc,YAAY,QAAS,OAAQ,KAAI,GAG3C,CASDA,YAAYG,EAAMC,EAAMC,EAAIC,GAC1B,MAAQxc,KAAAA,GAASH,MACTkc,OAAAA,GAAW/b,EAEbyc,EAAcD,EAASH,EAAOG,EAAS,GAE7CT,EAAO/K,IAAIhR,EAAKgc,WAAYK,EAAOC,EAAMzc,KAAK6c,cAActQ,KAAKvM,OACjEkc,EAAO/K,IAAInM,OAAQwX,EAAO,OAAQxc,KAAK8c,cAAcvQ,KAAKvM,OAC1Dkc,EAAO/K,IAAInM,OAAQwX,EAAOE,EAAI1c,KAAK+c,YAAYxQ,KAAKvM,OAChD4c,GACFV,EAAO/K,IAAIhR,EAAKgc,WAAYS,EAAa5c,KAAK+c,YAAYxQ,KAAKvM,MAElE,CAKD6c,cAAcnQ,GAORsQ,IAAAA,EACAtQ,IAAW,cAAXA,EAAEjL,MAA0C,UAAlBiL,EAAEuQ,eAC9BD,GAAiB,GAMfA,GAAkBtQ,EAAEwQ,OAAS,EAC/B,OAGI,MAAE/c,KAAAA,GAASH,KAGZG,EAAKuS,OAAOC,OAKbxS,EAAKmB,SAAS,cAAe,CAAEmZ,cAAe/N,IAAK7K,mBAInDmb,IACF7c,EAAKgd,gBAILnd,KAAKod,8BAA8B1Q,IAGrCvM,EAAKgU,WAAW4B,UAEhB/V,KAAKqd,cAAc3Q,EAAG,QAEtB1M,KAAKsd,aAAc,EAEW,IAA1Btd,KAAKyb,mBACPzb,KAAKkW,SAAW,KAGhBvG,EAAe3P,KAAKsZ,QAAStZ,KAAK4P,KAGhC5P,KAAKyb,iBAAmB,GAE1Bzb,KAAKud,iBACLvd,KAAKoW,cAAe,GAEpBpW,KAAKoW,cAAe,GAlCpB1J,EAAE9K,gBAoCL,CAKDkb,cAAcpQ,GACZA,EAAE9K,iBAEG5B,KAAKyb,mBAIVzb,KAAKqd,cAAc3Q,EAAG,SAEb1M,KAAAG,KAAKmB,SAAS,cAAe,CAAEmZ,cAAe/N,IAAK7K,mBAI9B,IAA1B7B,KAAKyb,kBAA2Bzb,KAAKwd,WA4B9Bxd,KAAKyb,iBAAmB,IAAMzb,KAAKyd,YAC5Czd,KAAK0d,cAEL1d,KAAKyd,WAAY,EAGjBzd,KAAK2d,qBAEL3d,KAAK+D,WAAW+R,QAEhB9V,KAAK4d,eACL5d,KAAK6d,mBAtCA7d,KAAKkW,UACRlW,KAAK8d,0BAIH9d,KAAKkW,WAAalW,KAAKwd,aACrBxd,KAAKyd,YACPzd,KAAKyd,WAAY,EACjBzd,KAAK+D,WAAW2S,OAGlB1W,KAAKwd,YAAa,EAClBxd,KAAKud,iBAGLvd,KAAK2d,qBACL3d,KAAK+d,cAAgBC,KAAK7D,MAE1Bna,KAAKie,qBAAsB,EAC3BtO,EAAe3P,KAAKwb,YAAaxb,KAAK4P,IACtC5P,KAAK2W,SAAS3T,EAAI,EAClBhD,KAAK2W,SAAS1T,EAAI,EAClBjD,KAAKgc,KAAKlG,QAEV9V,KAAK4d,eACL5d,KAAK6d,oBAeV,CAKDH,cACM1d,KAAKwd,aACPxd,KAAKwd,YAAa,EAIbxd,KAAKie,qBACRje,KAAKke,iBAAgB,GAGvBle,KAAKgc,KAAKtF,MACV1W,KAAKkW,SAAW,KAEnB,CAKD6G,YAAYrQ,GACL1M,KAAKyb,mBAIVzb,KAAKqd,cAAc3Q,EAAG,OAElB1M,KAAKG,KAAKmB,SAAS,YAAa,CAAEmZ,cAAe/N,IAAK7K,mBAI5B,IAA1B7B,KAAKyb,mBACPzb,KAAKsd,aAAc,EACnBtd,KAAK4d,eAED5d,KAAKwd,WACPxd,KAAK0d,eACK1d,KAAKyd,YAAczd,KAAKoW,cAElCpW,KAAKme,WAAWzR,IAIhB1M,KAAKyb,iBAAmB,GAAKzb,KAAKyd,YACpCzd,KAAKyd,WAAY,EACjBzd,KAAK+D,WAAW2S,MAEc,IAA1B1W,KAAKyb,mBAEPzb,KAAKkW,SAAW,KAChBlW,KAAK2d,wBAGV,CAKDE,kBACM7d,KAAKwd,YAAcxd,KAAKyd,aAC1Bzd,KAAKke,kBAEDle,KAAKwd,WAEFnN,EAAYrQ,KAAK4P,GAAI5P,KAAKiW,SAC7BjW,KAAKgc,KAAKhG,WAGP3F,EAAYrQ,KAAK4P,GAAI5P,KAAKiW,UACvB5F,EAAYrQ,KAAK6P,GAAI7P,KAAKsb,UAChCtb,KAAK+D,WAAWiS,SAIpBhW,KAAKoe,oBACLpe,KAAKqe,IAAMC,sBAAsBte,KAAK6d,eAAetR,KAAKvM,OAE7D,CAODke,gBAAgBxK,GACd,MAAM6K,EAAOP,KAAK7D,MACZxJ,EAAW4N,EAAOve,KAAK+d,cAEzBpN,EAAW,KAAO+C,IAKtB1T,KAAK2W,SAAS3T,EAAIhD,KAAKwe,aAAa,IAAK7N,GACzC3Q,KAAK2W,SAAS1T,EAAIjD,KAAKwe,aAAa,IAAK7N,GAEzC3Q,KAAK+d,cAAgBQ,EACrB5O,EAAe3P,KAAKwb,YAAaxb,KAAK4P,IACtC5P,KAAKie,qBAAsB,EAC5B,CAMDE,WAAWzR,GACT,MAAQ4G,WAAAA,GAAetT,KAAKG,KAGxBmT,GAAAA,EAAWC,YAIb,YADAD,EAAWyD,YAAY,GAAG,GAK5B,GAAIrK,EAAEjL,KAAKgd,QAAQ,UAAY,EAC7B,OAIF,GAAe,YAAX/R,EAAEjL,MAAwC,UAAlBiL,EAAEuQ,YAE5B,YADAjd,KAAKic,WAAWzB,MAAMxa,KAAKsZ,QAAS5M,GAKtC,MAAMgS,EAAW1e,KAAKG,KAAKC,QAAQue,gBApWd,IAoWmD,EAKpE3e,KAAK4e,WACP5e,KAAKud,iBAEDrN,EAAmBlQ,KAAKub,aAAcvb,KAAKsZ,SA3W5B,IA4WjBtZ,KAAKic,WAAWlB,UAAU/a,KAAKsZ,QAAS5M,KAG1CiD,EAAe3P,KAAKub,aAAcvb,KAAKsZ,SACvCtZ,KAAK4e,UAAYjY,YAAW,KAC1B3G,KAAKic,WAAWnB,IAAI9a,KAAKsZ,QAAS5M,GAClC1M,KAAKud,gBAAc,GAClBmB,GAEN,CAKDnB,iBACMvd,KAAK4e,YACPC,aAAa7e,KAAK4e,WAClB5e,KAAK4e,UAAY,KAEpB,CASDJ,aAAarM,EAAMxB,GAEjB,MAAMmO,EAAe9e,KAAK4P,GAAGuC,GAAQnS,KAAKwb,YAAYrJ,GAElD,OAAA9O,KAAK8M,IAAI2O,GAAgB,GAAKnO,EAAW,EACpCmO,EAAenO,EAGjB,CACR,CAKDiN,eACM5d,KAAKqe,MACPU,qBAAqB/e,KAAKqe,KAC1Bre,KAAKqe,IAAM,KAEd,CAMDjB,8BAA8B1Q,GAG5BA,OAAAA,EAAE9K,kBACK,CACR,CAUDyb,cAAc3Q,EAAGuQ,GACf,GAAIjd,KAAK4b,qBAAsB,CACvBoD,MAAAA,EAAAA,EAEAC,EAAejf,KAAK0b,iBAAiB9N,WAAWsR,GAC7CA,EAAcpP,KAAOkP,EAAaG,YAGvB,OAAhBlC,GAAwBgC,GAE1B,EAAAjf,KAAK0b,iBAAiB0D,OAAOH,EAAc,GAClB,SAAhBhC,IAET,IAFmCgC,EAEnCjf,KAAK0b,iBAAiBjb,KAAKT,KAAKqf,wBAAwBL,EAAc,CAAE,IAC/DC,GAET,GAAAjf,KAAKqf,wBAAwBL,EAAchf,KAAK0b,iBAAiBuD,IAGnEjf,KAAKyb,iBAAmBzb,KAAK0b,iBAAiB9V,OAI1C5F,KAAKyb,iBAAmB,GAC1B9L,EAAe3P,KAAK4P,GAAI5P,KAAK0b,iBAAiB,IAG5C1b,KAAKyb,iBAAmB,GAC1B9L,EAAe3P,KAAK6P,GAAI7P,KAAK0b,iBAAiB,GAE3C,KAAA,CACC4D,MAAAA,EAAAA,EAENtf,KAAKyb,iBAAmB,EACpB6D,EAAW7d,KAAKgd,QAAQ,UAGtBa,EAAAA,EAAWC,SAAWD,EAAWC,QAAQ3Z,OAAS,IACpD5F,KAAKqf,wBAAwBC,EAAWC,QAAQ,GAAIvf,KAAK4P,IACzD5P,KAAKyb,mBACD6D,EAAWC,QAAQ3Z,OAAS,IAC9B5F,KAAKqf,wBAAwBC,EAAWC,QAAQ,GAAIvf,KAAK6P,IACzD7P,KAAKyb,sBAKTzb,KAAKqf,wBAAqD3S,EAAI1M,KAAK4P,IAC/C,OAAhBqN,EAEFjd,KAAKyb,iBAAmB,EAExBzb,KAAKyb,mBAAA,CAIZ,CAGD2C,oBACEzO,EAAe3P,KAAKiW,OAAQjW,KAAK4P,IACjCD,EAAe3P,KAAKsb,OAAQtb,KAAK6P,GAClC,CAGD8N,qBACEhO,EAAe3P,KAAKsZ,QAAStZ,KAAK4P,IAClCD,EAAe3P,KAAKuZ,QAASvZ,KAAK6P,IAClC7P,KAAKoe,mBACN,CAEDN,0BACM,GAAA9d,KAAKG,KAAKmT,WAAWC,YAEvBvT,KAAKkW,SAAW,QACX,CAEL,MAAMsJ,EAAOnc,KAAK8M,IAAInQ,KAAK4P,GAAG5M,EAAIhD,KAAKsZ,QAAQtW,GAAKK,KAAK8M,IAAInQ,KAAK4P,GAAG3M,EAAIjD,KAAKsZ,QAAQrW,GAEtF,GAAa,IAATuc,EAAY,CAERC,MAAAA,EAAcD,EAAO,EAAI,IAAM,IAEjCnc,KAAK8M,IAAInQ,KAAK4P,GAAG6P,GAAezf,KAAKsZ,QAAQmG,KAvgB3B,KAwgBpBzf,KAAKkW,SAAWuJ,EAAA,CAAA,CAIvB,CAUDJ,wBAAwB3S,EAAGsD,GACzB,OAAAA,EAAEhN,EAAI0J,EAAEgT,MAAQ1f,KAAKG,KAAKwf,OAAO3c,EACjCgN,EAAE/M,EAAIyJ,EAAEkT,MAAQ5f,KAAKG,KAAKwf,OAAO1c,EAE7B,cAAeyJ,EACjBsD,EAAEF,GAAKpD,EAAEyS,eACiB,IAAjBzS,EAAEmT,aACX7P,EAAEF,GAAKpD,EAAEmT,YAGJ7P,CACR,CAMDoM,SAAS1P,GAEH1M,KAAKG,KAAKmT,WAAWC,cACvB7G,EAAE9K,iBACF8K,EAAEoT,kBAEL,EAqBH,MAAMC,EAIJhgB,YAAYI,GACVH,KAAKG,KAAOA,EACZH,KAAKgD,EAAI,EAGThD,KAAKggB,gBAAa,EAGlBhgB,KAAKigB,iBAAc,EAEnBjgB,KAAKkgB,eACN,CAQD1M,OAAO2M,GACL,MAAQhgB,KAAAA,GAASH,KACXogB,EAAgB/c,KAAK4M,MACzB9P,EAAK8B,aAAae,EAAI7C,EAAK8B,aAAae,EAAI7C,EAAKC,QAAQigB,SAKrDC,EAAqBF,IAAkBpgB,KAAKggB,WAE9CM,IACFtgB,KAAKggB,WAAaI,EAClBpgB,KAAKsY,OAAOtY,KAAK8W,kBAGnB9W,KAAKigB,YAAYhf,SAAQ,CAACsf,EAAYpe,KAChCme,GACF9P,EAAa+P,EAAWniB,IAAK+D,EAAQnC,KAAKwgB,sBACZxgB,KAAKggB,YAGjCG,GAAgBI,EAAWvZ,OAC7BuZ,EAAWvZ,MAAMwM,WAGtB,CAKD0M,gBAGOlgB,KAAAygB,mBAAqB,EAC1BzgB,KAAK0gB,mBAAqB,EAG1B1gB,KAAKggB,WAAa,EAGlBhgB,KAAKwgB,sBAAuB,CAC7B,CAMDG,gBACE3gB,KAAKigB,YAAc,GAInB,IAAA,IAASW,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,MAAMxiB,EAAKJ,EAAc,cAAc,EAAOgC,KAAKG,KAAKiH,WACxDhJ,EAAGwJ,aAAa,OAAQ,SACxBxJ,EAAGwJ,aAAa,uBAAwB,SACxCxJ,EAAGwJ,aAAa,cAAe,QAG/BxJ,EAAGM,MAAMmiB,QAAiB,IAAND,EAAW,QAAU,OAEzC5gB,KAAKigB,YAAYxf,KAAK,CACpBrC,GAAAA,GAED,CAEJ,CAKD0iB,cACS,OAAA9gB,KAAKG,KAAKsF,cAAgB,CAClC,CAiBDsR,YAAYyI,EAAMuB,EAASC,GACnB,MAAE7gB,KAAAA,GAASH,KACbihB,IAAAA,EAAW9gB,EAAK+gB,eAAiB1B,EAC/B2B,MAAAA,EAAYhhB,EAAKsF,cAEnBtF,GAAAA,EAAKihB,UAAW,CAClBH,EAAW9gB,EAAKkhB,eAAeJ,GACzBK,MAAAA,GAAY9B,EAAO2B,GAAaA,EAGpC3B,EAFE8B,GAAYH,EAAY,EAEnBG,EAGAA,EAAWH,CAAA,MAGhBF,EAAW,EACbA,EAAW,EACFA,GAAYE,IACrBF,EAAWE,EAAY,GAEzB3B,EAAOyB,EAAW9gB,EAAK+gB,eAGzB/gB,EAAK+gB,eAAiBD,EACtBjhB,KAAKygB,oBAAsBjB,EAE3Brf,EAAKgU,WAAWoN,iBAEVC,MAAAA,EAAexhB,KAAK8W,gBAC1B,GAAKiK,EAGE,CACL5gB,EAAKgU,WAAW4D,YAAY,CAC1B0J,cAAc,EACd3L,MAAO9V,KAAKgD,EACZ0T,IAAK8K,EACL7K,SAAUqK,GAAa,EACvB9G,iBAAkB,GAClBtC,aAAc,EACdI,SAAWhV,IACThD,KAAKsY,OAAOtV,EAAC,EAEf6R,WAAY,KACL7U,KAAA0hB,iBACLvhB,EAAKgT,aAAW,IAIhBwO,IAAAA,EAAWxhB,EAAK+gB,eAAiB/gB,EAAKqS,UACtCrS,GAAAA,EAAKihB,UAAW,CACZQ,MAAAA,GAAgBD,EAAWR,GAAaA,EAG5CQ,EAFEC,GAAgBT,EAAY,EAEnBS,EAGAA,EAAeT,CAAA,CAM1B9d,KAAK8M,IAAIwR,GAAY,GACvB3hB,KAAK0hB,gBAAc,MAlCrB1hB,KAAKsY,OAAOkJ,GACZxhB,KAAK0hB,iBAqCHlC,GAAAA,EACK,OAAA,CAEV,CAMD1I,gBACS,OAAA9W,KAAKggB,WAAahgB,KAAKygB,kBAC/B,CAMDlN,YACS,OAAAvT,KAAKgD,IAAMhD,KAAK8W,eACxB,CAKD4K,iBACQ,MAAEvhB,KAAAA,GAASH,KACX6hB,EAAqB7hB,KAAK0gB,mBAAqB1gB,KAAKygB,mBAE1D,IAAKoB,EACH,OAGF7hB,KAAK0gB,mBAAqB1gB,KAAKygB,mBAE/BtgB,EAAKqS,UAAYrS,EAAK+gB,eAEtB,IACIY,EADAC,EAAU1e,KAAK8M,IAAI0R,GAGnBE,GAAW,IACb/hB,KAAKwgB,sBAAwBqB,GAAsBA,EAAqB,GAAS,EAAA,GACjFE,EAAU,GAGHnB,IAAAA,IAAAA,EAAI,EAAGA,EAAImB,EAASnB,IACvBiB,EAAqB,GACvBC,EAAa9hB,KAAKigB,YAAY+B,QAC9BhiB,KAAKigB,YAAY,GAAK6B,EAEtB9hB,KAAKwgB,uBAELhQ,EAAasR,EAAW1jB,IAAK4B,KAAKwgB,qBAAuB,GAAKxgB,KAAKggB,YAEnE7f,EAAK8hB,WAAWH,EAAa3hB,EAAKqS,UAAYuP,EAAWnB,EAAI,KAE7DkB,EAAa9hB,KAAKigB,YAAYiC,MAC9BliB,KAAKigB,YAAYkC,QAAQL,GAEzB9hB,KAAKwgB,uBAELhQ,EAAasR,EAAW1jB,GAAI4B,KAAKwgB,qBAAuBxgB,KAAKggB,YAE7D7f,EAAK8hB,WAAWH,EAAa3hB,EAAKqS,UAAYuP,EAAWnB,EAAI,IAU7Dvd,KAAK8M,IAAInQ,KAAKwgB,sBAAwB,KAAOxgB,KAAKuT,cACpDvT,KAAKkgB,gBACLlgB,KAAKwT,UAIPrT,EAAKgU,WAAWC,aAEhBpU,KAAKigB,YAAYhf,SAAQ,CAACsf,EAAYK,KAChCL,EAAWvZ,OAEbuZ,EAAWvZ,MAAMiM,YAAkB,IAAN2N,EAAO,IAIxCzgB,EAAKqV,UAAYxV,KAAKigB,YAAY,GAAGjZ,MACrC7G,EAAKqP,cAAc4S,WAAWP,GAE1B1hB,EAAKqV,WACPrV,EAAKqV,UAAUnC,sBAGjBlT,EAAKmB,SAAS,SACf,CAQDgX,OAAOtV,EAAGqf,GAER,IAAIC,EAEAlK,GAECpY,KAAKG,KAAKihB,WAAaiB,IAE1BC,GAAwBtiB,KAAKggB,WAAahgB,KAAKygB,mBAAsBzd,GAAKhD,KAAKggB,WAC/EsC,GAAuBtiB,KAAKG,KAAKqS,UACjC4F,EAAQ/U,KAAK4M,MAAMjN,EAAIhD,KAAKgD,IAEvBsf,EAAsB,GAAKlK,EAAQ,GAChCkK,GAAuBtiB,KAAKG,KAAKsF,cAAgB,GAAK2S,EAAQ,KACpEpV,EAAIhD,KAAKgD,EAxTgB,IAwTXoV,IAIlBpY,KAAKgD,EAAIA,EACTwN,EAAaxQ,KAAKG,KAAKiH,UAAWpE,GAElChD,KAAKG,KAAKmB,SAAS,iBAAkB,CAAE0B,EAAAA,EAAGqf,SAAAA,GAC3C,EAcH,MAAME,EAIJxiB,YAAYI,GACVH,KAAKG,KAAOA,EAEZA,EAAKgB,GAAG,cAAc,KAEfhB,EAAKC,QAAQ2N,mBAIhB/N,KAAKwiB,aAGPriB,EAAK+b,OAAO/K,IAAI9S,SAAU,UAAW2B,KAAKyiB,WAAWlW,KAAKvM,OAC1DG,EAAK+b,OAAO/K,IAAI9S,SAAU,UAAW2B,KAAK0iB,WAAWnW,KAAKvM,MAAK,IAG3D2iB,MAAAA,EAAgDtkB,SAAS,cAC/D8B,EAAKgB,GAAG,WAAW,KACbhB,EAAKC,QAAQwiB,aACVD,GACA3iB,KAAK6iB,aACVF,EAAkBG,OAAK,GAG5B,CAEDN,aACOxiB,KAAK6iB,cACR7iB,KAAKG,KAAK8F,QAAQ6c,QAClB9iB,KAAK6iB,aAAc,EAEtB,CAKDH,WAAWhW,GACH,MAAEvM,KAAAA,GAASH,KAEbG,GAAAA,EAAKmB,SAAS,UAAW,CAAEmZ,cAAe/N,IAAK7K,kBA7kFvD,SAAwB6K,GAClBA,GAAY,IAAZA,EAAEC,OAAeD,EAAEE,SAAWF,EAAEG,SAAWH,EAAEI,QAAUJ,EAAEK,SACpD,OAAA,CAEX,CA6kFQC,CAAeN,GAIjB,OAIF,IAAIqW,EAEA5Q,EACA6Q,EAEJ,OAAQtW,EAAEuW,SACR,KAAK,GACC9iB,EAAKC,QAAQ8iB,SACfH,EAAgB,SAElB,MACF,KAAK,GACHA,EAAgB,aAChB,MACF,KAAK,GACH5Q,EAAO,IACP,MACF,KAAK,GACHA,EAAO,IACP,MACF,KAAK,GACHA,EAAO,IACP6Q,GAAY,EACZ,MACF,KAAK,GACHA,GAAY,EACZ7Q,EAAO,IACP,MACF,KAAK,EACHnS,KAAKwiB,aAKT,GAAIrQ,EAAM,CAERzF,EAAE9K,iBAEI,MAAE4T,UAAAA,GAAcrV,EAElBA,EAAKC,QAAQ+iB,WACD,MAAThR,GACAhS,EAAKsF,cAAgB,EAC1Bsd,EAAgBC,EAAY,OAAS,OAC5BxN,GAAaA,EAAUlR,cAAgBkR,EAAUzR,WAAWX,MAKrEoS,EAAU5C,IAAIT,IAAS6Q,GAAY,GAAM,GACzCxN,EAAU/B,MAAM+B,EAAU5C,IAAI5P,EAAGwS,EAAU5C,IAAI3P,GAAC,CAIhD8f,IACFrW,EAAE9K,iBACFzB,EAAK4iB,KAER,CAODN,WAAW/V,GACT,MAAQ0W,SAAAA,GAAapjB,KAAKG,KACtB9B,WAAaqO,EAAE0E,QACZgS,IAAa1W,EAAE0E,SACdgS,EAAStV,SAA8BpB,EAAE0E,SAE/CgS,EAASN,OAEZ,EAUH,MAAMO,EAMJtjB,YAAYujB,GACVtjB,KAAKsjB,MAAQA,EACP,MACJlS,OAAAA,EACAyD,WAAAA,EACA/M,UAAAA,EACAyb,SAAAA,GAEED,EAEA,IACF3S,SAAAA,EACAmE,OAAAA,GACEwO,EAGJtjB,KAAKujB,SAAWA,EAGhB,MAAMvhB,EAAO8F,EAAY,YAAc,UACjCE,EAAYsb,EAAMthB,GAGnBhC,KAAAwjB,QAAUpS,EAEfpR,KAAKyjB,YAAc5O,EAEnBlE,EAAWA,GAAY,IACvBmE,EAASA,GAzCU,2BA4CnB9U,KAAK0jB,iBAAmB1jB,KAAK0jB,iBAAiBnX,KAAKvM,MASnDA,KAAK2jB,eAAiBhd,YAAW,KAC/B+J,EAAmBU,EAAQpP,EAAM2O,EAAUmE,GAC3C9U,KAAK2jB,eAAiBhd,YAAW,KAC/ByK,EAAO3E,iBAAiB,gBAAiBzM,KAAK0jB,kBAAkB,GAChEtS,EAAO3E,iBAAiB,mBAAoBzM,KAAK0jB,kBAAkB,GAMnE1jB,KAAK2jB,eAAiBhd,YAAW,KAC/B3G,KAAK4jB,oBAAkB,GACtBjT,EAAW,KACdS,EAAO1S,MAAMsD,GAAQgG,CAAAA,GACpB,GAAE,GACJ,EACJ,CAMD0b,iBAAiBhX,GACXA,EAAE0E,SAAWpR,KAAKwjB,SACpBxjB,KAAK4jB,oBAER,CAKDA,qBACO5jB,KAAK6jB,YACR7jB,KAAK6jB,WAAY,EACjB7jB,KAAKujB,WACDvjB,KAAKyjB,aACPzjB,KAAKyjB,cAGV,CAGD7c,UACM5G,KAAK2jB,gBACP9E,aAAa7e,KAAK2jB,gBA5yFtBjT,EA8yFwB1Q,KAAKwjB,SAC3BxjB,KAAKwjB,QAAQ9T,oBAAoB,gBAAiB1P,KAAK0jB,kBAAkB,GACzE1jB,KAAKwjB,QAAQ9T,oBAAoB,mBAAoB1P,KAAK0jB,kBAAkB,GACvE1jB,KAAK6jB,WACR7jB,KAAK4jB,oBAER,EASH,MAAME,EAgBJ/jB,YAAYsX,EAAiBO,EAAcsC,GACpCla,KAAA2W,SAA6B,IAAlBU,EAGhBrX,KAAK+jB,cAAgBnM,GAzBK,IA4B1B5X,KAAKgkB,kBAAoB9J,GA7BK,GA+B1Bla,KAAK+jB,cAAgB,IACvB/jB,KAAKikB,iBAAmBjkB,KAAKgkB,kBACR3gB,KAAK+M,KAAK,EAAIpQ,KAAK+jB,cAAgB/jB,KAAK+jB,eAEhE,CAQDG,UAAUC,EAAeC,GAMvB,IACIC,EADAvF,EAAe,EAGnBsF,GAAa,IAEb,MAAME,EAAoBjhB,KAAKkhB,KAAOvkB,KAAK+jB,cAAgB/jB,KAAKgkB,kBAAoBI,GAEpF,GAA2B,IAAvBpkB,KAAK+jB,cACPM,EAAQrkB,KAAK2W,SAAW3W,KAAKgkB,kBAAoBG,EAEjDrF,GAAgBqF,EAAgBE,EAAQD,GAAaE,EAErDtkB,KAAK2W,SAAWmI,GACM9e,KAAKgkB,kBAAqBK,EAC5BC,OACX,GAAAtkB,KAAK+jB,cAAgB,EAAG,CACjCM,EAAS,EAAIrkB,KAAKikB,kBACLjkB,KAAK+jB,cAAgB/jB,KAAKgkB,kBAAoBG,EAAgBnkB,KAAK2W,UAEhF,MAAM6N,EAAanhB,KAAKohB,IAAIzkB,KAAKikB,iBAAmBG,GAC9CM,EAAarhB,KAAKshB,IAAI3kB,KAAKikB,iBAAmBG,GAEpDtF,EAAewF,GACKH,EAAgBK,EAAaH,EAAQK,GAEzD1kB,KAAK2W,SAAWmI,GACM9e,KAAKgkB,kBACPhkB,KAAK+jB,cACLO,IACEtkB,KAAKikB,iBAAmBE,EAAgBO,EAC1C1kB,KAAKikB,iBAAmBI,EAAQG,EAAA,CAK/C1F,OAAAA,CACR,EAKH,MAAM8F,EAIJ7kB,YAAYujB,GACVtjB,KAAKsjB,MAAQA,EAEP,MACJxN,MAAAA,EACAY,IAAAA,EACAC,SAAAA,EACAqB,SAAAA,EACAnD,WAAAA,EACA0O,SAAAA,EACA3L,aAAAA,EACAsC,iBAAAA,GACEoJ,EAGJtjB,KAAKujB,SAAWA,EAEhB,MAAMsB,EAAQ,IAAIf,EAAYnN,EAAUiB,EAAcsC,GACtD,IAAI4K,EAAW9G,KAAK7D,MAChBgK,EAAgBrO,EAAQY,EAE5B,MAAMqO,EAAgB,KAChB/kB,KAAKglB,OACPb,EAAgBU,EAAMX,UAAUC,EAAenG,KAAK7D,MAAQ2K,GAGxDzhB,KAAK8M,IAAIgU,GAAiB,GAAK9gB,KAAK8M,IAAI0U,EAAMlO,UAAY,IAE5DqB,EAAStB,GACL7B,GACFA,IAEF7U,KAAKujB,aAELuB,EAAW9G,KAAK7D,MAChBnC,EAASmM,EAAgBzN,GACzB1W,KAAKglB,KAAO1G,sBAAsByG,IAAa,EAKhD/kB,KAAAglB,KAAO1G,sBAAsByG,EACnC,CAGDne,UACM5G,KAAKglB,MAAQ,GACfjG,qBAAqB/e,KAAKglB,MAE5BhlB,KAAKglB,KAAO,IACb,EAkCH,MAAMC,EACJllB,cAEEC,KAAKklB,iBAAmB,EACzB,CAKDnN,YAAYuL,GACLtjB,KAAAmlB,OAAO7B,GAAO,EACpB,CAKD5O,gBAAgB4O,GACdtjB,KAAKmlB,OAAO7B,EACb,CAMD6B,OAAO7B,EAAO8B,GAERC,IAAAA,EACAD,OACFC,EADED,EACU,IAAIR,EAAgBtB,GAEpB,IAAID,EAAaC,GAG/BtjB,KAAKklB,iBAAiBzkB,KAAK4kB,GAC3BA,EAAU9B,SAAW,IAAMvjB,KAAKslB,KAAKD,GAE9BA,CACR,CAKDC,KAAKD,GACHA,EAAUze,UACV,MAAMzE,EAAQnC,KAAKklB,iBAAiBzG,QAAQ4G,GACxCljB,GACF,GAAAnC,KAAKklB,iBAAiB9F,OAAOjd,EAAO,EAEvC,CAED4T,UACO/V,KAAAklB,iBAAiBjkB,SAASokB,IAC7BA,EAAUze,SAAO,IAEnB5G,KAAKklB,iBAAmB,EACzB,CAKD9Q,aACEpU,KAAKklB,iBAAmBllB,KAAKklB,iBAAiBpkB,QAAQukB,IAChDA,EAAU/B,MAAM3O,QAClB0Q,EAAUze,WACH,IAKZ,CAED2a,iBACEvhB,KAAKklB,iBAAmBllB,KAAKklB,iBAAiBpkB,QAAQukB,IAChDA,EAAU/B,MAAM7B,eAClB4D,EAAUze,WACH,IAKZ,CAcD2e,eACE,OAAOvlB,KAAKklB,iBAAiBM,MAAMH,GAC1BA,EAAU/B,MAAM3O,OAE1B,EASH,MAAM8Q,EAIJ1lB,YAAYI,GACVH,KAAKG,KAAOA,EACZA,EAAK+b,OAAO/K,IAAIhR,EAAK8F,QAAS,QAASjG,KAAK0lB,SAASnZ,KAAKvM,MAC3D,CAMD0lB,SAAShZ,GACPA,EAAE9K,iBACF,MAAQ4T,UAAAA,GAAcxV,KAAKG,KAC3B,IAAMwlB,OAAAA,EAAQC,OAAAA,GAAWlZ,EAEpB8I,GAAAA,SAIIrV,KAAKmB,SAAS,QAAS,CAAEmZ,cAAe/N,IAAK7K,iBAItD,GAAI6K,EAAEE,SAAW5M,KAAKG,KAAKC,QAAQylB,aAE7BrQ,GAAAA,EAAU/L,aAAc,CAC1B,IAAI0L,GAAcyQ,EACE,IAAhBlZ,EAAEoZ,UACJ3Q,GAAc,IAEdA,GAAczI,EAAEoZ,UAAY,EAAI,KAElC3Q,EAAa,GAAKA,EAEZpB,MAAAA,EAAgByB,EAAUlR,cAAgB6Q,EAChDK,EAAU1B,OAAOC,EAAe,CAC9B/Q,EAAG0J,EAAES,QACLlK,EAAGyJ,EAAEU,SACN,OAICoI,EAAUF,eACQ,IAAhB5I,EAAEoZ,YAEJH,GAAU,GACVC,GAAU,IAGZpQ,EAAU/B,MACR+B,EAAU5C,IAAI5P,EAAI2iB,EAClBnQ,EAAU5C,IAAI3P,EAAI2iB,GAIzB,EA6EH,MAAMG,EAKJhmB,YAAYI,EAAM6F,GACV1F,MAAAA,EAAO0F,EAAK1F,MAAQ0F,EAAK/H,UAC/B,IAAI+nB,EAAchgB,EAAKuC,KAGnBpI,IAAuB,IAAvBA,EAAKC,QAAQE,GAEf,OAKwC,iBAA/BH,EAAKC,QAAQE,EAAO,SAM7B0lB,EAAc7lB,EAAKC,QAAQE,EAAO,QAGpCH,EAAKmB,SAAS,kBAAmB,CAAE0E,KAAAA,IAEnC,IAAI/H,EAAY,GACZ+H,EAAKigB,UACPhoB,GAAa,gBACbA,GAAc+H,EAAK/H,WAAa,iBAAiB+H,EAAK1F,QAEtDrC,GAAc+H,EAAK/H,WAAa,SAAS+H,EAAK1F,OAI5C2F,IAAAA,EACA/H,EAAU8H,EAAKigB,SAAYjgB,EAAK9H,SAAW,SAAa8H,EAAK9H,SAAW,MAC5EA,GAAAA,EAAsDA,EAAQgoB,cAC9DjgB,EAAUjI,EAAcC,EAAWC,GAE/B8H,EAAKigB,SAAU,CAEjBhgB,EAAUjI,EAAcC,EAAWC,GACnB,WAAZA,IACgC+H,EAASxE,KAAO,UAGhD,IAAE0kB,MAAAA,GAAUngB,EACV,MAAEogB,UAAAA,GAAcpgB,EAGsB,iBAAjC7F,EAAKC,QAAQE,EAAO,WAE7B6lB,EAAQhmB,EAAKC,QAAQE,EAAO,UAG1B6lB,IACFlgB,EAAQkgB,MAAQA,IAGdC,GAAaD,IACalgB,EAAS2B,aAAa,aAAcwe,GAAaD,EAAK,CAItFlgB,EAAQqC,UAxGZ,SAAwB+d,GACtB,GAAwB,iBAAbA,EAQFA,OAAAA,EAGL,IAACA,IAAaA,EAASC,YAClB,MAAA,GAGT,MAAMC,EAAUF,EAChB,IAAIG,EAAM,wFAEV,OAAAA,EAAMA,EAAI5U,MAAM,MAAM6U,KAA4BF,EAAQG,MAAQ,IAO9DH,EAAQI,YACVH,GAAO,8CAAgDD,EAAQI,UAAY,OAG7EH,GAAOD,EAAQK,MAEfJ,GAAO,SAEAA,CACT,CAqEwBK,CAAeb,GAE/BhgB,EAAK8gB,QACP9gB,EAAK8gB,OAAO7gB,EAAS9F,GAGnB6F,EAAK+gB,UACP9gB,EAAQ+gB,QAAWta,IACW,iBAAjB1G,EAAK+gB,QACd5mB,EAAK6F,EAAK+gB,WAEV/gB,EAAK+gB,QAAQra,EAAGzG,EAAS9F,EAAI,GAM7B8mB,MAAAA,EAAWjhB,EAAKihB,UAAY,MAC9B7f,IAAAA,EACa,QAAb6f,GACG9mB,EAAK+mB,SACR/mB,EAAK+mB,OAASlpB,EAAc,oCAAqC,MAAOmC,EAAKgc,aAE/E/U,EAAYjH,EAAK+mB,SAIjBjhB,EAAQkV,UAAUhK,IAAI,uBAGpB/J,EADe,YAAb6f,EACU9mB,EAAKgc,WAGLhc,EAAK8F,SAIrBmB,EAAU9I,YAAY6B,EAAKY,aAAa,YAAakF,EAASD,GAC/D,EAgBH,SAASmhB,EAAgBlhB,EAAS9F,EAAMinB,GACtCnhB,EAAQkV,UAAUhK,IAAI,uBAEtBlL,EAAQ2B,aAAa,gBAAiB,eACtCzH,EAAKgB,GAAG,UAAU,KACXhB,EAAKC,QAAQinB,OAGbphB,EAASqhB,SAFRF,IAEqBjnB,EAAKqS,UAAYrS,EAAKsF,cAAgB,KAGtCtF,EAAKqS,UAAY,GAAA,GAIhD,CAGA,MAAM+U,GAAY,CAChBjnB,KAAM,YACNrC,UAAW,4BACXkoB,MAAO,WACPqB,MAAO,GACPvB,UAAU,EACVgB,SAAU,UACV1e,KAAM,CACJ+d,aAAa,EACbI,KAAM,GACNE,MAAO,4EACPD,UAAW,mBAEbI,QAAS,OACTD,OAAQK,GAIJM,GAAY,CAChBnnB,KAAM,YACNrC,UAAW,4BACXkoB,MAAO,OACPqB,MAAO,GACPvB,UAAU,EACVgB,SAAU,UACV1e,KAAM,CACJ+d,aAAa,EACbI,KAAM,GACNE,MAAO,uCACPD,UAAW,mBAEbI,QAAS,OACTD,OAAQ,CAAC1oB,EAAI+B,KACXgnB,EAAgB/oB,EAAI+B,GAAM,EAAI,GAK5BunB,GAAc,CAClBpnB,KAAM,QACN6lB,MAAO,QACPqB,MAAO,GACPvB,UAAU,EACV1d,KAAM,CACJ+d,aAAa,EACbM,MAAO,wFACPD,UAAW,mBAEbI,QAAS,SAILY,GAAa,CACjBrnB,KAAM,OACN6lB,MAAO,OACPqB,MAAO,GACPvB,UAAU,EACV1d,KAAM,CACJ+d,aAAa,EAEbM,MAAO,uPAGPD,UAAW,kBAEbI,QAAS,cAILa,GAAmB,CACvBtnB,KAAM,YACN2mB,SAAU,MACVO,MAAO,EACPjf,KAAM,CACJ+d,aAAa,EAEbM,MAAO,kIACPD,UAAW,qBAEbG,OAAQ,CAACe,EAAkB1nB,KAEzB,IAAI2nB,EAEAC,EAMEC,MAOAC,EAA0BC,IAC1BJ,IAAcI,IAChBJ,EAAYI,EATa,EAACjqB,EAAWkT,KACvC0W,EAAiB1M,UAAUhK,EAAM,MAAQ,UAAU,oBAAsBlT,EAAS,EAShF+pB,CAAqB,SAAUE,GAAO,EAIpCC,EAA4B,KAChC,IAAKhoB,EAAKqV,UAAU/Q,QAAQ8E,YAM1B,OALA0e,GAAuB,QACnBF,IACFlJ,aAAakJ,GACbA,EAAe,OAKdA,IAEHA,EAAephB,YAAW,KACxBshB,EAAuB9nB,EAAKqV,UAAU/Q,QAAQ8E,aAC9Cwe,EAAe,IAAA,GACd5nB,EAAKC,QAAQgoB,gBAAc,EAIlCjoB,EAAKgB,GAAG,SAAUgnB,GAElBhoB,EAAKgB,GAAG,gBAAiBuL,IACnBvM,EAAKqV,YAAc9I,EAAE1F,OACvBmhB,OAKJhoB,EAAKkoB,GAAGF,0BAA4BA,CAAAA,GAKlCG,GAAmB,CACvBhoB,KAAM,UACNknB,MAAO,EACPV,OAAQ,CAACyB,EAAgBpoB,KACvBA,EAAKgB,GAAG,UAAU,KAChBonB,EAAere,UAAa/J,EAAKqS,UAAY,EACfrS,EAAKC,QAAQooB,kBACbroB,EAAKsF,aAAW,GAC/C,GAgBL,SAASgjB,GAAYrqB,EAAIsqB,GACvBtqB,EAAG+c,UAAUuN,EAAa,MAAQ,UAAU,kBAC9C,CAEA,MAAMC,GAIJ5oB,YAAYI,GACVH,KAAKG,KAAOA,EAGZH,KAAKmoB,+BAA4B,EAGjCnoB,KAAK4oB,2BAAwB,CAC9B,CAEDvc,OACQ,MAAElM,KAAAA,GAASH,KACZA,KAAA6oB,cAAe,EAEpB7oB,KAAK8oB,eAAiB,CACpBpB,GACAH,GACAE,GACAE,GACAC,GACAU,IAGFnoB,EAAKmB,SAAS,cAGdtB,KAAK8oB,eAAepoB,MAAK,CAACqoB,EAAGC,KAEnBD,EAAEvB,OAAS,IAAMwB,EAAExB,OAAS,KAItCxnB,KAAK6F,MAAQ,GAEb7F,KAAK6oB,cAAe,EACpB7oB,KAAK8oB,eAAe7nB,SAASgoB,IAC3BjpB,KAAKkpB,gBAAgBD,EAAa,IAGpC9oB,EAAKgB,GAAG,UAAU,KAChBhB,EAAK8F,QAAQkV,UAAiC,IAAvBhb,EAAKsF,cAAsB,MAAQ,UAAU,kBAAiB,IAGvFtF,EAAKgB,GAAG,iBAAiB,IAAMnB,KAAKmpB,oBACrC,CAKDD,gBAAgBE,GACVppB,KAAK6oB,aACP7oB,KAAK6F,MAAMpF,KACT,IAAIslB,EAAU/lB,KAAKG,KAAMipB,IAG3BppB,KAAK8oB,eAAeroB,KAAK2oB,EAE5B,CAMDD,mBACQ,MAAE/F,SAAAA,EAAU5N,UAAAA,EAAWpV,QAAAA,GAAYJ,KAAKG,KAC1C,IAAEmE,cAAAA,GAAkBkR,EAWxB,GATIxV,KAAKG,KAAKuS,OAAO2W,YAKhBrpB,KAAKG,KAAKuS,OAAOC,SACpBrO,EAAgBkR,EAAUzR,WAAWN,SAGnCa,IAAkBtE,KAAK4oB,uBACzB,OAEF5oB,KAAK4oB,sBAAwBtkB,EAE7B,MAAMglB,EAAoB9T,EAAUzR,WAAWN,QAAU+R,EAAUzR,WAAWJ,UAG1E,GAAAN,KAAK8M,IAAImZ,GAAqB,MAAS9T,EAAU/L,aAInD,OAFAgf,GAAYrF,GAAU,QACtBA,EAASjI,UAAUhT,OAAO,sBAI5Bib,EAASjI,UAAUhK,IAAI,sBAKvBsX,GAAYrF,GAHe9e,IAAkBkR,EAAUzR,WAAWN,QAC9D+R,EAAUzR,WAAWJ,UAAY6R,EAAUzR,WAAWN,UAEda,IAEX,SAA7BlE,EAAQmpB,kBACwB,kBAA7BnpB,EAAQmpB,mBACbnG,EAASjI,UAAUhK,IAAI,sBAE1B,EA8TH,MAAMqY,GAKJzpB,YAAY0B,EAAMF,GAChBvB,KAAKyB,KAAOA,EACRF,GACFG,OAAOC,OAAO3B,KAAMuB,EAEvB,CAEDK,iBACE5B,KAAK6B,kBAAmB,CACzB,EAOH,MAAM2D,GACJzF,cAIOC,KAAAC,WAAa,GAKlBD,KAAKE,SAAW,GAGhBF,KAAKG,UAAO,EAGZH,KAAKI,aAAU,CAChB,CAQDC,UAAUC,EAAMC,EAAIC,EAAW,KACxBR,KAAKE,SAASI,KACjBN,KAAKE,SAASI,GAAQ,IAGxBN,KAAKE,SAASI,GAAMG,KAAK,CAAEF,GAAAA,EAAIC,SAAAA,IAC/BR,KAAKE,SAASI,GAAMI,MAAK,CAACC,EAAIC,IAAOD,EAAGH,SAAWI,EAAGJ,WAElDR,KAAKG,MACPH,KAAKG,KAAKE,UAAUC,EAAMC,EAAIC,EAEjC,CAODK,aAAaP,EAAMC,GACbP,KAAKE,SAASI,KAEhBN,KAAKE,SAASI,GAAQN,KAAKE,SAASI,GAAMQ,QAAOA,GAAWA,EAAOP,KAAOA,KAGxEP,KAAKG,MACPH,KAAKG,KAAKU,aAAaP,EAAMC,EAEhC,CAQDQ,aAAaT,KAASU,GAChB,OAAAhB,KAAKE,SAASI,IAChBN,KAAKE,SAASI,GAAMW,SAASH,IAE3BE,EAAK,GAAKF,EAAOP,GAAGW,MAAMlB,KAAMgB,EAAI,IAGjCA,EAAK,EACb,CAODG,GAAGb,EAAMC,GACFP,KAAKC,WAAWK,KACnBN,KAAKC,WAAWK,GAAQ,IAE1BN,KAAKC,WAAWK,GAAMG,KAAKF,GAKvBP,KAAKG,MACPH,KAAKG,KAAKgB,GAAGb,EAAMC,EAEtB,CAODa,IAAId,EAAMC,GACJP,KAAKC,WAAWK,KAElBN,KAAKC,WAAWK,GAAQN,KAAKC,WAAWK,GAAMQ,QAAOO,GAAad,IAAOc,KAGvErB,KAAKG,MACPH,KAAKG,KAAKiB,IAAId,EAAMC,EAEvB,CAQDe,SAAShB,EAAMiB,GACb,GAAIvB,KAAKG,KACP,OAAOH,KAAKG,KAAKmB,SAAShB,EAAMiB,GAG5BC,MAAAA,EAAAA,IAA8CgoB,GAAgBlpB,EAAMiB,GAE1E,OAAKvB,KAAKC,YAIND,KAAKC,WAAWK,IAClBN,KAAKC,WAAWK,GAAMW,SAASI,IAC7BA,EAASS,KAAK9B,KAAMwB,EAAK,IAItBA,CACR,EAGH,MAAMioB,GAKJ1pB,YAAY0H,EAAUL,GAGpBpH,KAAKiG,QAAUjI,EACb,mCACAyJ,EAAW,MAAQ,GACnBL,GAGEK,IAEDzH,KAAKiG,QAASyB,SAAW,QAEzB1H,KAAKiG,QAAS0B,IAAM,GAEpB3H,KAAKiG,QAASM,IAAMkB,EACrBzH,KAAKiG,QAAQ2B,aAAa,OAAQ,iBAGpC5H,KAAKiG,QAAQ2B,aAAa,cAAe,OAC1C,CAMDtC,iBAAiB3G,EAAOC,GACjBoB,KAAKiG,UAImB,QAAzBjG,KAAKiG,QAAQ/H,SAIfK,EAAeyB,KAAKiG,QAAS,IAAK,QAClCjG,KAAKiG,QAAQvH,MAAMmJ,gBAAkB,MACrC7H,KAAKiG,QAAQvH,MAAMoJ,UAAYG,EAAkB,EAAG,EAAGtJ,EAAQ,MAE/DJ,EAAeyB,KAAKiG,QAAStH,EAAOC,GAEvC,CAEDgI,UACM5G,KAAKiG,QAAQiC,YACflI,KAAKiG,QAAQkC,SAEfnI,KAAKiG,QAAU,IAChB,EAQH,MAAMyjB,GAMJ3pB,YAAYmC,EAAUsC,EAAUrC,GAC9BnC,KAAKwE,SAAWA,EAChBxE,KAAKgG,KAAO9D,EACZlC,KAAKmC,MAAQA,EAGbnC,KAAKiG,aAAU,EAEfjG,KAAKkG,oBAAsB,EAC3BlG,KAAKmG,qBAAuB,EAE5BnG,KAAKrB,MAAQ0F,OAAOrE,KAAKgG,KAAKxH,IAAM6F,OAAOrE,KAAKgG,KAAKrH,QAAU,EAC/DqB,KAAKpB,OAASyF,OAAOrE,KAAKgG,KAAKvH,IAAM4F,OAAOrE,KAAKgG,KAAKpH,SAAW,EAEjEoB,KAAKoG,YAAa,EAClBpG,KAAKqG,UAAW,EAEhBrG,KAAKsG,MAAQzH,EAETmB,KAAKgG,KAAKvE,KACZzB,KAAKyB,KAAOzB,KAAKgG,KAAKvE,KACbzB,KAAKgG,KAAKO,IACnBvG,KAAKyB,KAAO,QAEZzB,KAAKyB,KAAO,OAGdzB,KAAKwE,SAASlD,SAAS,cAAe,CAAEmD,QAASzE,MAClD,CAEDwG,oBACMxG,KAAKyG,cAAgBzG,KAAK0G,mBAE5BC,YAAW,KACL3G,KAAKyG,cACPzG,KAAKyG,YAAYG,UACjB5G,KAAKyG,YAAc,KAAA,GAEpB,IAEN,CAQDI,KAAKC,EAAQC,GACP,GAAA/G,KAAKgH,OAAShH,KAAKiH,iBACrB,GAAKjH,KAAKyG,YAYH,CACCS,MAAAA,EAAgBlH,KAAKyG,YAAYR,QAEnCiB,IAAkBA,EAAcC,eAClCnH,KAAKgH,MAAMI,UAAUC,QAAQH,EAhBV,KAAA,CACfI,MAAAA,EAAiBtH,KAAKwE,SAASzD,aACnC,oBAGCf,KAAKgG,KAAKuB,OAAQvH,KAAKgH,MAAMQ,eAAgBxH,KAAKgG,KAAKuB,KACxDvH,MAEFA,KAAKyG,YAAc,IAAIgjB,GACrBniB,EACAtH,KAAKgH,MAAMI,UACrB,CAUQpH,KAAKiG,UAAYc,GAIjB/G,KAAKwE,SAASlD,SAAS,cAAe,CAAEmD,QAASzE,KAAM8G,OAAAA,IAAUjF,mBAIjE7B,KAAKoI,kBACPpI,KAAKiG,QAAUjI,EAAc,YAAa,OAGtCgC,KAAKkG,qBACPlG,KAAKqI,UAAUvB,KAGjB9G,KAAKiG,QAAUjI,EAAc,iBAC7BgC,KAAKiG,QAAQqC,UAAYtI,KAAKgG,KAAKuC,MAAQ,IAGzCxB,GAAU/G,KAAKgH,OACjBhH,KAAKgH,MAAMwB,mBAAkB,GAEhC,CAODH,UAAUvB,GACF2B,MAAAA,EAA8CzI,KAAK,QAErDA,KAAKwE,SAASlD,SAAS,mBAAoB,CAAEmD,QAASzE,KAAM8G,OAAAA,IAAUjF,mBAI1E7B,KAAK0I,oBAED1I,KAAKgG,KAAK2C,SACZF,EAAaE,OAAS3I,KAAKgG,KAAK2C,QAGlCF,EAAalC,IAAMvG,KAAKgG,KAAKO,IAE7BkC,EAAad,IAAM3H,KAAKgG,KAAK2B,KAAO,GAEpC3H,KAAKsG,MAAQzH,EAET4J,EAAaG,SACf5I,KAAK6I,YAELJ,EAAaK,OAAS,KACpB9I,KAAK6I,UAAQ,EAGfJ,EAAaM,QAAU,KACrB/I,KAAKgJ,SAAO,GAGjB,CAODC,SAASjC,GACPhH,KAAKgH,MAAQA,EACbhH,KAAKqG,UAAW,EAChBrG,KAAKwE,SAAWwC,EAAM7G,IAGvB,CAKD0I,WACO7I,KAAAsG,MAAQzH,EAETmB,KAAKgH,QACPhH,KAAKwE,SAASlD,SAAS,eAAgB,CAAE0F,MAAOhH,KAAKgH,MAAOvC,QAASzE,OAGjEA,KAAKgH,MAAMkC,UACRlJ,KAAKgH,MAAMmC,gBACVnJ,KAAKiG,QAAQiC,aACnBlI,KAAKoJ,SACLpJ,KAAKgH,MAAMwB,mBAAkB,KAG3BxI,KAAKsG,QAAUzH,GAAqBmB,KAAKsG,QAAUzH,IACrDmB,KAAKwG,oBAGV,CAKDwC,UACEhJ,KAAKsG,MAAQzH,EAETmB,KAAKgH,QACPhH,KAAKqJ,eACLrJ,KAAKwE,SAASlD,SAAS,eAAgB,CAAE0F,MAAOhH,KAAKgH,MAAOsC,SAAS,EAAM7E,QAASzE,OACpFA,KAAKwE,SAASlD,SAAS,YAAa,CAAE0F,MAAOhH,KAAKgH,MAAOvC,QAASzE,OAErE,CAKDuJ,YACE,OAAOvJ,KAAKwE,SAASzD,aACnB,mBACAf,KAAKsG,QAAUzH,EACfmB,KAEH,CAEDsJ,UACS,OAAAtJ,KAAKsG,QAAUzH,CACvB,CAKDuJ,iBACE,MAAqB,UAAdpI,KAAKyB,IACb,CAQD6D,iBAAiB3G,EAAOC,GACtB,GAAKoB,KAAKiG,UAINjG,KAAKyG,aACPzG,KAAKyG,YAAYnB,iBAAiB3G,EAAOC,SAIlC4F,SAASlD,SAAS,gBAAiB,CAAEmD,QAASzE,KAAMrB,MAAAA,EAAOC,OAAAA,IAAUiD,mBAI9EtD,EAAeyB,KAAKiG,QAAStH,EAAOC,GAEhCoB,KAAKoI,mBAAqBpI,KAAKsJ,YAAW,CACtCE,MAAAA,GAAwBxJ,KAAKkG,qBAAuBvH,EAE1DqB,KAAKkG,oBAAsBvH,EAC3BqB,KAAKmG,qBAAuBvH,EAExB4K,EACFxJ,KAAKqI,WAAU,GAEfrI,KAAK0I,oBAGH1I,KAAKgH,OAEPhH,KAAKwE,SAASlD,SAAS,kBAAmB,CAAE0F,MAAOhH,KAAKgH,MAAOrI,MAAAA,EAAOC,OAAAA,EAAQ6F,QAASzE,MAAM,CAGlG,CAKDyJ,aACE,OAAOzJ,KAAKwE,SAASzD,aACnB,oBACAf,KAAKoI,kBAAqBpI,KAAKsG,QAAUzH,EACzCmB,KAEH,CAKD0I,oBAWM,GAAA1I,KAAKgG,KAAK2C,OAAQ,CACde,MAAAA,EAAuC1J,KACvC2J,QAAAA,EAAa3J,KAAKwE,SAASzD,aAC/B,mBACAf,KAAKkG,oBACLlG,QAGG0J,EAAME,QAAQC,iBACZF,EAAaG,SAASJ,EAAME,QAAQC,gBAAiB,OAC1DH,EAAMK,MAAQJ,EAAa,KAC3BD,EAAME,QAAQC,gBAAkBG,OAAOL,GAAU,CAGtD,CAKD1C,iBACE,OAAOjH,KAAKwE,SAASzD,aACnB,wBACAf,KAAKoI,iBACLpI,KAEH,CAKD2E,WACM3E,KAAKwE,SAASlD,SAAS,kBAAmB,CAAEmD,QAASzE,OAAQ6B,kBAIjE7B,KAAK6G,MAAK,EACX,CAKDH,kBACE,OAAO1G,KAAKwE,SAASzD,aACnB,uBACAf,KAAKuJ,YACLvJ,KAEH,CAKD4G,UACE5G,KAAKqG,UAAW,EAChBrG,KAAKgH,MAAQ,WAEJxC,SAASlD,SAAS,iBAAkB,CAAEmD,QAASzE,OAAQ6B,mBAIhE7B,KAAKmI,SAEDnI,KAAKyG,cACPzG,KAAKyG,YAAYG,UACjB5G,KAAKyG,YAAc,MAGjBzG,KAAKoI,kBAAoBpI,KAAKiG,UAChCjG,KAAKiG,QAAQ6C,OAAS,KACtB9I,KAAKiG,QAAQ8C,QAAU,KACvB/I,KAAKiG,QAAU,MAElB,CAKDoD,eACE,GAAIrJ,KAAKgH,MAAO,CAEViD,IAAAA,EAAajM,EAAc,mBAC/BiM,EAAWC,UAAYlK,KAAKwE,SAASpE,QAAQ+J,SAC7CF,EAAajK,KAAKwE,SAASzD,aACzB,sBACAkJ,EACAjK,MAEFA,KAAKiG,QAAUjI,EAAc,2CAC7BgC,KAAKiG,QAAQ3H,YAAY2L,GACzBjK,KAAKgH,MAAMI,UAAU8C,UAAY,GACjClK,KAAKgH,MAAMI,UAAU9I,YAAY0B,KAAKiG,SACtCjG,KAAKgH,MAAMwB,mBAAkB,GAC7BxI,KAAKwG,mBAAiB,CAEzB,CAKD4C,SACE,GAAIpJ,KAAKoG,WACP,OAKF,GAFApG,KAAKoG,YAAa,EAEdpG,KAAKsG,QAAUzH,EAEjB,YADAmB,KAAKqJ,eAIH,GAAArJ,KAAKwE,SAASlD,SAAS,gBAAiB,CAAEmD,QAASzE,OAAQ6B,iBAC7D,OAGIuI,MAAAA,EAAkB,WAAYpK,KAAKiG,QAErCjG,KAAKoI,iBAaHgC,GAAkBpK,KAAKgH,SAAWhH,KAAKgH,MAAMkC,UAAYxJ,MAC3DM,KAAKqK,YAAa,EAIjBrK,KAAKiG,QAASqE,SAASC,OAAM,SAAUC,SAAQ,KACzCxK,KAAAqK,YAAa,EAClBrK,KAAKyK,aAAW,KAGlBzK,KAAKyK,cAEEzK,KAAKiG,UAAYjG,KAAKiG,QAAQiC,YACvClI,KAAKgH,MAAMI,UAAU9I,YAAY0B,KAAKiG,QAEzC,CAODyE,WACM1K,KAAKwE,SAASlD,SAAS,kBAAmB,CAAEmD,QAASzE,OAAQ6B,kBAI7D7B,KAAKgH,QACHhH,KAAKoI,kBAAoBpI,KAAKqK,aAAe3K,IAG/CM,KAAKyK,cACIzK,KAAKsJ,WACdtJ,KAAK6G,MAAK,GAAO,GAGf7G,KAAKgH,MAAM2D,eACb3K,KAAKgH,MAAM2D,cAAc/C,aAAa,cAAe,SAG1D,CAKDgD,aACE5K,KAAKwE,SAASlD,SAAS,oBAAqB,CAAEmD,QAASzE,OACnDA,KAAKgH,OAAShH,KAAKgH,MAAM2D,eAC3B3K,KAAKgH,MAAM2D,cAAc/C,aAAa,cAAe,OAExD,CAMDO,SACEnI,KAAKoG,YAAa,GAEdpG,KAAKwE,SAASlD,SAAS,gBAAiB,CAAEmD,QAASzE,OAAQ6B,mBAI3D7B,KAAKiG,SAAWjG,KAAKiG,QAAQiC,YAC/BlI,KAAKiG,QAAQkC,SAGXnI,KAAKyG,aAAezG,KAAKyG,YAAYR,SACvCjG,KAAKyG,YAAYR,QAAQkC,SAE5B,CAKDsC,cACOzK,KAAKoG,aAINpG,KAAKwE,SAASlD,SAAS,qBAAsB,CAAEmD,QAASzE,OAAQ6B,mBAKhE7B,KAAKgH,OAAShH,KAAKiG,UAAYjG,KAAKiG,QAAQiC,YAC9ClI,KAAKgH,MAAMI,UAAU9I,YAAY0B,KAAKiG,UAGpCjG,KAAKsG,QAAUzH,GAAqBmB,KAAKsG,QAAUzH,IACrDmB,KAAKwG,qBAER,EAsBH,SAASjC,GAAarC,EAAUsC,EAAUrC,GAExC,MAAMsC,EAAUD,EAASE,sBAAsBxC,EAAUC,GAErD,IAACsC,IAAYA,EAAQE,SACvB,OAGI,MAAEvE,QAAAA,GAAYoE,EAMd1B,EAAcqC,EAAe/E,EADdoE,EAASvC,cAAgBiD,EAAgB9E,EAASoE,GACbtC,EAAUC,GAE9DiD,EAAY,IAAIC,EAAUjF,EAAS8B,GAAY,GACrDkD,OAAAA,EAAUzC,OAAO8B,EAAQ9F,MAAO8F,EAAQ7F,OAAQkE,GAEhD2B,EAAQE,WACRF,EAAQa,iBACNjC,KAAKkC,KAAKd,EAAQ9F,MAAQyG,EAAU3B,SACpCJ,KAAKkC,KAAKd,EAAQ7F,OAASwG,EAAU3B,UAGhCgB,CACT,CAwBA,MAAMklB,GAIJ5pB,YAAYI,GACVH,KAAKG,KAAOA,EAEZH,KAAK4pB,MAAQvmB,KAAKQ,IAChB1D,EAAKC,QAAQ6N,QAAQ,GAAK9N,EAAKC,QAAQ6N,QAAQ,GAAK,EAtE9B,GA0ExBjO,KAAK6pB,aAAe,EACrB,CAODzH,WAAW5C,GACH,MAAErf,KAAAA,GAASH,KAEbG,GAAAA,EAAKmB,SAAS,YAAYO,iBAC5B,OAGI,MAAEoM,QAAAA,GAAY9N,EAAKC,QACnB4iB,OAAqB,IAATxD,GAA6BA,GAAQ,EACnDoB,IAAAA,EAGJ,IAAKA,EAAI,EAAGA,GAAK3S,EAAQ,GAAI2S,IAC3B5gB,KAAK8pB,iBAAiB3pB,EAAKqS,WAAawQ,EAAYpC,GAAMA,IAI5D,IAAKA,EAAI,EAAGA,GAAK3S,EAAQ,GAAI2S,IAC3B5gB,KAAK8pB,iBAAiB3pB,EAAKqS,WAAawQ,GAAcpC,EAAKA,GAE9D,CAKDkJ,iBAAiB3nB,GACfA,EAAQnC,KAAKG,KAAKkhB,eAAelf,GAE7BsC,IAAAA,EAAUzE,KAAK+pB,kBAAkB5nB,GAChCsC,IAEHA,EA9DN,SAAuBtC,EAAOqC,GACtBtC,MAAAA,EAAWsC,EAASqG,YAAY1I,GAElC,IAAAqC,EAASlD,SAAS,gBAAiB,CAAEa,MAAAA,EAAOD,SAAAA,IAAYL,iBAIrD0C,OAAAA,GAAarC,EAAUsC,EAAUrC,EAC1C,CAsDgB2M,CAAc3M,EAAOnC,KAAKG,MAEhCsE,GACFzE,KAAKyP,WAAWhL,GAGrB,CAKDoO,kBAAkB7L,GAChB,IAAIvC,EAAUzE,KAAK+pB,kBAAkB/iB,EAAM7E,OAC3C,OAAKsC,IAEHA,EAAUzE,KAAKG,KAAKuE,sBAAsBsC,EAAMhB,KAAMgB,EAAM7E,OACxDsC,GACFzE,KAAKyP,WAAWhL,IAIhBA,GAEFA,EAAQwE,SAASjC,GAEZvC,CACR,CAKDgL,WAAWhL,GAKT,GAHAzE,KAAKgqB,cAAcvlB,EAAQtC,OAC3BnC,KAAK6pB,aAAappB,KAAKgE,GAEnBzE,KAAK6pB,aAAajkB,OAAS5F,KAAK4pB,MAAO,CAEnCK,MAAAA,EAAgBjqB,KAAK6pB,aAAajc,WAAWsc,IACzCA,EAAK9jB,aAAe8jB,EAAK7jB,YAGb,IADlB4jB,GACkBjqB,KAAK6pB,aAAazK,OAAO6K,EAAe,GAAG,GACnDrjB,SAAO,CAGxB,CAODojB,cAAc7nB,GACN8nB,MAAAA,EAAgBjqB,KAAK6pB,aAAajc,WAAUsc,GAAQA,EAAK/nB,QAAUA,KAEvE,IADE8nB,GACFjqB,KAAK6pB,aAAazK,OAAO6K,EAAe,EAE3C,CAKDF,kBAAkB5nB,GAChB,OAAOnC,KAAK6pB,aAAaM,MAAK1lB,GAAWA,EAAQtC,QAAUA,GAC5D,CAEDyE,UACO5G,KAAA6pB,aAAa5oB,SAAQwD,GAAWA,EAAQmC,YAC7C5G,KAAK6pB,aAAe,IACrB,EAWH,MAAM3d,WAAuB1G,GAM3BC,cACMC,IAAAA,EACJ,MAAQC,WAAAA,GAAe3F,KAAKI,QACvBuF,EAEM,WAAYA,EAErBD,EAAWC,EAAWC,OACb,YAAaD,IAEjBA,EAAWE,QACdF,EAAWE,MAAQ7F,KAAK8F,uBAAuBH,EAAWI,UAGxDJ,EAAWE,QACbH,EAAWC,EAAWE,MAAMD,SAX9BF,EAAW,EAgBPlE,MAAAA,EAAQxB,KAAKsB,SAAS,WAAY,CACtCqE,WAAAA,EACAD,SAAAA,IAEF,OAAO1F,KAAKe,aAAa,WAAYS,EAAMkE,SAAUC,EACtD,CAMDjB,sBAAsBV,EAAW7B,GAE/B,OAAO,IAAIunB,GAAQ1lB,EAAWhE,KAAMmC,EACrC,CAWD0I,YAAY1I,GACV,MAAQwD,WAAAA,GAAe3F,KAAKI,QACxB0K,IAAAA,EACAzL,MAAMC,QAAQqG,GAEhBmF,EAAiBnF,EAAWxD,GACnBwD,GAAcA,EAAWI,UAM7BJ,EAAWE,QACdF,EAAWE,MAAQ7F,KAAK8F,uBAAuBH,EAAWI,UAG5D+E,EAAiBnF,EAAWE,MAAM1D,IAGpC,IAAID,EAAW4I,EAEX5I,aAAoB/C,UACtB+C,EAAWlC,KAAK+K,sBAAsB7I,IAKlCV,MAAAA,EAAQxB,KAAKsB,SAAS,WAAY,CACtCY,SAAUA,GAAY,CAAE,EACxBC,MAAAA,IAGF,OAAOnC,KAAKe,aAAa,WAAYS,EAAMU,SAAUC,EACtD,CAQD2D,uBAAuBkF,GACrB,OAAIhL,KAAKI,QAAQ6K,UAAYjL,KAAKI,QAAQ8K,cA/2J9C,SAA+BnM,EAAQC,EAAgBC,EAASZ,UAE9D,IAAIa,EAAW,GAEf,GAAIH,aAAkBI,QACpBD,EAAW,CAACH,QAAM,GACTA,aAAkBK,UAAYC,MAAMC,QAAQP,GACrDG,EAAWG,MAAME,KAAKR,OACjB,CACL,MAAMS,EAA6B,iBAAXT,EAAsBA,EAASC,EACnDQ,IACFN,EAAWG,MAAME,KAAKN,EAAOQ,iBAAiBD,IAAS,CAIpDN,OAAAA,CACT,CAg2JaJ,CACLkB,KAAKI,QAAQ6K,SACbjL,KAAKI,QAAQ8K,cACbF,IACG,GAGA,CAACA,EACT,CAQDD,sBAAsB9E,GAEpB,MAAM/D,EAAW,CACf+D,QAAAA,GAIIkF,EAA+D,MAApBlF,EAAQ/H,QAAkB+H,EAAUA,EAAQmF,cAAc,KAE3G,GAAID,EAAQ,CAGVjJ,EAASqE,IAAM4E,EAAOvB,QAAQyB,SAAWF,EAAOG,KAE5CH,EAAOvB,QAAQ2B,aACjBrJ,EAASyG,OAASwC,EAAOvB,QAAQ2B,YAGnCrJ,EAASvD,MAAQmL,SAASqB,EAAOvB,QAAQ4B,UAAW,IACpDtJ,EAAStD,OAASkL,SAASqB,EAAOvB,QAAQ6B,WAAY,IAGtDvJ,EAAS1D,EAAI0D,EAASvD,MACtBuD,EAASzD,EAAIyD,EAAStD,OAElBuM,EAAOvB,QAAQ8B,WACjBxJ,EAAST,KAAO0J,EAAOvB,QAAQ8B,UAG3BC,MAAAA,EAAc1F,EAAQmF,cAAc,OAEtCO,IAGFzJ,EAASqF,KAAOoE,EAAYC,YAAcD,EAAYpF,IACtDrE,EAASyF,IAAMgE,EAAYE,aAAa,SAGtCV,EAAOvB,QAAQkC,aAAeX,EAAOvB,QAAQmC,WAC/C7J,EAAS8J,cAAe,EAAA,CAI5B,OAAOhM,KAAKe,aAAa,cAAemB,EAAU+D,EAASkF,EAC5D,CASD5G,aAAarC,EAAUC,GACdoC,OAAAA,GAAarC,EAAUlC,KAAMmC,EACrC,EAWH,MAAMioB,GAAc,KAOpB,MAAMC,GAIJtqB,YAAYI,GACVH,KAAKG,KAAOA,EACZH,KAAKsqB,UAAW,EAChBtqB,KAAKuqB,aAAevqB,KAAKuqB,aAAahe,KAAKvM,MAG3CA,KAAKwqB,kBAAe,EAGpBrqB,EAAKgB,GAAG,eAAgBnB,KAAKuqB,aAC9B,CAEDE,OACOzqB,KAAAuqB,eACLvqB,KAAKmlB,QACN,CAEDzN,QACE,GAAI1X,KAAKsqB,UAAYtqB,KAAKqpB,WAAarpB,KAAK0qB,UAInC,OAAA,EAGH1jB,MAAAA,EAAQhH,KAAKG,KAAKqV,UAExB,OAAAxV,KAAK2S,QAAS,EACd3S,KAAK0qB,WAAY,EACjB1qB,KAAKqpB,WAAY,EACjBrpB,KAAK2qB,UAAY3qB,KAAKG,KAAKC,QAAQwqB,sBAE/B5jB,GAASA,EAAM1C,cAAgB0C,EAAMrI,OAASqB,KAAKG,KAAKC,QAAQyqB,oBAClE7qB,KAAK2qB,UAAY,GAGnB3qB,KAAK8qB,mBACLnkB,YAAW,KACT3G,KAAKmlB,QAAM,GACVnlB,KAAK+qB,aAAe,GAAK,IAErB,CACR,CAEDR,eACE,GAAAvqB,KAAKG,KAAKiB,IAAI,eAAgBpB,KAAKuqB,eAC9BvqB,KAAK0qB,UAAW,CACb1jB,MAAAA,EAAQhH,KAAKG,KAAKqV,UACnBxV,KAAA0qB,WAAY,EACjB1qB,KAAKqpB,WAAY,EACjBrpB,KAAK2qB,UAAY3qB,KAAKG,KAAKC,QAAQ4qB,sBAC/BhkB,GAASA,EAAMjD,WAAWN,QAAUuD,EAAMrI,OAASqB,KAAKG,KAAKC,QAAQyqB,oBACvE7qB,KAAK2qB,UAAY,GAEnB3qB,KAAK8qB,kBAAgB,CAExB,CAEDA,mBACE,MAAQ3qB,KAAAA,GAASH,KACXgH,EAAQhH,KAAKG,KAAKqV,WAChBpV,QAAAA,GAAYD,EAEhBC,GAAkC,SAAlCA,EAAQ6qB,uBACV7qB,EAAQ8qB,iBAAkB,EAC1BlrB,KAAKwqB,cAAe,GACuB,SAAlCpqB,EAAQ6qB,uBACjB7qB,EAAQ8qB,iBAAkB,EAC1BlrB,KAAK2qB,UAAY,EACjB3qB,KAAKwqB,cAAe,GACXxqB,KAAK0qB,WAAavqB,EAAKgrB,oBAEhCnrB,KAAKwqB,aAAerqB,EAAKgrB,oBAEzBnrB,KAAKwqB,aAAexqB,KAAKG,KAAKirB,iBAGhCprB,KAAKqrB,aAAerkB,EAAM6M,wBAE1B1T,EAAKgU,WAAW4B,UAGhB/V,KAAKsrB,cAAiBtrB,KAAK2qB,UAAY,GACvC3qB,KAAKurB,eAAuBvrB,KAAKwqB,cACTxjB,EAAMvC,SAAWuC,EAAMvC,QAAQwC,oBAC9BjH,KAAKqpB,YAAclpB,EAAKmT,WAAWC,aACvDvT,KAAKurB,aAQRvrB,KAAKwrB,oBAAsBprB,EAAQ8qB,iBAPnClrB,KAAKwrB,qBAAsB,EAEvBxrB,KAAK0qB,YACP1jB,EAAMoM,sBACNpM,EAAMqM,wBAKVrT,KAAKyrB,mBAAqBzrB,KAAKwrB,qBAAuBxrB,KAAKG,KAAKC,QAAQkW,UAAY8T,GACpFpqB,KAAK0rB,gBAAkB1rB,KAAKwrB,oBAAsBrrB,EAAK8F,QAAU9F,EAAKwrB,IAEjE3rB,KAAKsrB,cASR,OARKtrB,KAAA2qB,UAAY,EACjB3qB,KAAKurB,cAAe,EACpBvrB,KAAKyrB,mBAAoB,EACzBzrB,KAAKwrB,qBAAsB,OACvBxrB,KAAK0qB,YACPvqB,EAAK8F,QAAQvH,MAAMktB,QAAU5hB,OAAOogB,IACpCjqB,EAAKqW,eAAe,KAKpBxW,KAAKurB,cAAgBvrB,KAAKwqB,cAAgBxqB,KAAKwqB,aAAaqB,WAE9D7rB,KAAK+qB,cAAe,EACpB/qB,KAAK8rB,gBAAkB9rB,KAAKG,KAAKiH,UACjCpH,KAAK+rB,gBAAkB/rB,KAAKG,KAAKqV,UAAU7K,cAE3CxK,EAAKiH,UAAU1I,MAAMstB,SAAW,SAChC7rB,EAAKiH,UAAU1I,MAAMC,MAAQwB,EAAK8B,aAAae,EAAI,MAEnDhD,KAAK+qB,cAAe,EAGlB/qB,KAAK0qB,WAEH1qB,KAAKwrB,qBACPrrB,EAAK8F,QAAQvH,MAAMktB,QAAU5hB,OAAOogB,IACpCjqB,EAAKqW,eAAe,KAEhBxW,KAAKyrB,oBACPtrB,EAAKwrB,GAAGjtB,MAAMktB,QAAU5hB,OAAOogB,KAEjCjqB,EAAK8F,QAAQvH,MAAMktB,QAAU,KAG3B5rB,KAAKurB,eACPvrB,KAAKisB,yBACDjsB,KAAKqrB,eAEPrrB,KAAKqrB,aAAa3sB,MAAMwtB,WAAa,YAIrClsB,KAAKqrB,aAAa3sB,MAAMktB,QAAU5hB,OAAOogB,OAGpCpqB,KAAKqpB,YAGdlpB,EAAKmT,WAAW2M,YAAY,GAAG7hB,GAAGM,MAAMmiB,QAAU,OAClD1gB,EAAKmT,WAAW2M,YAAY,GAAG7hB,GAAGM,MAAMmiB,QAAU,OAE9C7gB,KAAK+qB,cACmB,IAAtB5qB,EAAKmT,WAAWtQ,IAElB7C,EAAKmT,WAAW4M,gBAChB/f,EAAKmT,WAAWE,UAIvB,CAED2R,SACMnlB,KAAK0qB,WACF1qB,KAAKsrB,eACLtrB,KAAKqrB,cACyB,QAA9BrrB,KAAKqrB,aAAantB,QAOvB,IAAIsQ,SAASC,IACP0d,IAAAA,GAAU,EACVC,GAAa,EAzqKzB,IAAqBC,KA0qKgCrsB,KAAKqrB,aAzqKpD,WAAYgB,EACPA,EAAI/hB,SAASC,OAAM,SAGxB8hB,EAAIzjB,SACC4F,QAAQC,QAAQ4d,GAGlB,IAAI7d,SAAQ,CAACC,EAAS6d,KAC3BD,EAAIvjB,OAAS,IAAM2F,EAAQ4d,GAC3BA,EAAItjB,QAAUujB,CAAAA,KA+pKuD9hB,SAAQ,KACvE2hB,GAAU,EACLC,GACH3d,OAGJ9H,YAAW,KACTylB,GAAa,EACTD,GACF1d,MAED,IACH9H,WAAW8H,EAAS,IAAG,IACtBjE,SAAQ,IAAMxK,KAAKusB,cAEtBvsB,KAAKusB,WAER,CAEDA,YACOvsB,KAAAG,KAAK8F,QAAQvH,MAAM8tB,YAAY,6BAA8BxsB,KAAK2qB,UAAY,MAEnF3qB,KAAKG,KAAKmB,SACRtB,KAAK0qB,UAAY,wBAA0B,yBAI7C1qB,KAAKG,KAAKmB,SAEP,eAAiBtB,KAAK0qB,UAAY,KAAO,QAG5C1qB,KAAKG,KAAK8F,QAAQkV,UAAUnb,KAAK0qB,UAAY,MAAQ,UAAU,oBAE3D1qB,KAAK0qB,WACH1qB,KAAKqrB,eAEPrrB,KAAKqrB,aAAa3sB,MAAMktB,QAAU,KAEpC5rB,KAAKysB,uBACIzsB,KAAKqpB,WACdrpB,KAAK0sB,wBAGF1sB,KAAKsrB,eACRtrB,KAAK2sB,sBAER,CAEDA,uBACQ,MAAExsB,KAAAA,GAASH,KACjBA,KAAK2S,OAAS3S,KAAK0qB,UACnB1qB,KAAKsqB,SAAWtqB,KAAKqpB,UACrBrpB,KAAK0qB,WAAY,EACjB1qB,KAAKqpB,WAAY,EAEjBlpB,EAAKmB,SACHtB,KAAK2S,OAAS,sBAAwB,uBAIxCxS,EAAKmB,SAEF,eAAiBtB,KAAK2S,OAAS,QAAU,WAGxC3S,KAAKsqB,SACPnqB,EAAKyG,UACI5G,KAAK2S,SACV3S,KAAKurB,eACPprB,EAAKiH,UAAU1I,MAAMstB,SAAW,UAChC7rB,EAAKiH,UAAU1I,MAAMC,MAAQ,QAE/BwB,EAAKqV,UAAUnC,sBAElB,CAEDoZ,sBACQ,MAAEtsB,KAAAA,GAASH,KACbA,KAAKurB,eACHvrB,KAAK+qB,eACP/qB,KAAK4sB,WAAW5sB,KAAK8rB,gBAAiB,YAAa,sBACnD9rB,KAAK4sB,WAAW5sB,KAAK+rB,gBAAiB,YAAa,SAGrD5rB,EAAKqV,UAAUpC,sBACfpT,KAAK4sB,WACHzsB,EAAKqV,UAAUpO,UACf,YACAjH,EAAKqV,UAAUZ,wBAIf5U,KAAKyrB,mBACPzrB,KAAK4sB,WAAWzsB,EAAKwrB,GAAI,UAAW3hB,OAAO7J,EAAKC,QAAQkW,YAGtDtW,KAAKwrB,qBACPxrB,KAAK4sB,WAAWzsB,EAAK8F,QAAS,UAAW,IAE5C,CAEDymB,wBACQ,MAAEvsB,KAAAA,GAASH,KAEbA,KAAKurB,cACPvrB,KAAKisB,wBAAuB,GAG1BjsB,KAAKyrB,mBACFtrB,EAAKmW,UAAY,KACtBtW,KAAK4sB,WAAWzsB,EAAKwrB,GAAI,UAAW,KAGlC3rB,KAAKwrB,qBACPxrB,KAAK4sB,WAAWzsB,EAAK8F,QAAS,UAAW,IAE5C,CAKDgmB,uBAAuBlL,GACrB,IAAK/gB,KAAKwqB,aAAc,OAExB,MAAQrqB,KAAAA,GAASH,MACT6rB,UAAAA,GAAc7rB,KAAKwqB,cACnBhV,UAAAA,EAAWvT,aAAAA,GAAiB9B,EAEpC,GAAIH,KAAK+qB,aAAc,CACrB,MAAM8B,GAAoB5qB,EAAae,GAAKhD,KAAKwqB,aAAaxnB,EAAI6oB,EAAU7oB,GAAK6oB,EAAUrtB,EACrFsuB,GAAoB7qB,EAAagB,GAAKjD,KAAKwqB,aAAavnB,EAAI4oB,EAAU5oB,GAAK4oB,EAAUptB,EACrFsuB,EAAmB9qB,EAAae,EAAI6oB,EAAUrtB,EAC9CwuB,EAAmB/qB,EAAagB,EAAI4oB,EAAUptB,EAGhDsiB,GACF/gB,KAAK4sB,WACH5sB,KAAK8rB,gBACL,YACA7jB,EAAkB4kB,EAAkBC,IAGtC9sB,KAAK4sB,WACH5sB,KAAK+rB,gBACL,YACA9jB,EAAkB8kB,EAAkBC,MAGtCxc,EAAaxQ,KAAK8rB,gBAAiBe,EAAkBC,GACrDtc,EAAaxQ,KAAK+rB,gBAAiBgB,EAAkBC,GAAgB,CAIzErd,EAAe6F,EAAU5C,IAAKiZ,GAAa7rB,KAAKwqB,cAChDhV,EAAUlR,cAAgBtE,KAAKwqB,aAAahsB,EAAIgX,EAAU7W,MAEtDoiB,EACF/gB,KAAK4sB,WAAWpX,EAAUpO,UAAW,YAAaoO,EAAUZ,uBAE5DY,EAAUnC,qBAEb,CAODuZ,WAAWxb,EAAQpP,EAAMgG,GACnB,IAAChI,KAAK2qB,UAER,YADAvZ,EAAO1S,MAAMsD,GAAQgG,GAIvB,MAAQmM,WAAAA,GAAenU,KAAKG,KAEtB8sB,EAAY,CAChBtc,SAAU3Q,KAAK2qB,UACf7V,OAAQ9U,KAAKG,KAAKC,QAAQ0U,OAC1BD,WAAY,KACLV,EAAW+Q,iBAAiBtf,QAC/B5F,KAAK2sB,sBAAoB,EAG7Bvb,OAAAA,GAEF6b,EAAUjrB,GAAQgG,EAClBmM,EAAWO,gBAAgBuY,EAC5B,EA2MH,MAAMC,GAAiB,CACrB1U,gBAAgB,EAChB6H,QAAS,GACTgH,MAAM,EACN3N,cAAc,EACdvD,qBAAqB,EACrByU,sBAAuB,IACvBI,sBAAuB,IACvBhW,sBAAuB,IACvBkO,QAAQ,EACRC,WAAW,EACXP,aAAa,EACbiI,kBAAmB,IACnB3P,yBAAyB,EACzBqO,iBAAkB,gBAClB4D,cAAe,QACfC,UAAW,kBACXzO,gBAAiB,OACjB6J,kBAAmB,MACnBJ,eAAgB,IAChB9R,UAAW,GAEXnU,MAAO,EACPgI,SAAU,6BACV8D,QAAS,CAAC,EAAG,GACb6G,OAAQ,4BAMV,MAAMuY,WAAmBnhB,GAIvBnM,YAAYK,GACV+L,QAEAnM,KAAKstB,gBAAgBltB,GAOrBJ,KAAK2f,OAAS,GAMd3f,KAAKutB,kBAAoB,GAOzBvtB,KAAKiC,aAAe,GAOpBjC,KAAKsW,UAAY,EAGjBtW,KAAKknB,YAAS,EAEdlnB,KAAKkc,OAAS,IAAIjL,EAGlBjR,KAAKmU,WAAa,IAAI8Q,EAEtBjlB,KAAKsT,WAAa,IAAIyM,EAAW/f,MACjCA,KAAK4V,SAAW,IAAIyF,EAASrb,MAC7BA,KAAK0S,OAAS,IAAI2X,GAAOrqB,MACzBA,KAAKwtB,SAAW,IAAIjL,EAASviB,MAC7BA,KAAKwP,cAAgB,IAAIma,GAAc3pB,KACxC,CAEDqM,OACM,GAAArM,KAAK2S,QAAU3S,KAAKytB,aACtB,OAGGztB,KAAA2S,QAAS,EACd3S,KAAKsB,SAAS,QACdtB,KAAKsB,SAAS,cAEdtB,KAAK0tB,uBAGL,IAAIC,EAAc,aAClB,OAAI3tB,KAAK4V,SAASkG,gBAChB6R,GAAe,gBAEb3tB,KAAKI,QAAQwtB,YACfD,GAAe,IAAM3tB,KAAKI,QAAQwtB,WAEpC5tB,KAAKiG,QAAQhI,WAAa,IAAM0vB,EAEhC3tB,KAAKwS,UAAYxS,KAAKI,QAAQ+B,OAAS,EACvCnC,KAAKkhB,eAAiBlhB,KAAKwS,UAC3BxS,KAAKsB,SAAS,eAGdtB,KAAK6tB,YAAc,IAAIpI,EAAYzlB,OAG/BqE,OAAOypB,MAAM9tB,KAAKwS,YACfxS,KAAKwS,UAAY,GACjBxS,KAAKwS,WAAaxS,KAAKyF,iBAC5BzF,KAAKwS,UAAY,GAGdxS,KAAK4V,SAASkG,eAEjB9b,KAAKmd,gBAIPnd,KAAK+tB,aAEL/tB,KAAK2f,OAAO1c,EAAI+B,OAAOgpB,YAEvBhuB,KAAKiuB,iBAAmBjuB,KAAK6K,YAAY7K,KAAKwS,WAC9CxS,KAAKsB,SAAS,cAAe,CAC3Ba,MAAOnC,KAAKwS,UACZxM,KAAMhG,KAAKiuB,iBACXjnB,WAAO,IAIThH,KAAKmrB,oBAAsBnrB,KAAKorB,iBAChCprB,KAAKsB,SAAS,iBAEdtB,KAAKmB,GAAG,uBAAuB,KAC7BnB,KAAKsT,WAAW2M,YAAY,GAAG7hB,GAAGM,MAAMmiB,QAAU,QAClD7gB,KAAKsT,WAAW2M,YAAY,GAAG7hB,GAAGM,MAAMmiB,QAAU,QAGlD7gB,KAAKiiB,WAAWjiB,KAAKsT,WAAW2M,YAAY,GAAIjgB,KAAKwS,UAAY,GACjExS,KAAKiiB,WAAWjiB,KAAKsT,WAAW2M,YAAY,GAAIjgB,KAAKwS,UAAY,GAEjExS,KAAKmT,cAELnT,KAAKwP,cAAc4S,aAEnBpiB,KAAKkc,OAAO/K,IAAInM,OAAQ,SAAUhF,KAAKkuB,kBAAkB3hB,KAAKvM,OAC9DA,KAAKkc,OAAO/K,IAAInM,OAAQ,SAAUhF,KAAKmuB,wBAAwB5hB,KAAKvM,OACpEA,KAAKsB,SAAS,aAAY,IAI5BtB,KAAKiiB,WAAWjiB,KAAKsT,WAAW2M,YAAY,GAAIjgB,KAAKwS,WACrDxS,KAAKsB,SAAS,UAEdtB,KAAK0S,OAAO+X,OAEZzqB,KAAKsB,SAAS,cAEP,CACR,CAQD+f,eAAelf,GACPgf,MAAAA,EAAYnhB,KAAKyF,cAEvB,OAAIzF,KAAKI,QAAQinB,OACXllB,EAAQgf,EAAY,IACtBhf,GAASgf,GAGPhf,EAAQ,IACVA,GAASgf,IAIbhf,EAAQmO,EAAMnO,EAAO,EAAGgf,EAAY,EAGrC,CAEDhO,cACEnT,KAAKsT,WAAW2M,YAAYhf,SAASsf,IAC/BA,EAAWvZ,OACbuZ,EAAWvZ,MAAMmM,gBAGtB,CAMD5E,KAAKpM,GACHnC,KAAKsT,WAAWyD,YACd/W,KAAKqhB,eAAelf,GAASnC,KAAKkhB,eAErC,CAKDkN,OACOpuB,KAAAuO,KAAKvO,KAAKkhB,eAAiB,EACjC,CAKDmN,OACOruB,KAAAuO,KAAKvO,KAAKkhB,eAAiB,EACjC,CAODpN,UAAU9S,GACHhB,KAAAwV,UAAU1B,UAAU9S,EAC1B,CAKD+T,aACE/U,KAAKwV,UAAUT,YAChB,CAMD2C,SACO1X,KAAK0S,OAAOC,QAAU3S,KAAKytB,eAIhCztB,KAAKytB,cAAe,EAEpBztB,KAAKsB,SAAS,SAEdtB,KAAKkc,OAAO3K,YACZvR,KAAK0S,OAAOgF,QACb,CASD9Q,UACM,IAAC5G,KAAKytB,aAGR,OAFAztB,KAAKI,QAAQ6qB,sBAAwB,YACrCjrB,KAAK0X,QAIF1X,KAAAsB,SAAS,WAEdtB,KAAKsuB,UAAY,KAEjBtuB,KAAKmc,WAAWG,YAAc,KAC9Btc,KAAKmc,WAAWI,WAAa,KAE7Bvc,KAAKiG,QAAQkC,SAEbnI,KAAKsT,WAAW2M,YAAYhf,SAASsf,IAC/BA,EAAWvZ,OACbuZ,EAAWvZ,MAAMJ,aAIrB5G,KAAKwP,cAAc5I,UACnB5G,KAAKkc,OAAO3K,WACb,CAODgd,oBAAoBC,GACbxuB,KAAAwP,cAAcwa,cAAcwE,GACjCxuB,KAAKsT,WAAW2M,YAAYhf,SAAQ,CAACsf,EAAYK,KAC/C,IAAI6N,EAAuBzuB,KAAKwV,UAAUrT,MAAQ,EAAIye,EAClD5gB,KAAKohB,YACPqN,EAAuBzuB,KAAKqhB,eAAeoN,IAEzCA,IAAyBD,IAE3BxuB,KAAKiiB,WAAW1B,EAAYiO,GAAY,GAG9B,IAAN5N,IAEF5gB,KAAKwV,UAAY+K,EAAWvZ,MAC5BuZ,EAAWvZ,MAAMiM,aAAY,IAAI,IAKvCjT,KAAKsB,SAAS,SACf,CAUD2gB,WAAWyM,EAAQvsB,EAAOuR,GACpB,GAAA1T,KAAKohB,YACPjf,EAAQnC,KAAKqhB,eAAelf,IAG1BusB,EAAO1nB,MAAO,CAChB,GAAI0nB,EAAO1nB,MAAM7E,QAAUA,IAAUuR,EAGnC,OAIFgb,EAAO1nB,MAAMJ,UACb8nB,EAAO1nB,MAAQ,IAAA,CAIb,IAAChH,KAAKohB,YAAcjf,EAAQ,GAAKA,GAASnC,KAAKyF,eACjD,OAGIvD,MAAAA,EAAWlC,KAAK6K,YAAY1I,GAClCusB,EAAO1nB,MAAQ,IAAIuL,EAAMrQ,EAAUC,EAAOnC,MAGtCmC,IAAUnC,KAAKwS,YACjBxS,KAAKwV,UAAYkZ,EAAO1nB,OAG1B0nB,EAAO1nB,MAAMoC,OAAOslB,EAAOtwB,GAC5B,CAED8W,yBACS,MAAA,CACLlS,EAAGhD,KAAKiC,aAAae,EAAI,EACzBC,EAAGjD,KAAKiC,aAAagB,EAAI,EAE5B,CAQD8qB,WAAWra,GAIT,GAAI1T,KAAKytB,aAGP,OAMF,MAAM5oB,EAAkBK,EAAgBlF,KAAKI,QAASJ,OAEjD0T,GAASrD,EAAYxL,EAAiB7E,KAAKutB,qBAOhD5d,EAAe3P,KAAKutB,kBAAmB1oB,GAEvC7E,KAAKsB,SAAS,gBAEdqO,EAAe3P,KAAKiC,aAAcjC,KAAKutB,mBAEvCvtB,KAAKmuB,0BAELnuB,KAAKsB,SAAS,gBAIdtB,KAAKsT,WAAWE,OAAOxT,KAAK0S,OAAOC,SAE9B3S,KAAK2uB,UAAY3pB,OAAO4pB,WAAW,sBAAsBC,SAC5D7uB,KAAKmd,gBAGPnd,KAAKsB,SAAS,UACf,CAKDkV,eAAeoV,GACb5rB,KAAKsW,UAAYjT,KAAKQ,IAAI+nB,EAAS,GACnC5rB,KAAK2rB,GAAGjtB,MAAMktB,QAAU5hB,OAAOhK,KAAKsW,UAAYtW,KAAKI,QAAQkW,UAC9D,CAKD6G,gBACOnd,KAAK2uB,WACR3uB,KAAK2uB,UAAW,EAChB3uB,KAAKiG,QAAQkV,UAAUhK,IAAI,mBAE9B,CAOD+c,oBACOluB,KAAA+tB,aAOD,oBAAoBe,KAAK9pB,OAAOrF,UAAUovB,YAC5CpoB,YAAW,KACT3G,KAAK+tB,YAAU,GACd,IAEN,CASDI,0BACOnuB,KAAAgvB,gBAAgB,EAAGhqB,OAAOgpB,YAChC,CAMDgB,gBAAgBhsB,EAAGC,GACZjD,KAAA2f,OAAO3c,EAAIA,EAChBhD,KAAK2f,OAAO1c,EAAIA,EAChBjD,KAAKsB,SAAS,qBACf,CAQDosB,uBAEE1tB,KAAKiG,QAAUjI,EAAc,QAC7BgC,KAAKiG,QAAQ2B,aAAa,WAAY,MACtC5H,KAAKiG,QAAQ2B,aAAa,OAAQ,UAGlC5H,KAAKojB,SAAWpjB,KAAKiG,QAIrBjG,KAAK2rB,GAAK3tB,EAAc,YAAY,EAAOgC,KAAKiG,SAChDjG,KAAKmc,WAAane,EAAc,oBAAqB,UAAWgC,KAAKiG,SACrEjG,KAAKoH,UAAYpJ,EAAc,mBAAmB,EAAOgC,KAAKmc,YAG9Dnc,KAAKmc,WAAWvU,aAAa,uBAAwB,YACrD5H,KAAKoH,UAAUQ,aAAa,YAAa,OACzC5H,KAAKoH,UAAUQ,aAAa,KAAM,eAElC5H,KAAKsT,WAAWqN,gBAEhB3gB,KAAKqoB,GAAK,IAAIM,GAAG3oB,MACjBA,KAAKqoB,GAAGhc,QAGPrM,KAAKI,QAAQjC,YAAcE,SAAS4wB,MAAM3wB,YAAY0B,KAAKiG,QAC7D,CASDmlB,iBACSA,OAj4EX,SAAwBjpB,EAAOD,EAAUsC,GAEjChD,MAAAA,EAAQgD,EAASlD,SAAS,cAAe,CAC7Ca,MAAAA,EACAD,SAAAA,EACAsC,SAAAA,IAGF,GAAIhD,EAAM0tB,YAER,OAAO1tB,EAAM0tB,YAGT,MAAEjpB,QAAAA,GAAY/D,EACpB,IAAIgtB,EAEAC,EAEJ,GAAIlpB,IAA8C,IAAnCzB,EAASpE,QAAQgvB,cAAyB,CACjDA,MAAAA,EAAgB5qB,EAASpE,QAAQgvB,eAAiB,MACxDD,EAAYlpB,EAAQ4oB,QAAQO,GACxBnpB,EAAUA,EAAQmF,cAAcgkB,EAAa,CAGnDD,OAAAA,EAAY3qB,EAASzD,aAAa,UAAWouB,EAAWjtB,EAAUC,GAE9DgtB,IAIAD,EAHGhtB,EAAS8J,aAzElB,SAAmC5N,EAAIixB,EAAYC,GACjD,MAAMC,EAAgBnxB,EAAGoxB,wBAInBtsB,EAASqsB,EAAc5wB,MAAQ0wB,EAC/BlsB,EAASosB,EAAc3wB,OAAS0wB,EAChCG,EAAgBvsB,EAASC,EAASD,EAASC,EAE3CusB,GAAWH,EAAc5wB,MAAQ0wB,EAAaI,GAAiB,EAC/DE,GAAWJ,EAAc3wB,OAAS0wB,EAAcG,GAAiB,EASjE3c,EAAS,CACb9P,EAAGusB,EAAcK,KAAOF,EACxBzsB,EAAGssB,EAAcM,IAAMF,EACvBnxB,EAAG6wB,EAAaI,GAKlB,OAAA3c,EAAO+Y,UAAY,CACjBrtB,EAAG+wB,EAAc5wB,MACjBF,EAAG8wB,EAAc3wB,OACjBoE,EAAG0sB,EACHzsB,EAAG0sB,GAGE7c,CACT,CAyCoBgd,CACZX,EACAjtB,EAASvD,OAASuD,EAAS1D,EAC3B0D,EAAStD,QAAUsD,EAASzD,GA7FpC,SAA4BL,GACpBmxB,MAAAA,EAAgBnxB,EAAGoxB,wBAClB,MAAA,CACLxsB,EAAGusB,EAAcK,KACjB3sB,EAAGssB,EAAcM,IACjBrxB,EAAG+wB,EAAc5wB,MAErB,CAiFoBoxB,CAAmBZ,IAU9B3qB,EAASzD,aAAa,cAAemuB,EAAahtB,EAAUC,EACrE,CA01EWipB,CACLprB,KAAKwS,UACLxS,KAAKwV,UAAYxV,KAAKwV,UAAUxP,KAAOhG,KAAKiuB,iBAC5CjuB,KAEH,CAMDohB,UACE,OAAQphB,KAAKI,QAAQinB,MAAQrnB,KAAKyF,cAAgB,CACnD,CAMD6nB,gBAAgBltB,GACV4E,OAAO4pB,WAAW,4CAA4CC,UAChEzuB,EAAQ6qB,sBAAwB,OAChC7qB,EAAQ4U,sBAAwB,GAIlChV,KAAKI,QAAU,IACV8sB,MACA9sB,EAEN,EC9uMH/B,SAAS+M,cAAc,kBAAkB9M,YAAaN,EAAA,QAAA,ggJACzC,MAAAgyB,GAAejqB,IACT,IAAIkG,EAAmB,CACtClG,QAAAA,EACAkF,SAAU,IACVmD,WAAYif,KAELhhB,MAAK","x_google_ignoreList":[0,1]}